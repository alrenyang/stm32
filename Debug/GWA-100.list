
GWA-100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a444  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800a558  0800a558  0001a558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab98  0800ab98  00020244  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab98  0800ab98  00020244  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab98  0800ab98  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab98  0800ab98  0001ab98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab9c  0800ab9c  0001ab9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800aba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a5c  20000244  0800ade4  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ca0  0800ade4  00022ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff84  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039b4  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00033be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbd  00000000  00000000  00034b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a213  00000000  00000000  000356c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013712  00000000  00000000  0004f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b6c5  00000000  00000000  00062fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d54  00000000  00000000  000ee6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000f3404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000244 	.word	0x20000244
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a53c 	.word	0x0800a53c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000248 	.word	0x20000248
 800014c:	0800a53c 	.word	0x0800a53c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <MX_GPIO_Init+0xdc>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a30      	ldr	r2, [pc, #192]	; (8000b64 <MX_GPIO_Init+0xdc>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <MX_GPIO_Init+0xdc>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <MX_GPIO_Init+0xdc>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a2a      	ldr	r2, [pc, #168]	; (8000b64 <MX_GPIO_Init+0xdc>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <MX_GPIO_Init+0xdc>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <MX_GPIO_Init+0xdc>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a24      	ldr	r2, [pc, #144]	; (8000b64 <MX_GPIO_Init+0xdc>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <MX_GPIO_Init+0xdc>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	481f      	ldr	r0, [pc, #124]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000aea:	f001 f8e7 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af4:	481d      	ldr	r0, [pc, #116]	; (8000b6c <MX_GPIO_Init+0xe4>)
 8000af6:	f001 f8e1 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	481c      	ldr	r0, [pc, #112]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000b00:	f001 f8dc 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b04:	2320      	movs	r3, #32
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4813      	ldr	r0, [pc, #76]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000b1c:	f000 ff4a 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	4619      	mov	r1, r3
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <MX_GPIO_Init+0xe4>)
 8000b3a:	f000 ff3b 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	4619      	mov	r1, r3
 8000b54:	4806      	ldr	r0, [pc, #24]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000b56:	f000 ff2d 	bl	80019b4 <HAL_GPIO_Init>

}
 8000b5a:	bf00      	nop
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010800 	.word	0x40010800
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	40011000 	.word	0x40011000

08000b74 <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	 (void) HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 100);
 8000b7c:	1d39      	adds	r1, r7, #4
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	2201      	movs	r2, #1
 8000b82:	4804      	ldr	r0, [pc, #16]	; (8000b94 <__io_putchar+0x20>)
 8000b84:	f001 fd96 	bl	80026b4 <HAL_UART_Transmit>
	 return ch;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20002c40 	.word	0x20002c40

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9c:	f000 fcc4 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba0:	f000 f84e 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba4:	f7ff ff70 	bl	8000a88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ba8:	f000 fc1c 	bl	80013e4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000bac:	f000 fa6e 	bl	800108c <MX_SPI2_Init>

  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4919      	ldr	r1, [pc, #100]	; (8000c18 <main+0x80>)
 8000bb4:	4819      	ldr	r0, [pc, #100]	; (8000c1c <main+0x84>)
 8000bb6:	f001 fe00 	bl	80027ba <HAL_UART_Receive_IT>

  printf("System start.\r\n");
 8000bba:	4819      	ldr	r0, [pc, #100]	; (8000c20 <main+0x88>)
 8000bbc:	f007 fbe2 	bl	8008384 <puts>
  w5500Init();
 8000bc0:	f002 fc62 	bl	8003488 <w5500Init>
  wizchip_setnetinfo(&gWIZNETINFO);
 8000bc4:	4817      	ldr	r0, [pc, #92]	; (8000c24 <main+0x8c>)
 8000bc6:	f004 fbc1 	bl	800534c <wizchip_setnetinfo>
  print_network_information();
 8000bca:	f000 f985 	bl	8000ed8 <print_network_information>
  DNS_init(0,ethBuf0);
 8000bce:	4916      	ldr	r1, [pc, #88]	; (8000c28 <main+0x90>)
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f004 ffd5 	bl	8005b80 <DNS_init>
  IP_TYPE = 0x1c;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <main+0x94>)
 8000bd8:	221c      	movs	r2, #28
 8000bda:	701a      	strb	r2, [r3, #0]
  while (DNS_run(dns_server_ip, URL, dnsclient_ip) != 1);
 8000bdc:	bf00      	nop
 8000bde:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <main+0x98>)
 8000be0:	4914      	ldr	r1, [pc, #80]	; (8000c34 <main+0x9c>)
 8000be2:	4815      	ldr	r0, [pc, #84]	; (8000c38 <main+0xa0>)
 8000be4:	f004 ffe8 	bl	8005bb8 <DNS_run>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d1f7      	bne.n	8000bde <main+0x46>
  MQTT_run();
 8000bee:	f000 f893 	bl	8000d18 <MQTT_run>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	4811      	ldr	r0, [pc, #68]	; (8000c3c <main+0xa4>)
 8000bf8:	f001 f860 	bl	8001cbc <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c00:	f000 fcf4 	bl	80015ec <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2120      	movs	r1, #32
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <main+0xa4>)
 8000c0a:	f001 f857 	bl	8001cbc <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000c0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c12:	f000 fceb 	bl	80015ec <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000c16:	e7ec      	b.n	8000bf2 <main+0x5a>
 8000c18:	20001be4 	.word	0x20001be4
 8000c1c:	20002c40 	.word	0x20002c40
 8000c20:	0800a570 	.word	0x0800a570
 8000c24:	20000000 	.word	0x20000000
 8000c28:	200023e8 	.word	0x200023e8
 8000c2c:	200013e0 	.word	0x200013e0
 8000c30:	20000260 	.word	0x20000260
 8000c34:	0800a7dc 	.word	0x0800a7dc
 8000c38:	20000018 	.word	0x20000018
 8000c3c:	40010800 	.word	0x40010800

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b090      	sub	sp, #64	; 0x40
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0318 	add.w	r3, r7, #24
 8000c4a:	2228      	movs	r2, #40	; 0x28
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f007 fc98 	bl	8008584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c66:	2301      	movs	r3, #1
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c72:	2300      	movs	r3, #0
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c76:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 f833 	bl	8001cec <HAL_RCC_OscConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c8c:	f000 f9f8 	bl	8001080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	230f      	movs	r3, #15
 8000c92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c94:	2302      	movs	r3, #2
 8000c96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 faa0 	bl	80021f0 <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000cb6:	f000 f9e3 	bl	8001080 <Error_Handler>
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3740      	adds	r7, #64	; 0x40
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <HAL_UART_RxCpltCallback+0x40>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d111      	bne.n	8000cfa <HAL_UART_RxCpltCallback+0x36>
		printf("Key Pressed: %c\r\n", rx_data);
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_UART_RxCpltCallback+0x44>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480b      	ldr	r0, [pc, #44]	; (8000d0c <HAL_UART_RxCpltCallback+0x48>)
 8000cde:	f007 faeb 	bl	80082b8 <iprintf>
		if(rx_data == 'a')
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_UART_RxCpltCallback+0x44>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b61      	cmp	r3, #97	; 0x61
 8000ce8:	d102      	bne.n	8000cf0 <HAL_UART_RxCpltCallback+0x2c>
		{
			printf("ok\r\n");
 8000cea:	4809      	ldr	r0, [pc, #36]	; (8000d10 <HAL_UART_RxCpltCallback+0x4c>)
 8000cec:	f007 fb4a 	bl	8008384 <puts>
		}
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4905      	ldr	r1, [pc, #20]	; (8000d08 <HAL_UART_RxCpltCallback+0x44>)
 8000cf4:	4807      	ldr	r0, [pc, #28]	; (8000d14 <HAL_UART_RxCpltCallback+0x50>)
 8000cf6:	f001 fd60 	bl	80027ba <HAL_UART_Receive_IT>
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40004400 	.word	0x40004400
 8000d08:	20001be4 	.word	0x20001be4
 8000d0c:	0800a580 	.word	0x0800a580
 8000d10:	0800a594 	.word	0x0800a594
 8000d14:	20002c40 	.word	0x20002c40

08000d18 <MQTT_run>:

void MQTT_run(void){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0ec      	sub	sp, #432	; 0x1b0
 8000d1c:	af04      	add	r7, sp, #16

  int rc = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  Network n;
  MQTTClient c;
  MQTTMessage m;
  uint32_t ck_timer;

  NewNetwork(&n, 0);
 8000d24:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f005 fdae 	bl	800688c <NewNetwork>
  ConnectNetwork(&n, dnsclient_ip, targetPort);
 8000d30:	4b5d      	ldr	r3, [pc, #372]	; (8000ea8 <MQTT_run+0x190>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d3a:	495c      	ldr	r1, [pc, #368]	; (8000eac <MQTT_run+0x194>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f005 fe20 	bl	8006982 <ConnectNetwork>
  MQTTClientInit(&c, &n, 1000, buf, sizeof(buf), tempBuffer, sizeof(tempBuffer));
 8000d42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d46:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8000d4a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8000d4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d52:	9202      	str	r2, [sp, #8]
 8000d54:	4a56      	ldr	r2, [pc, #344]	; (8000eb0 <MQTT_run+0x198>)
 8000d56:	9201      	str	r2, [sp, #4]
 8000d58:	2264      	movs	r2, #100	; 0x64
 8000d5a:	9200      	str	r2, [sp, #0]
 8000d5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d60:	f005 f822 	bl	8005da8 <MQTTClientInit>

  MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8000d64:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d68:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000d6c:	4a51      	ldr	r2, [pc, #324]	; (8000eb4 <MQTT_run+0x19c>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	4611      	mov	r1, r2
 8000d72:	2358      	movs	r3, #88	; 0x58
 8000d74:	461a      	mov	r2, r3
 8000d76:	f007 fcdc 	bl	8008732 <memcpy>
  data.willFlag = 0;
 8000d7a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d7e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000d82:	2200      	movs	r2, #0
 8000d84:	76da      	strb	r2, [r3, #27]
  data.MQTTVersion = 3;
 8000d86:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d8a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000d8e:	2203      	movs	r2, #3
 8000d90:	721a      	strb	r2, [r3, #8]
  data.clientID.cstring = opts.clientid;
 8000d92:	4b49      	ldr	r3, [pc, #292]	; (8000eb8 <MQTT_run+0x1a0>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d9a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000d9e:	60da      	str	r2, [r3, #12]
  data.username.cstring = opts.username;
 8000da0:	4b45      	ldr	r3, [pc, #276]	; (8000eb8 <MQTT_run+0x1a0>)
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000da8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000dac:	641a      	str	r2, [r3, #64]	; 0x40
  data.password.cstring = opts.password;
 8000dae:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <MQTT_run+0x1a0>)
 8000db0:	695a      	ldr	r2, [r3, #20]
 8000db2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000db6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000dba:	64da      	str	r2, [r3, #76]	; 0x4c

  data.keepAliveInterval = 60;
 8000dbc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000dc0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000dc4:	223c      	movs	r2, #60	; 0x3c
 8000dc6:	831a      	strh	r2, [r3, #24]
  data.cleansession = 1;
 8000dc8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000dcc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	769a      	strb	r2, [r3, #26]

  rc = MQTTConnect(&c, &data);
 8000dd4:	463a      	mov	r2, r7
 8000dd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f005 fb0b 	bl	80063f8 <MQTTConnect>
 8000de2:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
  printf("Connected %d\r\n", rc);
 8000de6:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8000dea:	4834      	ldr	r0, [pc, #208]	; (8000ebc <MQTT_run+0x1a4>)
 8000dec:	f007 fa64 	bl	80082b8 <iprintf>
  opts.showtopics = 1;
 8000df0:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <MQTT_run+0x1a0>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	621a      	str	r2, [r3, #32]

  printf("Subscribing to %s\r\n", MQTT_TOPIC);
 8000df6:	4932      	ldr	r1, [pc, #200]	; (8000ec0 <MQTT_run+0x1a8>)
 8000df8:	4832      	ldr	r0, [pc, #200]	; (8000ec4 <MQTT_run+0x1ac>)
 8000dfa:	f007 fa5d 	bl	80082b8 <iprintf>
  rc = MQTTSubscribe(&c, MQTT_TOPIC, opts.qos, messageArrived);
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <MQTT_run+0x1a0>)
 8000e00:	7b1a      	ldrb	r2, [r3, #12]
 8000e02:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8000e06:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <MQTT_run+0x1b0>)
 8000e08:	492d      	ldr	r1, [pc, #180]	; (8000ec0 <MQTT_run+0x1a8>)
 8000e0a:	f005 fb7b 	bl	8006504 <MQTTSubscribe>
 8000e0e:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
  printf("Subscribed %d\r\n", rc);
 8000e12:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8000e16:	482d      	ldr	r0, [pc, #180]	; (8000ecc <MQTT_run+0x1b4>)
 8000e18:	f007 fa4e 	bl	80082b8 <iprintf>

#if PUBLISH_MYSELF == 1
  m.qos = QOS0;
 8000e1c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000e20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
  m.retained = 0;
 8000e28:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000e2c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000e30:	2200      	movs	r2, #0
 8000e32:	705a      	strb	r2, [r3, #1]
  m.dup = 0;
 8000e34:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000e38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	709a      	strb	r2, [r3, #2]
  //ck_timer = TIM2_gettimer();
#endif

  while(1)
  {
    MQTTYield(&c, data.keepAliveInterval);
 8000e40:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000e44:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000e48:	8b1b      	ldrh	r3, [r3, #24]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f005 fa8c 	bl	8006370 <MQTTYield>
    {
      //ck_timer = TIM2_gettimer();

      //printf("Publishing to %s\r\n", MQTT_TOPIC);

      sprintf(pubbuf, "Hello, W5x00!" );
 8000e58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e5c:	491c      	ldr	r1, [pc, #112]	; (8000ed0 <MQTT_run+0x1b8>)
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f007 fa98 	bl	8008394 <siprintf>
      m.payload = pubbuf;
 8000e64:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000e68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000e6c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8000e70:	609a      	str	r2, [r3, #8]
      m.payloadlen = strlen(pubbuf);
 8000e72:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff f96a 	bl	8000150 <strlen>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000e82:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000e86:	60da      	str	r2, [r3, #12]

      rc = MQTTPublish(&c, MQTT_TOPIC, &m);
 8000e88:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000e8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e90:	490b      	ldr	r1, [pc, #44]	; (8000ec0 <MQTT_run+0x1a8>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f005 fbdf 	bl	8006656 <MQTTPublish>
 8000e98:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
      printf("Published %d\r\n", rc);
 8000e9c:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <MQTT_run+0x1bc>)
 8000ea2:	f007 fa09 	bl	80082b8 <iprintf>
    MQTTYield(&c, data.keepAliveInterval);
 8000ea6:	e7cb      	b.n	8000e40 <MQTT_run+0x128>
 8000ea8:	2000001c 	.word	0x2000001c
 8000eac:	20000260 	.word	0x20000260
 8000eb0:	20000268 	.word	0x20000268
 8000eb4:	0800a5ec 	.word	0x0800a5ec
 8000eb8:	20000020 	.word	0x20000020
 8000ebc:	0800a598 	.word	0x0800a598
 8000ec0:	0800a7f0 	.word	0x0800a7f0
 8000ec4:	0800a5a8 	.word	0x0800a5a8
 8000ec8:	08000fc1 	.word	0x08000fc1
 8000ecc:	0800a5bc 	.word	0x0800a5bc
 8000ed0:	0800a5cc 	.word	0x0800a5cc
 8000ed4:	0800a5dc 	.word	0x0800a5dc

08000ed8 <print_network_information>:
#endif
  }
}

void print_network_information(void)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af04      	add	r7, sp, #16
  memset(&gWIZNETINFO,0,sizeof(gWIZNETINFO));
 8000ede:	2217      	movs	r2, #23
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4831      	ldr	r0, [pc, #196]	; (8000fa8 <print_network_information+0xd0>)
 8000ee4:	f007 fb4e 	bl	8008584 <memset>

  wizchip_getnetinfo(&gWIZNETINFO);
 8000ee8:	482f      	ldr	r0, [pc, #188]	; (8000fa8 <print_network_information+0xd0>)
 8000eea:	f004 fa6f 	bl	80053cc <wizchip_getnetinfo>
  printf("MAC Address : %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000eee:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <print_network_information+0xd0>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <print_network_information+0xd0>)
 8000ef6:	785b      	ldrb	r3, [r3, #1]
 8000ef8:	461c      	mov	r4, r3
 8000efa:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <print_network_information+0xd0>)
 8000efc:	789b      	ldrb	r3, [r3, #2]
 8000efe:	461d      	mov	r5, r3
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <print_network_information+0xd0>)
 8000f02:	78db      	ldrb	r3, [r3, #3]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <print_network_information+0xd0>)
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <print_network_information+0xd0>)
 8000f0e:	795b      	ldrb	r3, [r3, #5]
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	9101      	str	r1, [sp, #4]
 8000f14:	9200      	str	r2, [sp, #0]
 8000f16:	462b      	mov	r3, r5
 8000f18:	4622      	mov	r2, r4
 8000f1a:	4601      	mov	r1, r0
 8000f1c:	4823      	ldr	r0, [pc, #140]	; (8000fac <print_network_information+0xd4>)
 8000f1e:	f007 f9cb 	bl	80082b8 <iprintf>
  printf("IP  Address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <print_network_information+0xd0>)
 8000f24:	799b      	ldrb	r3, [r3, #6]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <print_network_information+0xd0>)
 8000f2a:	79db      	ldrb	r3, [r3, #7]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <print_network_information+0xd0>)
 8000f30:	7a1b      	ldrb	r3, [r3, #8]
 8000f32:	4618      	mov	r0, r3
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <print_network_information+0xd0>)
 8000f36:	7a5b      	ldrb	r3, [r3, #9]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <print_network_information+0xd8>)
 8000f3e:	f007 f9bb 	bl	80082b8 <iprintf>
  printf("Subnet Mask : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <print_network_information+0xd0>)
 8000f44:	7a9b      	ldrb	r3, [r3, #10]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <print_network_information+0xd0>)
 8000f4a:	7adb      	ldrb	r3, [r3, #11]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <print_network_information+0xd0>)
 8000f50:	7b1b      	ldrb	r3, [r3, #12]
 8000f52:	4618      	mov	r0, r3
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <print_network_information+0xd0>)
 8000f56:	7b5b      	ldrb	r3, [r3, #13]
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <print_network_information+0xdc>)
 8000f5e:	f007 f9ab 	bl	80082b8 <iprintf>
  printf("Gateway     : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <print_network_information+0xd0>)
 8000f64:	7b9b      	ldrb	r3, [r3, #14]
 8000f66:	4619      	mov	r1, r3
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <print_network_information+0xd0>)
 8000f6a:	7bdb      	ldrb	r3, [r3, #15]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <print_network_information+0xd0>)
 8000f70:	7c1b      	ldrb	r3, [r3, #16]
 8000f72:	4618      	mov	r0, r3
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <print_network_information+0xd0>)
 8000f76:	7c5b      	ldrb	r3, [r3, #17]
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <print_network_information+0xe0>)
 8000f7e:	f007 f99b 	bl	80082b8 <iprintf>
  printf("DNS Server  : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <print_network_information+0xd0>)
 8000f84:	7c9b      	ldrb	r3, [r3, #18]
 8000f86:	4619      	mov	r1, r3
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <print_network_information+0xd0>)
 8000f8a:	7cdb      	ldrb	r3, [r3, #19]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <print_network_information+0xd0>)
 8000f90:	7d1b      	ldrb	r3, [r3, #20]
 8000f92:	4618      	mov	r0, r3
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <print_network_information+0xd0>)
 8000f96:	7d5b      	ldrb	r3, [r3, #21]
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <print_network_information+0xe4>)
 8000f9e:	f007 f98b 	bl	80082b8 <iprintf>
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	0800a644 	.word	0x0800a644
 8000fb0:	0800a674 	.word	0x0800a674
 8000fb4:	0800a690 	.word	0x0800a690
 8000fb8:	0800a6ac 	.word	0x0800a6ac
 8000fbc:	0800a6c8 	.word	0x0800a6c8

08000fc0 <messageArrived>:

// @brief messageArrived callback function
void messageArrived(MessageData* md)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0a0      	sub	sp, #128	; 0x80
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  unsigned char testbuffer[100];
  uint32_t rd_size;
  uint32_t rd_pt;
  uint32_t rdmore_size;

  MQTTMessage* message = md->message;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	673b      	str	r3, [r7, #112]	; 0x70
  MQTTString* topic = md->topicName;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	66fb      	str	r3, [r7, #108]	; 0x6c

  rdmore_size = (int)topic->lenstring.len;
 8000fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	677b      	str	r3, [r7, #116]	; 0x74
  rd_pt = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	67bb      	str	r3, [r7, #120]	; 0x78

  while(rdmore_size != 0)
 8000fde:	e027      	b.n	8001030 <messageArrived+0x70>
  {
    if(rdmore_size > sizeof(testbuffer) - 1)
 8000fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fe2:	2b63      	cmp	r3, #99	; 0x63
 8000fe4:	d902      	bls.n	8000fec <messageArrived+0x2c>
    {
      rd_size = sizeof(testbuffer) - 1;
 8000fe6:	2363      	movs	r3, #99	; 0x63
 8000fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fea:	e001      	b.n	8000ff0 <messageArrived+0x30>
    }
    else
    {
      rd_size = rdmore_size;
 8000fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fee:	67fb      	str	r3, [r7, #124]	; 0x7c
    }

    memset(testbuffer, 0, rd_size + 1);
 8000ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f007 fac2 	bl	8008584 <memset>

    memcpy(testbuffer, ((char*)topic->lenstring.data) + rd_pt, rd_size);
 8001000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001006:	18d1      	adds	r1, r2, r3
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800100e:	4618      	mov	r0, r3
 8001010:	f007 fb8f 	bl	8008732 <memcpy>
    printf("SubScribe Topic : %s\r\n", testbuffer);
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	4619      	mov	r1, r3
 800101a:	4815      	ldr	r0, [pc, #84]	; (8001070 <messageArrived+0xb0>)
 800101c:	f007 f94c 	bl	80082b8 <iprintf>

    rd_pt += rd_size;
 8001020:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001022:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001024:	4413      	add	r3, r2
 8001026:	67bb      	str	r3, [r7, #120]	; 0x78
    rdmore_size -= rd_size;
 8001028:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800102a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	677b      	str	r3, [r7, #116]	; 0x74
  while(rdmore_size != 0)
 8001030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1d4      	bne.n	8000fe0 <messageArrived+0x20>
  }

  if (opts.nodelimiter)
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <messageArrived+0xb4>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d009      	beq.n	8001052 <messageArrived+0x92>
  {
    printf("Message : %.*s\r\n", (int)message->payloadlen, (char*)message->payload);
 800103e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	4619      	mov	r1, r3
 8001044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	461a      	mov	r2, r3
 800104a:	480b      	ldr	r0, [pc, #44]	; (8001078 <messageArrived+0xb8>)
 800104c:	f007 f934 	bl	80082b8 <iprintf>
  }
  else
  {
    printf("Message : %.*s%s\r\n", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
  }
}
 8001050:	e009      	b.n	8001066 <messageArrived+0xa6>
    printf("Message : %.*s%s\r\n", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
 8001052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	4619      	mov	r1, r3
 8001058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <messageArrived+0xb4>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <messageArrived+0xbc>)
 8001062:	f007 f929 	bl	80082b8 <iprintf>
}
 8001066:	bf00      	nop
 8001068:	3780      	adds	r7, #128	; 0x80
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	0800a6e4 	.word	0x0800a6e4
 8001074:	20000020 	.word	0x20000020
 8001078:	0800a6fc 	.word	0x0800a6fc
 800107c:	0800a710 	.word	0x0800a710

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001088:	e7fe      	b.n	8001088 <Error_Handler+0x8>
	...

0800108c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_SPI2_Init+0x64>)
 8001092:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <MX_SPI2_Init+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_SPI2_Init+0x64>)
 8001098:	f44f 7282 	mov.w	r2, #260	; 0x104
 800109c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_SPI2_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_SPI2_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_SPI2_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_SPI2_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_SPI2_Init+0x64>)
 80010b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_SPI2_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <MX_SPI2_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_SPI2_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <MX_SPI2_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_SPI2_Init+0x64>)
 80010d8:	220a      	movs	r2, #10
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <MX_SPI2_Init+0x64>)
 80010de:	f001 fa15 	bl	800250c <HAL_SPI_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010e8:	f7ff ffca 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20002be8 	.word	0x20002be8
 80010f4:	40003800 	.word	0x40003800

080010f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <HAL_SPI_MspInit+0x8c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d131      	bne.n	800117c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_SPI_MspInit+0x90>)
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	4a1a      	ldr	r2, [pc, #104]	; (8001188 <HAL_SPI_MspInit+0x90>)
 800111e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001122:	61d3      	str	r3, [r2, #28]
 8001124:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_SPI_MspInit+0x90>)
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_SPI_MspInit+0x90>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <HAL_SPI_MspInit+0x90>)
 8001136:	f043 0308 	orr.w	r3, r3, #8
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_SPI_MspInit+0x90>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001148:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800114c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <HAL_SPI_MspInit+0x94>)
 800115e:	f000 fc29 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001162:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <HAL_SPI_MspInit+0x94>)
 8001178:	f000 fc1c 	bl	80019b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40003800 	.word	0x40003800
 8001188:	40021000 	.word	0x40021000
 800118c:	40010c00 	.word	0x40010c00

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_MspInit+0x5c>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <HAL_MspInit+0x5c>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6193      	str	r3, [r2, #24]
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_MspInit+0x5c>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_MspInit+0x5c>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_MspInit+0x5c>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_MspInit+0x5c>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_MspInit+0x60>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_MspInit+0x60>)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010000 	.word	0x40010000

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123a:	f000 f9bb 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <USART2_IRQHandler+0x10>)
 800124a:	f001 fadb 	bl	8002804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20002c40 	.word	0x20002c40

08001258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return 1;
 800125c:	2301      	movs	r3, #1
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <_kill>:

int _kill(int pid, int sig)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001270:	f007 fa1c 	bl	80086ac <__errno>
 8001274:	4603      	mov	r3, r0
 8001276:	2216      	movs	r2, #22
 8001278:	601a      	str	r2, [r3, #0]
  return -1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_exit>:

void _exit (int status)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800128e:	f04f 31ff 	mov.w	r1, #4294967295
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffe7 	bl	8001266 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001298:	e7fe      	b.n	8001298 <_exit+0x12>

0800129a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	e00a      	b.n	80012c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ac:	f3af 8000 	nop.w
 80012b0:	4601      	mov	r1, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	60ba      	str	r2, [r7, #8]
 80012b8:	b2ca      	uxtb	r2, r1
 80012ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3301      	adds	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dbf0      	blt.n	80012ac <_read+0x12>
  }

  return len;
 80012ca:	687b      	ldr	r3, [r7, #4]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	e009      	b.n	80012fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	60ba      	str	r2, [r7, #8]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fc40 	bl	8000b74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3301      	adds	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbf1      	blt.n	80012e6 <_write+0x12>
  }
  return len;
 8001302:	687b      	ldr	r3, [r7, #4]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_close>:

int _close(int file)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001332:	605a      	str	r2, [r3, #4]
  return 0;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <_isatty>:

int _isatty(int file)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001348:	2301      	movs	r3, #1
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f007 f986 	bl	80086ac <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20005000 	.word	0x20005000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	20000a68 	.word	0x20000a68
 80013d4:	20002ca0 	.word	0x20002ca0

080013d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <MX_USART2_UART_Init+0x50>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 800141c:	f001 f8fa 	bl	8002614 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001426:	f7ff fe2b 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20002c40 	.word	0x20002c40
 8001434:	40004400 	.word	0x40004400

08001438 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <HAL_UART_MspInit+0x98>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d137      	bne.n	80014c8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <HAL_UART_MspInit+0x9c>)
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <HAL_UART_MspInit+0x9c>)
 800145e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001462:	61d3      	str	r3, [r2, #28]
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_UART_MspInit+0x9c>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_UART_MspInit+0x9c>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_UART_MspInit+0x9c>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_UART_MspInit+0x9c>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001488:	2304      	movs	r3, #4
 800148a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	4619      	mov	r1, r3
 800149a:	480f      	ldr	r0, [pc, #60]	; (80014d8 <HAL_UART_MspInit+0xa0>)
 800149c:	f000 fa8a 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014a0:	2308      	movs	r3, #8
 80014a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4619      	mov	r1, r3
 80014b2:	4809      	ldr	r0, [pc, #36]	; (80014d8 <HAL_UART_MspInit+0xa0>)
 80014b4:	f000 fa7e 	bl	80019b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2026      	movs	r0, #38	; 0x26
 80014be:	f000 f990 	bl	80017e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014c2:	2026      	movs	r0, #38	; 0x26
 80014c4:	f000 f9a9 	bl	800181a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40004400 	.word	0x40004400
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010800 	.word	0x40010800

080014dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014dc:	f7ff ff7c 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e0:	480b      	ldr	r0, [pc, #44]	; (8001510 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014e2:	490c      	ldr	r1, [pc, #48]	; (8001514 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014e4:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014f8:	4c09      	ldr	r4, [pc, #36]	; (8001520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001506:	f007 f8d7 	bl	80086b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800150a:	f7ff fb45 	bl	8000b98 <main>
  bx lr
 800150e:	4770      	bx	lr
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8001518:	0800aba0 	.word	0x0800aba0
  ldr r2, =_sbss
 800151c:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8001520:	20002ca0 	.word	0x20002ca0

08001524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC1_2_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_Init+0x28>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_Init+0x28>)
 8001532:	f043 0310 	orr.w	r3, r3, #16
 8001536:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 f947 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153e:	200f      	movs	r0, #15
 8001540:	f000 f808 	bl	8001554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001544:	f7ff fe24 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40022000 	.word	0x40022000

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x54>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x58>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f95f 	bl	8001836 <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00e      	b.n	80015a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d80a      	bhi.n	800159e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f000 f927 	bl	80017e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_InitTick+0x5c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000044 	.word	0x20000044
 80015ac:	2000004c 	.word	0x2000004c
 80015b0:	20000048 	.word	0x20000048

080015b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_IncTick+0x1c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_IncTick+0x20>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a03      	ldr	r2, [pc, #12]	; (80015d4 <HAL_IncTick+0x20>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	2000004c 	.word	0x2000004c
 80015d4:	20002c88 	.word	0x20002c88

080015d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return uwTick;
 80015dc:	4b02      	ldr	r3, [pc, #8]	; (80015e8 <HAL_GetTick+0x10>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20002c88 	.word	0x20002c88

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff fff0 	bl	80015d8 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_Delay+0x44>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffe0 	bl	80015d8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000004c 	.word	0x2000004c

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4906      	ldr	r1, [pc, #24]	; (80016cc <__NVIC_EnableIRQ+0x34>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	; (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001798:	d301      	bcc.n	800179e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179a:	2301      	movs	r3, #1
 800179c:	e00f      	b.n	80017be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <SysTick_Config+0x40>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a6:	210f      	movs	r1, #15
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f7ff ff90 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <SysTick_Config+0x40>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <SysTick_Config+0x40>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010

080017cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff2d 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f4:	f7ff ff42 	bl	800167c <__NVIC_GetPriorityGrouping>
 80017f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff ff90 	bl	8001724 <NVIC_EncodePriority>
 8001804:	4602      	mov	r2, r0
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff5f 	bl	80016d0 <__NVIC_SetPriority>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff35 	bl	8001698 <__NVIC_EnableIRQ>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffa2 	bl	8001788 <SysTick_Config>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800184e:	b480      	push	{r7}
 8001850:	b085      	sub	sp, #20
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d008      	beq.n	8001878 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2204      	movs	r2, #4
 800186a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e020      	b.n	80018ba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 020e 	bic.w	r2, r2, #14
 8001886:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f202 	lsl.w	r2, r1, r2
 80018a6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d005      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2204      	movs	r2, #4
 80018e0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	e051      	b.n	800198c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 020e 	bic.w	r2, r2, #14
 80018f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a22      	ldr	r2, [pc, #136]	; (8001998 <HAL_DMA_Abort_IT+0xd4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d029      	beq.n	8001966 <HAL_DMA_Abort_IT+0xa2>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a21      	ldr	r2, [pc, #132]	; (800199c <HAL_DMA_Abort_IT+0xd8>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d022      	beq.n	8001962 <HAL_DMA_Abort_IT+0x9e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <HAL_DMA_Abort_IT+0xdc>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d01a      	beq.n	800195c <HAL_DMA_Abort_IT+0x98>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <HAL_DMA_Abort_IT+0xe0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d012      	beq.n	8001956 <HAL_DMA_Abort_IT+0x92>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <HAL_DMA_Abort_IT+0xe4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d00a      	beq.n	8001950 <HAL_DMA_Abort_IT+0x8c>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <HAL_DMA_Abort_IT+0xe8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d102      	bne.n	800194a <HAL_DMA_Abort_IT+0x86>
 8001944:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001948:	e00e      	b.n	8001968 <HAL_DMA_Abort_IT+0xa4>
 800194a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800194e:	e00b      	b.n	8001968 <HAL_DMA_Abort_IT+0xa4>
 8001950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001954:	e008      	b.n	8001968 <HAL_DMA_Abort_IT+0xa4>
 8001956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195a:	e005      	b.n	8001968 <HAL_DMA_Abort_IT+0xa4>
 800195c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001960:	e002      	b.n	8001968 <HAL_DMA_Abort_IT+0xa4>
 8001962:	2310      	movs	r3, #16
 8001964:	e000      	b.n	8001968 <HAL_DMA_Abort_IT+0xa4>
 8001966:	2301      	movs	r3, #1
 8001968:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <HAL_DMA_Abort_IT+0xec>)
 800196a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
    } 
  }
  return status;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40020008 	.word	0x40020008
 800199c:	4002001c 	.word	0x4002001c
 80019a0:	40020030 	.word	0x40020030
 80019a4:	40020044 	.word	0x40020044
 80019a8:	40020058 	.word	0x40020058
 80019ac:	4002006c 	.word	0x4002006c
 80019b0:	40020000 	.word	0x40020000

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b08b      	sub	sp, #44	; 0x2c
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c6:	e169      	b.n	8001c9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019c8:	2201      	movs	r2, #1
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 8158 	bne.w	8001c96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4a9a      	ldr	r2, [pc, #616]	; (8001c54 <HAL_GPIO_Init+0x2a0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d05e      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 80019f0:	4a98      	ldr	r2, [pc, #608]	; (8001c54 <HAL_GPIO_Init+0x2a0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d875      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 80019f6:	4a98      	ldr	r2, [pc, #608]	; (8001c58 <HAL_GPIO_Init+0x2a4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d058      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 80019fc:	4a96      	ldr	r2, [pc, #600]	; (8001c58 <HAL_GPIO_Init+0x2a4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d86f      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a02:	4a96      	ldr	r2, [pc, #600]	; (8001c5c <HAL_GPIO_Init+0x2a8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d052      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 8001a08:	4a94      	ldr	r2, [pc, #592]	; (8001c5c <HAL_GPIO_Init+0x2a8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d869      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a0e:	4a94      	ldr	r2, [pc, #592]	; (8001c60 <HAL_GPIO_Init+0x2ac>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d04c      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 8001a14:	4a92      	ldr	r2, [pc, #584]	; (8001c60 <HAL_GPIO_Init+0x2ac>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d863      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a1a:	4a92      	ldr	r2, [pc, #584]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d046      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 8001a20:	4a90      	ldr	r2, [pc, #576]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d85d      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a26:	2b12      	cmp	r3, #18
 8001a28:	d82a      	bhi.n	8001a80 <HAL_GPIO_Init+0xcc>
 8001a2a:	2b12      	cmp	r3, #18
 8001a2c:	d859      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a2e:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <HAL_GPIO_Init+0x80>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001aaf 	.word	0x08001aaf
 8001a38:	08001a89 	.word	0x08001a89
 8001a3c:	08001a9b 	.word	0x08001a9b
 8001a40:	08001add 	.word	0x08001add
 8001a44:	08001ae3 	.word	0x08001ae3
 8001a48:	08001ae3 	.word	0x08001ae3
 8001a4c:	08001ae3 	.word	0x08001ae3
 8001a50:	08001ae3 	.word	0x08001ae3
 8001a54:	08001ae3 	.word	0x08001ae3
 8001a58:	08001ae3 	.word	0x08001ae3
 8001a5c:	08001ae3 	.word	0x08001ae3
 8001a60:	08001ae3 	.word	0x08001ae3
 8001a64:	08001ae3 	.word	0x08001ae3
 8001a68:	08001ae3 	.word	0x08001ae3
 8001a6c:	08001ae3 	.word	0x08001ae3
 8001a70:	08001ae3 	.word	0x08001ae3
 8001a74:	08001ae3 	.word	0x08001ae3
 8001a78:	08001a91 	.word	0x08001a91
 8001a7c:	08001aa5 	.word	0x08001aa5
 8001a80:	4a79      	ldr	r2, [pc, #484]	; (8001c68 <HAL_GPIO_Init+0x2b4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a86:	e02c      	b.n	8001ae2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	623b      	str	r3, [r7, #32]
          break;
 8001a8e:	e029      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	3304      	adds	r3, #4
 8001a96:	623b      	str	r3, [r7, #32]
          break;
 8001a98:	e024      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	623b      	str	r3, [r7, #32]
          break;
 8001aa2:	e01f      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	330c      	adds	r3, #12
 8001aaa:	623b      	str	r3, [r7, #32]
          break;
 8001aac:	e01a      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d102      	bne.n	8001abc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	623b      	str	r3, [r7, #32]
          break;
 8001aba:	e013      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	611a      	str	r2, [r3, #16]
          break;
 8001ace:	e009      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	615a      	str	r2, [r3, #20]
          break;
 8001ada:	e003      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
          break;
 8001ae0:	e000      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          break;
 8001ae2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2bff      	cmp	r3, #255	; 0xff
 8001ae8:	d801      	bhi.n	8001aee <HAL_GPIO_Init+0x13a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	e001      	b.n	8001af2 <HAL_GPIO_Init+0x13e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3304      	adds	r3, #4
 8001af2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2bff      	cmp	r3, #255	; 0xff
 8001af8:	d802      	bhi.n	8001b00 <HAL_GPIO_Init+0x14c>
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	e002      	b.n	8001b06 <HAL_GPIO_Init+0x152>
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	3b08      	subs	r3, #8
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	210f      	movs	r1, #15
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	401a      	ands	r2, r3
 8001b18:	6a39      	ldr	r1, [r7, #32]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	431a      	orrs	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80b1 	beq.w	8001c96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b34:	4b4d      	ldr	r3, [pc, #308]	; (8001c6c <HAL_GPIO_Init+0x2b8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a4c      	ldr	r2, [pc, #304]	; (8001c6c <HAL_GPIO_Init+0x2b8>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_GPIO_Init+0x2b8>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b4c:	4a48      	ldr	r2, [pc, #288]	; (8001c70 <HAL_GPIO_Init+0x2bc>)
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a40      	ldr	r2, [pc, #256]	; (8001c74 <HAL_GPIO_Init+0x2c0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d013      	beq.n	8001ba0 <HAL_GPIO_Init+0x1ec>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a3f      	ldr	r2, [pc, #252]	; (8001c78 <HAL_GPIO_Init+0x2c4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00d      	beq.n	8001b9c <HAL_GPIO_Init+0x1e8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a3e      	ldr	r2, [pc, #248]	; (8001c7c <HAL_GPIO_Init+0x2c8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d007      	beq.n	8001b98 <HAL_GPIO_Init+0x1e4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a3d      	ldr	r2, [pc, #244]	; (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_GPIO_Init+0x1e0>
 8001b90:	2303      	movs	r3, #3
 8001b92:	e006      	b.n	8001ba2 <HAL_GPIO_Init+0x1ee>
 8001b94:	2304      	movs	r3, #4
 8001b96:	e004      	b.n	8001ba2 <HAL_GPIO_Init+0x1ee>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e002      	b.n	8001ba2 <HAL_GPIO_Init+0x1ee>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_GPIO_Init+0x1ee>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba4:	f002 0203 	and.w	r2, r2, #3
 8001ba8:	0092      	lsls	r2, r2, #2
 8001baa:	4093      	lsls	r3, r2
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bb2:	492f      	ldr	r1, [pc, #188]	; (8001c70 <HAL_GPIO_Init+0x2bc>)
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	492c      	ldr	r1, [pc, #176]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bda:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4928      	ldr	r1, [pc, #160]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	4922      	ldr	r1, [pc, #136]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	491e      	ldr	r1, [pc, #120]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4918      	ldr	r1, [pc, #96]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	4914      	ldr	r1, [pc, #80]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d021      	beq.n	8001c88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	490e      	ldr	r1, [pc, #56]	; (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	e021      	b.n	8001c96 <HAL_GPIO_Init+0x2e2>
 8001c52:	bf00      	nop
 8001c54:	10320000 	.word	0x10320000
 8001c58:	10310000 	.word	0x10310000
 8001c5c:	10220000 	.word	0x10220000
 8001c60:	10210000 	.word	0x10210000
 8001c64:	10120000 	.word	0x10120000
 8001c68:	10110000 	.word	0x10110000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000
 8001c74:	40010800 	.word	0x40010800
 8001c78:	40010c00 	.word	0x40010c00
 8001c7c:	40011000 	.word	0x40011000
 8001c80:	40011400 	.word	0x40011400
 8001c84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	4909      	ldr	r1, [pc, #36]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	3301      	adds	r3, #1
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f47f ae8e 	bne.w	80019c8 <HAL_GPIO_Init+0x14>
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	372c      	adds	r7, #44	; 0x2c
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	40010400 	.word	0x40010400

08001cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ccc:	787b      	ldrb	r3, [r7, #1]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cd8:	e003      	b.n	8001ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	041a      	lsls	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	611a      	str	r2, [r3, #16]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e272      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 8087 	beq.w	8001e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d0c:	4b92      	ldr	r3, [pc, #584]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d00c      	beq.n	8001d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d18:	4b8f      	ldr	r3, [pc, #572]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d112      	bne.n	8001d4a <HAL_RCC_OscConfig+0x5e>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d30:	d10b      	bne.n	8001d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d32:	4b89      	ldr	r3, [pc, #548]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d06c      	beq.n	8001e18 <HAL_RCC_OscConfig+0x12c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d168      	bne.n	8001e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e24c      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x76>
 8001d54:	4b80      	ldr	r3, [pc, #512]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a7f      	ldr	r2, [pc, #508]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	e02e      	b.n	8001dc0 <HAL_RCC_OscConfig+0xd4>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x98>
 8001d6a:	4b7b      	ldr	r3, [pc, #492]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a7a      	ldr	r2, [pc, #488]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b78      	ldr	r3, [pc, #480]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a77      	ldr	r2, [pc, #476]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e01d      	b.n	8001dc0 <HAL_RCC_OscConfig+0xd4>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0xbc>
 8001d8e:	4b72      	ldr	r3, [pc, #456]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a71      	ldr	r2, [pc, #452]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b6f      	ldr	r3, [pc, #444]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a6e      	ldr	r2, [pc, #440]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCC_OscConfig+0xd4>
 8001da8:	4b6b      	ldr	r3, [pc, #428]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a6a      	ldr	r2, [pc, #424]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a67      	ldr	r2, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fc06 	bl	80015d8 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fc02 	bl	80015d8 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e200      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b5d      	ldr	r3, [pc, #372]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xe4>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fbf2 	bl	80015d8 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fbee 	bl	80015d8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1ec      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x10c>
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d063      	beq.n	8001eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e26:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e32:	4b49      	ldr	r3, [pc, #292]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d11c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x18c>
 8001e3e:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d116      	bne.n	8001e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	4b43      	ldr	r3, [pc, #268]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_RCC_OscConfig+0x176>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e1c0      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4939      	ldr	r1, [pc, #228]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	e03a      	b.n	8001eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff fba7 	bl	80015d8 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff fba3 	bl	80015d8 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e1a1      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4927      	ldr	r1, [pc, #156]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	e015      	b.n	8001eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec2:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fb86 	bl	80015d8 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff fb82 	bl	80015d8 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e180      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d03a      	beq.n	8001f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d019      	beq.n	8001f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f08:	f7ff fb66 	bl	80015d8 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f10:	f7ff fb62 	bl	80015d8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e160      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f000 face 	bl	80024d0 <RCC_Delay>
 8001f34:	e01c      	b.n	8001f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fb4c 	bl	80015d8 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f42:	e00f      	b.n	8001f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f44:	f7ff fb48 	bl	80015d8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d908      	bls.n	8001f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e146      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	42420000 	.word	0x42420000
 8001f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f64:	4b92      	ldr	r3, [pc, #584]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1e9      	bne.n	8001f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80a6 	beq.w	80020ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f82:	4b8b      	ldr	r3, [pc, #556]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10d      	bne.n	8001faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	4b88      	ldr	r3, [pc, #544]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a87      	ldr	r2, [pc, #540]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	61d3      	str	r3, [r2, #28]
 8001f9a:	4b85      	ldr	r3, [pc, #532]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b82      	ldr	r3, [pc, #520]	; (80021b4 <HAL_RCC_OscConfig+0x4c8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b7f      	ldr	r3, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0x4c8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a7e      	ldr	r2, [pc, #504]	; (80021b4 <HAL_RCC_OscConfig+0x4c8>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fb09 	bl	80015d8 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f7ff fb05 	bl	80015d8 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b64      	cmp	r3, #100	; 0x64
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e103      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b75      	ldr	r3, [pc, #468]	; (80021b4 <HAL_RCC_OscConfig+0x4c8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x312>
 8001ff0:	4b6f      	ldr	r3, [pc, #444]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a6e      	ldr	r2, [pc, #440]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	e02d      	b.n	800205a <HAL_RCC_OscConfig+0x36e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x334>
 8002006:	4b6a      	ldr	r3, [pc, #424]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a69      	ldr	r2, [pc, #420]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	4b67      	ldr	r3, [pc, #412]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a66      	ldr	r2, [pc, #408]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6213      	str	r3, [r2, #32]
 800201e:	e01c      	b.n	800205a <HAL_RCC_OscConfig+0x36e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b05      	cmp	r3, #5
 8002026:	d10c      	bne.n	8002042 <HAL_RCC_OscConfig+0x356>
 8002028:	4b61      	ldr	r3, [pc, #388]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a60      	ldr	r2, [pc, #384]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6213      	str	r3, [r2, #32]
 8002034:	4b5e      	ldr	r3, [pc, #376]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4a5d      	ldr	r2, [pc, #372]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6213      	str	r3, [r2, #32]
 8002040:	e00b      	b.n	800205a <HAL_RCC_OscConfig+0x36e>
 8002042:	4b5b      	ldr	r3, [pc, #364]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a5a      	ldr	r2, [pc, #360]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	6213      	str	r3, [r2, #32]
 800204e:	4b58      	ldr	r3, [pc, #352]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a57      	ldr	r2, [pc, #348]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	f023 0304 	bic.w	r3, r3, #4
 8002058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d015      	beq.n	800208e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7ff fab9 	bl	80015d8 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7ff fab5 	bl	80015d8 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	f241 3288 	movw	r2, #5000	; 0x1388
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e0b1      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002080:	4b4b      	ldr	r3, [pc, #300]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0ee      	beq.n	800206a <HAL_RCC_OscConfig+0x37e>
 800208c:	e014      	b.n	80020b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7ff faa3 	bl	80015d8 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff fa9f 	bl	80015d8 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e09b      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ac:	4b40      	ldr	r3, [pc, #256]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ee      	bne.n	8002096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d105      	bne.n	80020ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020be:	4b3c      	ldr	r3, [pc, #240]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a3b      	ldr	r2, [pc, #236]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8087 	beq.w	80021e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d4:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d061      	beq.n	80021a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d146      	bne.n	8002176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e8:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <HAL_RCC_OscConfig+0x4cc>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7ff fa73 	bl	80015d8 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f6:	f7ff fa6f 	bl	80015d8 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e06d      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002108:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f0      	bne.n	80020f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211c:	d108      	bne.n	8002130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	4921      	ldr	r1, [pc, #132]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a19      	ldr	r1, [r3, #32]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	430b      	orrs	r3, r1
 8002142:	491b      	ldr	r1, [pc, #108]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_RCC_OscConfig+0x4cc>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7ff fa43 	bl	80015d8 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002156:	f7ff fa3f 	bl	80015d8 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e03d      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x46a>
 8002174:	e035      	b.n	80021e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_RCC_OscConfig+0x4cc>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff fa2c 	bl	80015d8 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002184:	f7ff fa28 	bl	80015d8 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e026      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x498>
 80021a2:	e01e      	b.n	80021e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d107      	bne.n	80021bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e019      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40007000 	.word	0x40007000
 80021b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_OscConfig+0x500>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000

080021f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0d0      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002204:	4b6a      	ldr	r3, [pc, #424]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d910      	bls.n	8002234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b67      	ldr	r3, [pc, #412]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 0207 	bic.w	r2, r3, #7
 800221a:	4965      	ldr	r1, [pc, #404]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0b8      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800224c:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002256:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800226e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002270:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	494d      	ldr	r1, [pc, #308]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d040      	beq.n	8002310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d115      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e07f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	4b41      	ldr	r3, [pc, #260]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e073      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e06b      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ce:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4936      	ldr	r1, [pc, #216]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e0:	f7ff f97a 	bl	80015d8 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7ff f976 	bl	80015d8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e053      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d1eb      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d210      	bcs.n	8002340 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	4922      	ldr	r1, [pc, #136]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e032      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4916      	ldr	r1, [pc, #88]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	490e      	ldr	r1, [pc, #56]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800237e:	f000 f821 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002382:	4602      	mov	r2, r0
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	490a      	ldr	r1, [pc, #40]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	5ccb      	ldrb	r3, [r1, r3]
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x1cc>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_ClockConfig+0x1d0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff f8d8 	bl	8001554 <HAL_InitTick>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40022000 	.word	0x40022000
 80023b4:	40021000 	.word	0x40021000
 80023b8:	0800a7f8 	.word	0x0800a7f8
 80023bc:	20000044 	.word	0x20000044
 80023c0:	20000048 	.word	0x20000048

080023c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023de:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <HAL_RCC_GetSysClockFreq+0x94>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d002      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x30>
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d003      	beq.n	80023fa <HAL_RCC_GetSysClockFreq+0x36>
 80023f2:	e027      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_RCC_GetSysClockFreq+0x98>)
 80023f6:	613b      	str	r3, [r7, #16]
      break;
 80023f8:	e027      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	0c9b      	lsrs	r3, r3, #18
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	4a17      	ldr	r2, [pc, #92]	; (8002460 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
 8002406:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d010      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_GetSysClockFreq+0x94>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	0c5b      	lsrs	r3, r3, #17
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	4a11      	ldr	r2, [pc, #68]	; (8002464 <HAL_RCC_GetSysClockFreq+0xa0>)
 800241e:	5cd3      	ldrb	r3, [r2, r3]
 8002420:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a0d      	ldr	r2, [pc, #52]	; (800245c <HAL_RCC_GetSysClockFreq+0x98>)
 8002426:	fb03 f202 	mul.w	r2, r3, r2
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	e004      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002438:	fb02 f303 	mul.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	613b      	str	r3, [r7, #16]
      break;
 8002442:	e002      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCC_GetSysClockFreq+0x98>)
 8002446:	613b      	str	r3, [r7, #16]
      break;
 8002448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244a:	693b      	ldr	r3, [r7, #16]
}
 800244c:	4618      	mov	r0, r3
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	007a1200 	.word	0x007a1200
 8002460:	0800a810 	.word	0x0800a810
 8002464:	0800a820 	.word	0x0800a820
 8002468:	003d0900 	.word	0x003d0900

0800246c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002470:	4b02      	ldr	r3, [pc, #8]	; (800247c <HAL_RCC_GetHCLKFreq+0x10>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	20000044 	.word	0x20000044

08002480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002484:	f7ff fff2 	bl	800246c <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4903      	ldr	r1, [pc, #12]	; (80024a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40021000 	.word	0x40021000
 80024a4:	0800a808 	.word	0x0800a808

080024a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024ac:	f7ff ffde 	bl	800246c <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0adb      	lsrs	r3, r3, #11
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4903      	ldr	r1, [pc, #12]	; (80024cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	0800a808 	.word	0x0800a808

080024d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <RCC_Delay+0x34>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <RCC_Delay+0x38>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	0a5b      	lsrs	r3, r3, #9
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024ec:	bf00      	nop
  }
  while (Delay --);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1e5a      	subs	r2, r3, #1
 80024f2:	60fa      	str	r2, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f9      	bne.n	80024ec <RCC_Delay+0x1c>
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	20000044 	.word	0x20000044
 8002508:	10624dd3 	.word	0x10624dd3

0800250c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e076      	b.n	800260c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	2b00      	cmp	r3, #0
 8002524:	d108      	bne.n	8002538 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800252e:	d009      	beq.n	8002544 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
 8002536:	e005      	b.n	8002544 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe fdca 	bl	80010f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800257a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	ea42 0103 	orr.w	r1, r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	0c1a      	lsrs	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f002 0204 	and.w	r2, r2, #4
 80025ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69da      	ldr	r2, [r3, #28]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e042      	b.n	80026ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fefc 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2224      	movs	r2, #36	; 0x24
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 fdc5 	bl	80031e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800266c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800267c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800268c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d16d      	bne.n	80027b0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_UART_Transmit+0x2c>
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e066      	b.n	80027b2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2221      	movs	r2, #33	; 0x21
 80026ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026f2:	f7fe ff71 	bl	80015d8 <HAL_GetTick>
 80026f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	88fa      	ldrh	r2, [r7, #6]
 80026fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	88fa      	ldrh	r2, [r7, #6]
 8002702:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270c:	d108      	bne.n	8002720 <HAL_UART_Transmit+0x6c>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	e003      	b.n	8002728 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002728:	e02a      	b.n	8002780 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2200      	movs	r2, #0
 8002732:	2180      	movs	r1, #128	; 0x80
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fb14 	bl	8002d62 <UART_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e036      	b.n	80027b2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10b      	bne.n	8002762 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002758:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	3302      	adds	r3, #2
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	e007      	b.n	8002772 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	3301      	adds	r3, #1
 8002770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1cf      	bne.n	800272a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2200      	movs	r2, #0
 8002792:	2140      	movs	r1, #64	; 0x40
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fae4 	bl	8002d62 <UART_WaitOnFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e006      	b.n	80027b2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	4613      	mov	r3, r2
 80027c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d112      	bne.n	80027fa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_UART_Receive_IT+0x26>
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e00b      	b.n	80027fc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	461a      	mov	r2, r3
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fb24 	bl	8002e3e <UART_Start_Receive_IT>
 80027f6:	4603      	mov	r3, r0
 80027f8:	e000      	b.n	80027fc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80027fa:	2302      	movs	r3, #2
  }
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b0ba      	sub	sp, #232	; 0xe8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800284a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_UART_IRQHandler+0x66>
 8002856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fc01 	bl	800306a <UART_Receive_IT>
      return;
 8002868:	e25b      	b.n	8002d22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800286a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80de 	beq.w	8002a30 <HAL_UART_IRQHandler+0x22c>
 8002874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d106      	bne.n	800288e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002884:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80d1 	beq.w	8002a30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800288e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <HAL_UART_IRQHandler+0xae>
 800289a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_UART_IRQHandler+0xd2>
 80028be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f043 0202 	orr.w	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_UART_IRQHandler+0xf6>
 80028e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f043 0204 	orr.w	r2, r3, #4
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d011      	beq.n	800292a <HAL_UART_IRQHandler+0x126>
 8002906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b00      	cmp	r3, #0
 8002910:	d105      	bne.n	800291e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f043 0208 	orr.w	r2, r3, #8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 81f2 	beq.w	8002d18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_UART_IRQHandler+0x14e>
 8002940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fb8c 	bl	800306a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <HAL_UART_IRQHandler+0x17a>
 8002976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d04f      	beq.n	8002a1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fa96 	bl	8002eb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d041      	beq.n	8002a16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029a0:	e853 3f00 	ldrex	r3, [r3]
 80029a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3314      	adds	r3, #20
 80029ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1d9      	bne.n	8002992 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d013      	beq.n	8002a0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	4a7e      	ldr	r2, [pc, #504]	; (8002be4 <HAL_UART_IRQHandler+0x3e0>)
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe ff66 	bl	80018c4 <HAL_DMA_Abort_IT>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	e00e      	b.n	8002a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f993 	bl	8002d3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a14:	e00a      	b.n	8002a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f98f 	bl	8002d3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	e006      	b.n	8002a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f98b 	bl	8002d3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002a2a:	e175      	b.n	8002d18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	bf00      	nop
    return;
 8002a2e:	e173      	b.n	8002d18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	f040 814f 	bne.w	8002cd8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8148 	beq.w	8002cd8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8141 	beq.w	8002cd8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80b6 	beq.w	8002be8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8145 	beq.w	8002d1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	f080 813e 	bcs.w	8002d1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aa6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	f000 8088 	beq.w	8002bc4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ac2:	e853 3f00 	ldrex	r3, [r3]
 8002ac6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002aca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	330c      	adds	r3, #12
 8002adc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ae0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ae4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002aec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002af0:	e841 2300 	strex	r3, r2, [r1]
 8002af4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1d9      	bne.n	8002ab4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3314      	adds	r3, #20
 8002b06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b0a:	e853 3f00 	ldrex	r3, [r3]
 8002b0e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3314      	adds	r3, #20
 8002b20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b30:	e841 2300 	strex	r3, r2, [r1]
 8002b34:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e1      	bne.n	8002b00 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3314      	adds	r3, #20
 8002b42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b46:	e853 3f00 	ldrex	r3, [r3]
 8002b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3314      	adds	r3, #20
 8002b5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b60:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e3      	bne.n	8002b3c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330c      	adds	r3, #12
 8002b88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b94:	f023 0310 	bic.w	r3, r3, #16
 8002b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ba6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ba8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002baa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bae:	e841 2300 	strex	r3, r2, [r1]
 8002bb2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e3      	bne.n	8002b82 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fe45 	bl	800184e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f8b6 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002be0:	e09c      	b.n	8002d1c <HAL_UART_IRQHandler+0x518>
 8002be2:	bf00      	nop
 8002be4:	08002f75 	.word	0x08002f75
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 808e 	beq.w	8002d20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8089 	beq.w	8002d20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	e853 3f00 	ldrex	r3, [r3]
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c32:	647a      	str	r2, [r7, #68]	; 0x44
 8002c34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c3a:	e841 2300 	strex	r3, r2, [r1]
 8002c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1e3      	bne.n	8002c0e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3314      	adds	r3, #20
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	623b      	str	r3, [r7, #32]
   return(result);
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3314      	adds	r3, #20
 8002c66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c6a:	633a      	str	r2, [r7, #48]	; 0x30
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e3      	bne.n	8002c46 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	e853 3f00 	ldrex	r3, [r3]
 8002c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0310 	bic.w	r3, r3, #16
 8002ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	330c      	adds	r3, #12
 8002cac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cb0:	61fa      	str	r2, [r7, #28]
 8002cb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb4:	69b9      	ldr	r1, [r7, #24]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	e841 2300 	strex	r3, r2, [r1]
 8002cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e3      	bne.n	8002c8c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f83b 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cd6:	e023      	b.n	8002d20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x4f4>
 8002ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f953 	bl	8002f9c <UART_Transmit_IT>
    return;
 8002cf6:	e014      	b.n	8002d22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00e      	beq.n	8002d22 <HAL_UART_IRQHandler+0x51e>
 8002d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f992 	bl	800303a <UART_EndTransmit_IT>
    return;
 8002d16:	e004      	b.n	8002d22 <HAL_UART_IRQHandler+0x51e>
    return;
 8002d18:	bf00      	nop
 8002d1a:	e002      	b.n	8002d22 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d1c:	bf00      	nop
 8002d1e:	e000      	b.n	8002d22 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d20:	bf00      	nop
  }
}
 8002d22:	37e8      	adds	r7, #232	; 0xe8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr

08002d62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b090      	sub	sp, #64	; 0x40
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d72:	e050      	b.n	8002e16 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d04c      	beq.n	8002e16 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d82:	f7fe fc29 	bl	80015d8 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d241      	bcs.n	8002e16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	330c      	adds	r3, #12
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002db2:	637a      	str	r2, [r7, #52]	; 0x34
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e5      	bne.n	8002d92 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3314      	adds	r3, #20
 8002dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	e853 3f00 	ldrex	r3, [r3]
 8002dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3314      	adds	r3, #20
 8002de4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002de6:	623a      	str	r2, [r7, #32]
 8002de8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dea:	69f9      	ldr	r1, [r7, #28]
 8002dec:	6a3a      	ldr	r2, [r7, #32]
 8002dee:	e841 2300 	strex	r3, r2, [r1]
 8002df2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1e5      	bne.n	8002dc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e00f      	b.n	8002e36 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	bf0c      	ite	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	2300      	movne	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d09f      	beq.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3740      	adds	r7, #64	; 0x40
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	88fa      	ldrh	r2, [r7, #6]
 8002e56:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	88fa      	ldrh	r2, [r7, #6]
 8002e5c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2222      	movs	r2, #34	; 0x22
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0220 	orr.w	r2, r2, #32
 8002ea2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b095      	sub	sp, #84	; 0x54
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ed8:	643a      	str	r2, [r7, #64]	; 0x40
 8002eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002edc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ee0:	e841 2300 	strex	r3, r2, [r1]
 8002ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e5      	bne.n	8002eb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	e853 3f00 	ldrex	r3, [r3]
 8002efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3314      	adds	r3, #20
 8002f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e5      	bne.n	8002eec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d119      	bne.n	8002f5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f023 0310 	bic.w	r3, r3, #16
 8002f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f48:	61ba      	str	r2, [r7, #24]
 8002f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6979      	ldr	r1, [r7, #20]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	613b      	str	r3, [r7, #16]
   return(result);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e5      	bne.n	8002f28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f6a:	bf00      	nop
 8002f6c:	3754      	adds	r7, #84	; 0x54
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7ff fed3 	bl	8002d3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b21      	cmp	r3, #33	; 0x21
 8002fae:	d13e      	bne.n	800302e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb8:	d114      	bne.n	8002fe4 <UART_Transmit_IT+0x48>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d110      	bne.n	8002fe4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	1c9a      	adds	r2, r3, #2
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	621a      	str	r2, [r3, #32]
 8002fe2:	e008      	b.n	8002ff6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	1c59      	adds	r1, r3, #1
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6211      	str	r1, [r2, #32]
 8002fee:	781a      	ldrb	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4619      	mov	r1, r3
 8003004:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10f      	bne.n	800302a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003018:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003028:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
  }
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003050:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff fe64 	bl	8002d28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b08c      	sub	sp, #48	; 0x30
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b22      	cmp	r3, #34	; 0x22
 800307c:	f040 80ae 	bne.w	80031dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003088:	d117      	bne.n	80030ba <UART_Receive_IT+0x50>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d113      	bne.n	80030ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003092:	2300      	movs	r3, #0
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	1c9a      	adds	r2, r3, #2
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
 80030b8:	e026      	b.n	8003108 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030cc:	d007      	beq.n	80030de <UART_Receive_IT+0x74>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <UART_Receive_IT+0x82>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	e008      	b.n	80030fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29b      	uxth	r3, r3
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4619      	mov	r1, r3
 8003116:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003118:	2b00      	cmp	r3, #0
 800311a:	d15d      	bne.n	80031d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0220 	bic.w	r2, r2, #32
 800312a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800313a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	2b01      	cmp	r3, #1
 8003160:	d135      	bne.n	80031ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	330c      	adds	r3, #12
 800316e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	e853 3f00 	ldrex	r3, [r3]
 8003176:	613b      	str	r3, [r7, #16]
   return(result);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f023 0310 	bic.w	r3, r3, #16
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003188:	623a      	str	r2, [r7, #32]
 800318a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318c:	69f9      	ldr	r1, [r7, #28]
 800318e:	6a3a      	ldr	r2, [r7, #32]
 8003190:	e841 2300 	strex	r3, r2, [r1]
 8003194:	61bb      	str	r3, [r7, #24]
   return(result);
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e5      	bne.n	8003168 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b10      	cmp	r3, #16
 80031a8:	d10a      	bne.n	80031c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031c4:	4619      	mov	r1, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fdc0 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
 80031cc:	e002      	b.n	80031d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fd fd78 	bl	8000cc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	e002      	b.n	80031de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	e000      	b.n	80031de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80031dc:	2302      	movs	r3, #2
  }
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3730      	adds	r7, #48	; 0x30
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003222:	f023 030c 	bic.w	r3, r3, #12
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	430b      	orrs	r3, r1
 800322e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a2c      	ldr	r2, [pc, #176]	; (80032fc <UART_SetConfig+0x114>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d103      	bne.n	8003258 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003250:	f7ff f92a 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	e002      	b.n	800325e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003258:	f7ff f912 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 800325c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	009a      	lsls	r2, r3, #2
 8003268:	441a      	add	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	4a22      	ldr	r2, [pc, #136]	; (8003300 <UART_SetConfig+0x118>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	0119      	lsls	r1, r3, #4
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	009a      	lsls	r2, r3, #2
 8003288:	441a      	add	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	fbb2 f2f3 	udiv	r2, r2, r3
 8003294:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <UART_SetConfig+0x118>)
 8003296:	fba3 0302 	umull	r0, r3, r3, r2
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2064      	movs	r0, #100	; 0x64
 800329e:	fb00 f303 	mul.w	r3, r0, r3
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	3332      	adds	r3, #50	; 0x32
 80032a8:	4a15      	ldr	r2, [pc, #84]	; (8003300 <UART_SetConfig+0x118>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b4:	4419      	add	r1, r3
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	009a      	lsls	r2, r3, #2
 80032c0:	441a      	add	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <UART_SetConfig+0x118>)
 80032ce:	fba3 0302 	umull	r0, r3, r3, r2
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2064      	movs	r0, #100	; 0x64
 80032d6:	fb00 f303 	mul.w	r3, r0, r3
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	3332      	adds	r3, #50	; 0x32
 80032e0:	4a07      	ldr	r2, [pc, #28]	; (8003300 <UART_SetConfig+0x118>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	f003 020f 	and.w	r2, r3, #15
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	440a      	add	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032f4:	bf00      	nop
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40013800 	.word	0x40013800
 8003300:	51eb851f 	.word	0x51eb851f

08003304 <SPIReadWrite>:
#include "stdio.h"

extern SPI_HandleTypeDef hspi2;

uint8_t SPIReadWrite(uint8_t data)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
  //wait till FIFO has a free slot
  while((hspi2.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 800330e:	bf00      	nop
 8003310:	4b0e      	ldr	r3, [pc, #56]	; (800334c <SPIReadWrite+0x48>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d1f8      	bne.n	8003310 <SPIReadWrite+0xc>

  *(__IO uint8_t*)&hspi2.Instance->DR=data;
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <SPIReadWrite+0x48>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	330c      	adds	r3, #12
 8003324:	79fa      	ldrb	r2, [r7, #7]
 8003326:	701a      	strb	r2, [r3, #0]

  //Now wait till data arrives
  while((hspi2.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8003328:	bf00      	nop
 800332a:	4b08      	ldr	r3, [pc, #32]	; (800334c <SPIReadWrite+0x48>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	d1f8      	bne.n	800332a <SPIReadWrite+0x26>

  return (*(__IO uint8_t*)&hspi2.Instance->DR);
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <SPIReadWrite+0x48>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	b2db      	uxtb	r3, r3
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	20002be8 	.word	0x20002be8

08003350 <wizchip_select>:

void wizchip_select(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8003354:	2200      	movs	r2, #0
 8003356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800335a:	4802      	ldr	r0, [pc, #8]	; (8003364 <wizchip_select+0x14>)
 800335c:	f7fe fcae 	bl	8001cbc <HAL_GPIO_WritePin>
}
 8003360:	bf00      	nop
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40010800 	.word	0x40010800

08003368 <wizchip_deselect>:

void wizchip_deselect(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800336c:	2201      	movs	r2, #1
 800336e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003372:	4802      	ldr	r0, [pc, #8]	; (800337c <wizchip_deselect+0x14>)
 8003374:	f7fe fca2 	bl	8001cbc <HAL_GPIO_WritePin>
}
 8003378:	bf00      	nop
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40010800 	.word	0x40010800

08003380 <wizchip_read>:

uint8_t wizchip_read()
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
  uint8_t rb;
  rb = SPIReadWrite(0x00);
 8003386:	2000      	movs	r0, #0
 8003388:	f7ff ffbc 	bl	8003304 <SPIReadWrite>
 800338c:	4603      	mov	r3, r0
 800338e:	71fb      	strb	r3, [r7, #7]

  return rb;
 8003390:	79fb      	ldrb	r3, [r7, #7]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <wizchip_wrie>:

void wizchip_wrie(uint8_t wb)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	71fb      	strb	r3, [r7, #7]
  SPIReadWrite(wb);
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff ffac 	bl	8003304 <SPIReadWrite>
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	807b      	strh	r3, [r7, #2]
  for(uint16_t i=0; i<len; i++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	81fb      	strh	r3, [r7, #14]
 80033c4:	e00c      	b.n	80033e0 <wizchip_readburst+0x2c>
  {
    *pBuf = SPIReadWrite(0x00);
 80033c6:	2000      	movs	r0, #0
 80033c8:	f7ff ff9c 	bl	8003304 <SPIReadWrite>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461a      	mov	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3301      	adds	r3, #1
 80033d8:	607b      	str	r3, [r7, #4]
  for(uint16_t i=0; i<len; i++)
 80033da:	89fb      	ldrh	r3, [r7, #14]
 80033dc:	3301      	adds	r3, #1
 80033de:	81fb      	strh	r3, [r7, #14]
 80033e0:	89fa      	ldrh	r2, [r7, #14]
 80033e2:	887b      	ldrh	r3, [r7, #2]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d3ee      	bcc.n	80033c6 <wizchip_readburst+0x12>
  }
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <wizchip_writeburst>:

void wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	807b      	strh	r3, [r7, #2]
  for(uint16_t i=0; i<len; i++)
 80033fe:	2300      	movs	r3, #0
 8003400:	81fb      	strh	r3, [r7, #14]
 8003402:	e00a      	b.n	800341a <wizchip_writeburst+0x28>
  {
    SPIReadWrite(*pBuf);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff7b 	bl	8003304 <SPIReadWrite>
    pBuf++;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3301      	adds	r3, #1
 8003412:	607b      	str	r3, [r7, #4]
  for(uint16_t i=0; i<len; i++)
 8003414:	89fb      	ldrh	r3, [r7, #14]
 8003416:	3301      	adds	r3, #1
 8003418:	81fb      	strh	r3, [r7, #14]
 800341a:	89fa      	ldrh	r2, [r7, #14]
 800341c:	887b      	ldrh	r3, [r7, #2]
 800341e:	429a      	cmp	r2, r3
 8003420:	d3f0      	bcc.n	8003404 <wizchip_writeburst+0x12>
  }
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <W5500IO_Init>:

void W5500IO_Init()
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003432:	f107 0308 	add.w	r3, r7, #8
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	609a      	str	r2, [r3, #8]
 800343e:	60da      	str	r2, [r3, #12]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <W5500IO_Init+0x54>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <W5500IO_Init+0x54>)
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6193      	str	r3, [r2, #24]
 800344c:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <W5500IO_Init+0x54>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_6;
 8003458:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800345c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800345e:	2301      	movs	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	2302      	movs	r3, #2
 8003468:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346a:	f107 0308 	add.w	r3, r7, #8
 800346e:	4619      	mov	r1, r3
 8003470:	4804      	ldr	r0, [pc, #16]	; (8003484 <W5500IO_Init+0x58>)
 8003472:	f7fe fa9f 	bl	80019b4 <HAL_GPIO_Init>
}
 8003476:	bf00      	nop
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	40010800 	.word	0x40010800

08003488 <w5500Init>:

void w5500Init()
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
  uint8_t tmp;
  uint8_t W5x00_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2},{2, 2, 2, 2, 2, 2, 2, 2},};
 800348e:	4b1f      	ldr	r3, [pc, #124]	; (800350c <w5500Init+0x84>)
 8003490:	1d3c      	adds	r4, r7, #4
 8003492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  W5500IO_Init();
 8003498:	f7ff ffc8 	bl	800342c <W5500IO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);// spi cs hight
 800349c:	2201      	movs	r2, #1
 800349e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034a2:	481b      	ldr	r0, [pc, #108]	; (8003510 <w5500Init+0x88>)
 80034a4:	f7fe fc0a 	bl	8001cbc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //w5500 reset pin
 80034a8:	2200      	movs	r2, #0
 80034aa:	2140      	movs	r1, #64	; 0x40
 80034ac:	4818      	ldr	r0, [pc, #96]	; (8003510 <w5500Init+0x88>)
 80034ae:	f7fe fc05 	bl	8001cbc <HAL_GPIO_WritePin>
  tmp = 0xFF;
 80034b2:	23ff      	movs	r3, #255	; 0xff
 80034b4:	75fb      	strb	r3, [r7, #23]
  while(tmp--);
 80034b6:	bf00      	nop
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	1e5a      	subs	r2, r3, #1
 80034bc:	75fa      	strb	r2, [r7, #23]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1fa      	bne.n	80034b8 <w5500Init+0x30>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80034c2:	2201      	movs	r2, #1
 80034c4:	2140      	movs	r1, #64	; 0x40
 80034c6:	4812      	ldr	r0, [pc, #72]	; (8003510 <w5500Init+0x88>)
 80034c8:	f7fe fbf8 	bl	8001cbc <HAL_GPIO_WritePin>

  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 80034cc:	4911      	ldr	r1, [pc, #68]	; (8003514 <w5500Init+0x8c>)
 80034ce:	4812      	ldr	r0, [pc, #72]	; (8003518 <w5500Init+0x90>)
 80034d0:	f001 fb22 	bl	8004b18 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(wizchip_read, wizchip_wrie);
 80034d4:	4911      	ldr	r1, [pc, #68]	; (800351c <w5500Init+0x94>)
 80034d6:	4812      	ldr	r0, [pc, #72]	; (8003520 <w5500Init+0x98>)
 80034d8:	f001 fb42 	bl	8004b60 <reg_wizchip_spi_cbfunc>
  reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 80034dc:	4911      	ldr	r1, [pc, #68]	; (8003524 <w5500Init+0x9c>)
 80034de:	4812      	ldr	r0, [pc, #72]	; (8003528 <w5500Init+0xa0>)
 80034e0:	f001 fb6a 	bl	8004bb8 <reg_wizchip_spiburst_cbfunc>

  // WIZchip Initialize
  if(ctlwizchip(CW_INIT_WIZCHIP, (void*) W5x00_AdrSet) == -1){
 80034e4:	1d3b      	adds	r3, r7, #4
 80034e6:	4619      	mov	r1, r3
 80034e8:	2001      	movs	r0, #1
 80034ea:	f001 fb91 	bl	8004c10 <ctlwizchip>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d103      	bne.n	80034fe <w5500Init+0x76>
    printf("Wizchip Initialize failed..\r\n");
 80034f6:	480d      	ldr	r0, [pc, #52]	; (800352c <w5500Init+0xa4>)
 80034f8:	f004 ff44 	bl	8008384 <puts>
    while(1);
 80034fc:	e7fe      	b.n	80034fc <w5500Init+0x74>
  }
  printf("Wizchip Initialize Success..\r\n");
 80034fe:	480c      	ldr	r0, [pc, #48]	; (8003530 <w5500Init+0xa8>)
 8003500:	f004 ff40 	bl	8008384 <puts>
}
 8003504:	bf00      	nop
 8003506:	371c      	adds	r7, #28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd90      	pop	{r4, r7, pc}
 800350c:	0800a764 	.word	0x0800a764
 8003510:	40010800 	.word	0x40010800
 8003514:	08003369 	.word	0x08003369
 8003518:	08003351 	.word	0x08003351
 800351c:	0800339b 	.word	0x0800339b
 8003520:	08003381 	.word	0x08003381
 8003524:	080033f3 	.word	0x080033f3
 8003528:	080033b5 	.word	0x080033b5
 800352c:	0800a724 	.word	0x0800a724
 8003530:	0800a744 	.word	0x0800a744

08003534 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800353c:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <WIZCHIP_READ+0x94>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003542:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <WIZCHIP_READ+0x94>)
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003548:	4b1f      	ldr	r3, [pc, #124]	; (80035c8 <WIZCHIP_READ+0x94>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <WIZCHIP_READ+0x24>
 8003550:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <WIZCHIP_READ+0x94>)
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	2b00      	cmp	r3, #0
 8003556:	d114      	bne.n	8003582 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <WIZCHIP_READ+0x94>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	0c12      	lsrs	r2, r2, #16
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	4610      	mov	r0, r2
 8003564:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <WIZCHIP_READ+0x94>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	0a12      	lsrs	r2, r2, #8
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	4610      	mov	r0, r2
 8003572:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <WIZCHIP_READ+0x94>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	4610      	mov	r0, r2
 800357e:	4798      	blx	r3
 8003580:	e011      	b.n	80035a6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	b2db      	uxtb	r3, r3
 8003588:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	b2db      	uxtb	r3, r3
 8003590:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <WIZCHIP_READ+0x94>)
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	f107 020c 	add.w	r2, r7, #12
 80035a0:	2103      	movs	r1, #3
 80035a2:	4610      	mov	r0, r2
 80035a4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <WIZCHIP_READ+0x94>)
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	4798      	blx	r3
 80035ac:	4603      	mov	r3, r0
 80035ae:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <WIZCHIP_READ+0x94>)
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80035b6:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <WIZCHIP_READ+0x94>)
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	4798      	blx	r3
   return ret;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000050 	.word	0x20000050

080035cc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80035d8:	4b22      	ldr	r3, [pc, #136]	; (8003664 <WIZCHIP_WRITE+0x98>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80035de:	4b21      	ldr	r3, [pc, #132]	; (8003664 <WIZCHIP_WRITE+0x98>)
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f043 0304 	orr.w	r3, r3, #4
 80035ea:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80035ec:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <WIZCHIP_WRITE+0x98>)
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d119      	bne.n	8003628 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80035f4:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <WIZCHIP_WRITE+0x98>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	0c12      	lsrs	r2, r2, #16
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	4610      	mov	r0, r2
 8003600:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003602:	4b18      	ldr	r3, [pc, #96]	; (8003664 <WIZCHIP_WRITE+0x98>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	0a12      	lsrs	r2, r2, #8
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	4610      	mov	r0, r2
 800360e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003610:	4b14      	ldr	r3, [pc, #80]	; (8003664 <WIZCHIP_WRITE+0x98>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	4610      	mov	r0, r2
 800361a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <WIZCHIP_WRITE+0x98>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	4610      	mov	r0, r2
 8003624:	4798      	blx	r3
 8003626:	e013      	b.n	8003650 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	0c1b      	lsrs	r3, r3, #16
 800362c:	b2db      	uxtb	r3, r3
 800362e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	b2db      	uxtb	r3, r3
 8003636:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <WIZCHIP_WRITE+0x98>)
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	f107 020c 	add.w	r2, r7, #12
 800364a:	2104      	movs	r1, #4
 800364c:	4610      	mov	r0, r2
 800364e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <WIZCHIP_WRITE+0x98>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003656:	4b03      	ldr	r3, [pc, #12]	; (8003664 <WIZCHIP_WRITE+0x98>)
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	4798      	blx	r3
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000050 	.word	0x20000050

08003668 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003676:	4b2b      	ldr	r3, [pc, #172]	; (8003724 <WIZCHIP_READ_BUF+0xbc>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800367c:	4b29      	ldr	r3, [pc, #164]	; (8003724 <WIZCHIP_READ_BUF+0xbc>)
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003682:	4b28      	ldr	r3, [pc, #160]	; (8003724 <WIZCHIP_READ_BUF+0xbc>)
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <WIZCHIP_READ_BUF+0x2a>
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <WIZCHIP_READ_BUF+0xbc>)
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	d126      	bne.n	80036e0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <WIZCHIP_READ_BUF+0xbc>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	0c12      	lsrs	r2, r2, #16
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	4610      	mov	r0, r2
 800369e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80036a0:	4b20      	ldr	r3, [pc, #128]	; (8003724 <WIZCHIP_READ_BUF+0xbc>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	0a12      	lsrs	r2, r2, #8
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	4610      	mov	r0, r2
 80036ac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80036ae:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <WIZCHIP_READ_BUF+0xbc>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	4610      	mov	r0, r2
 80036b8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80036ba:	2300      	movs	r3, #0
 80036bc:	82fb      	strh	r3, [r7, #22]
 80036be:	e00a      	b.n	80036d6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80036c0:	4b18      	ldr	r3, [pc, #96]	; (8003724 <WIZCHIP_READ_BUF+0xbc>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	8afa      	ldrh	r2, [r7, #22]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	188c      	adds	r4, r1, r2
 80036ca:	4798      	blx	r3
 80036cc:	4603      	mov	r3, r0
 80036ce:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80036d0:	8afb      	ldrh	r3, [r7, #22]
 80036d2:	3301      	adds	r3, #1
 80036d4:	82fb      	strh	r3, [r7, #22]
 80036d6:	8afa      	ldrh	r2, [r7, #22]
 80036d8:	88fb      	ldrh	r3, [r7, #6]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d3f0      	bcc.n	80036c0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80036de:	e017      	b.n	8003710 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <WIZCHIP_READ_BUF+0xbc>)
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	f107 0210 	add.w	r2, r7, #16
 80036fe:	2103      	movs	r1, #3
 8003700:	4610      	mov	r0, r2
 8003702:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <WIZCHIP_READ_BUF+0xbc>)
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	88fa      	ldrh	r2, [r7, #6]
 800370a:	4611      	mov	r1, r2
 800370c:	68b8      	ldr	r0, [r7, #8]
 800370e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <WIZCHIP_READ_BUF+0xbc>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003716:	4b03      	ldr	r3, [pc, #12]	; (8003724 <WIZCHIP_READ_BUF+0xbc>)
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	4798      	blx	r3
}
 800371c:	bf00      	nop
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	bd90      	pop	{r4, r7, pc}
 8003724:	20000050 	.word	0x20000050

08003728 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003736:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800373c:	4b29      	ldr	r3, [pc, #164]	; (80037e4 <WIZCHIP_WRITE_BUF+0xbc>)
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f043 0304 	orr.w	r3, r3, #4
 8003748:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800374a:	4b26      	ldr	r3, [pc, #152]	; (80037e4 <WIZCHIP_WRITE_BUF+0xbc>)
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	2b00      	cmp	r3, #0
 8003750:	d126      	bne.n	80037a0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	0c12      	lsrs	r2, r2, #16
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	4610      	mov	r0, r2
 800375e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003760:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	0a12      	lsrs	r2, r2, #8
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	4610      	mov	r0, r2
 800376c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800376e:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	4610      	mov	r0, r2
 8003778:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800377a:	2300      	movs	r3, #0
 800377c:	82fb      	strh	r3, [r7, #22]
 800377e:	e00a      	b.n	8003796 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003780:	4b18      	ldr	r3, [pc, #96]	; (80037e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	8afa      	ldrh	r2, [r7, #22]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	440a      	add	r2, r1
 800378a:	7812      	ldrb	r2, [r2, #0]
 800378c:	4610      	mov	r0, r2
 800378e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003790:	8afb      	ldrh	r3, [r7, #22]
 8003792:	3301      	adds	r3, #1
 8003794:	82fb      	strh	r3, [r7, #22]
 8003796:	8afa      	ldrh	r2, [r7, #22]
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	429a      	cmp	r2, r3
 800379c:	d3f0      	bcc.n	8003780 <WIZCHIP_WRITE_BUF+0x58>
 800379e:	e017      	b.n	80037d0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	0c1b      	lsrs	r3, r3, #16
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	0a1b      	lsrs	r3, r3, #8
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80037b6:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	f107 0210 	add.w	r2, r7, #16
 80037be:	2103      	movs	r1, #3
 80037c0:	4610      	mov	r0, r2
 80037c2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	4611      	mov	r1, r2
 80037cc:	68b8      	ldr	r0, [r7, #8]
 80037ce:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80037d6:	4b03      	ldr	r3, [pc, #12]	; (80037e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	4798      	blx	r3
}
 80037dc:	bf00      	nop
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000050 	.word	0x20000050

080037e8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	81fb      	strh	r3, [r7, #14]
 80037f6:	2300      	movs	r3, #0
 80037f8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	3301      	adds	r3, #1
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fe94 	bl	8003534 <WIZCHIP_READ>
 800380c:	4603      	mov	r3, r0
 800380e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003810:	89bb      	ldrh	r3, [r7, #12]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	b29c      	uxth	r4, r3
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	3301      	adds	r3, #1
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fe86 	bl	8003534 <WIZCHIP_READ>
 8003828:	4603      	mov	r3, r0
 800382a:	b29b      	uxth	r3, r3
 800382c:	4423      	add	r3, r4
 800382e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003830:	89bb      	ldrh	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01a      	beq.n	800386c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	3301      	adds	r3, #1
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fe76 	bl	8003534 <WIZCHIP_READ>
 8003848:	4603      	mov	r3, r0
 800384a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800384c:	89fb      	ldrh	r3, [r7, #14]
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	b29c      	uxth	r4, r3
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	3301      	adds	r3, #1
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fe68 	bl	8003534 <WIZCHIP_READ>
 8003864:	4603      	mov	r3, r0
 8003866:	b29b      	uxth	r3, r3
 8003868:	4423      	add	r3, r4
 800386a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800386c:	89fa      	ldrh	r2, [r7, #14]
 800386e:	89bb      	ldrh	r3, [r7, #12]
 8003870:	429a      	cmp	r2, r3
 8003872:	d1c2      	bne.n	80037fa <getSn_TX_FSR+0x12>
   return val;
 8003874:	89fb      	ldrh	r3, [r7, #14]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	bd90      	pop	{r4, r7, pc}

0800387e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800387e:	b590      	push	{r4, r7, lr}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
 8003884:	4603      	mov	r3, r0
 8003886:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003888:	2300      	movs	r3, #0
 800388a:	81fb      	strh	r3, [r7, #14]
 800388c:	2300      	movs	r3, #0
 800388e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	3301      	adds	r3, #1
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fe49 	bl	8003534 <WIZCHIP_READ>
 80038a2:	4603      	mov	r3, r0
 80038a4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80038a6:	89bb      	ldrh	r3, [r7, #12]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	b29c      	uxth	r4, r3
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	3301      	adds	r3, #1
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fe3b 	bl	8003534 <WIZCHIP_READ>
 80038be:	4603      	mov	r3, r0
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	4423      	add	r3, r4
 80038c4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80038c6:	89bb      	ldrh	r3, [r7, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01a      	beq.n	8003902 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	3301      	adds	r3, #1
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fe2b 	bl	8003534 <WIZCHIP_READ>
 80038de:	4603      	mov	r3, r0
 80038e0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80038e2:	89fb      	ldrh	r3, [r7, #14]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	b29c      	uxth	r4, r3
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	3301      	adds	r3, #1
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fe1d 	bl	8003534 <WIZCHIP_READ>
 80038fa:	4603      	mov	r3, r0
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	4423      	add	r3, r4
 8003900:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003902:	89fa      	ldrh	r2, [r7, #14]
 8003904:	89bb      	ldrh	r3, [r7, #12]
 8003906:	429a      	cmp	r2, r3
 8003908:	d1c2      	bne.n	8003890 <getSn_RX_RSR+0x12>
   return val;
 800390a:	89fb      	ldrh	r3, [r7, #14]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	bd90      	pop	{r4, r7, pc}

08003914 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	6039      	str	r1, [r7, #0]
 800391e:	71fb      	strb	r3, [r7, #7]
 8003920:	4613      	mov	r3, r2
 8003922:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800392c:	88bb      	ldrh	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d048      	beq.n	80039c4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	3301      	adds	r3, #1
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fdf8 	bl	8003534 <WIZCHIP_READ>
 8003944:	4603      	mov	r3, r0
 8003946:	b29b      	uxth	r3, r3
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	b29c      	uxth	r4, r3
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	3301      	adds	r3, #1
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fdeb 	bl	8003534 <WIZCHIP_READ>
 800395e:	4603      	mov	r3, r0
 8003960:	b29b      	uxth	r3, r3
 8003962:	4423      	add	r3, r4
 8003964:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003966:	89fb      	ldrh	r3, [r7, #14]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	79fa      	ldrb	r2, [r7, #7]
 800396c:	0092      	lsls	r2, r2, #2
 800396e:	3202      	adds	r2, #2
 8003970:	00d2      	lsls	r2, r2, #3
 8003972:	4413      	add	r3, r2
 8003974:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003976:	88bb      	ldrh	r3, [r7, #4]
 8003978:	461a      	mov	r2, r3
 800397a:	6839      	ldr	r1, [r7, #0]
 800397c:	68b8      	ldr	r0, [r7, #8]
 800397e:	f7ff fed3 	bl	8003728 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003982:	89fa      	ldrh	r2, [r7, #14]
 8003984:	88bb      	ldrh	r3, [r7, #4]
 8003986:	4413      	add	r3, r2
 8003988:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	3301      	adds	r3, #1
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003996:	461a      	mov	r2, r3
 8003998:	89fb      	ldrh	r3, [r7, #14]
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	b29b      	uxth	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f7ff fe12 	bl	80035cc <WIZCHIP_WRITE>
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	3301      	adds	r3, #1
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80039b4:	461a      	mov	r2, r3
 80039b6:	89fb      	ldrh	r3, [r7, #14]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	4619      	mov	r1, r3
 80039bc:	4610      	mov	r0, r2
 80039be:	f7ff fe05 	bl	80035cc <WIZCHIP_WRITE>
 80039c2:	e000      	b.n	80039c6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80039c4:	bf00      	nop
}
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd90      	pop	{r4, r7, pc}

080039cc <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	6039      	str	r1, [r7, #0]
 80039d6:	71fb      	strb	r3, [r7, #7]
 80039d8:	4613      	mov	r3, r2
 80039da:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80039e4:	88bb      	ldrh	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d048      	beq.n	8003a7c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	3301      	adds	r3, #1
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fd9c 	bl	8003534 <WIZCHIP_READ>
 80039fc:	4603      	mov	r3, r0
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	b29c      	uxth	r4, r3
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	3301      	adds	r3, #1
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fd8f 	bl	8003534 <WIZCHIP_READ>
 8003a16:	4603      	mov	r3, r0
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	4423      	add	r3, r4
 8003a1c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003a1e:	89fb      	ldrh	r3, [r7, #14]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	79fa      	ldrb	r2, [r7, #7]
 8003a24:	0092      	lsls	r2, r2, #2
 8003a26:	3203      	adds	r2, #3
 8003a28:	00d2      	lsls	r2, r2, #3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003a2e:	88bb      	ldrh	r3, [r7, #4]
 8003a30:	461a      	mov	r2, r3
 8003a32:	6839      	ldr	r1, [r7, #0]
 8003a34:	68b8      	ldr	r0, [r7, #8]
 8003a36:	f7ff fe17 	bl	8003668 <WIZCHIP_READ_BUF>
   ptr += len;
 8003a3a:	89fa      	ldrh	r2, [r7, #14]
 8003a3c:	88bb      	ldrh	r3, [r7, #4]
 8003a3e:	4413      	add	r3, r2
 8003a40:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	3301      	adds	r3, #1
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003a4e:	461a      	mov	r2, r3
 8003a50:	89fb      	ldrh	r3, [r7, #14]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f7ff fdb6 	bl	80035cc <WIZCHIP_WRITE>
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	3301      	adds	r3, #1
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	89fb      	ldrh	r3, [r7, #14]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	4619      	mov	r1, r3
 8003a74:	4610      	mov	r0, r2
 8003a76:	f7ff fda9 	bl	80035cc <WIZCHIP_WRITE>
 8003a7a:	e000      	b.n	8003a7e <wiz_recv_data+0xb2>
   if(len == 0) return;
 8003a7c:	bf00      	nop
}
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd90      	pop	{r4, r7, pc}

08003a84 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	460a      	mov	r2, r1
 8003a8e:	71fb      	strb	r3, [r7, #7]
 8003a90:	4613      	mov	r3, r2
 8003a92:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fd45 	bl	8003534 <WIZCHIP_READ>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	b29c      	uxth	r4, r3
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fd38 	bl	8003534 <WIZCHIP_READ>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	4423      	add	r3, r4
 8003aca:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8003acc:	89fa      	ldrh	r2, [r7, #14]
 8003ace:	88bb      	ldrh	r3, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	3301      	adds	r3, #1
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	89fb      	ldrh	r3, [r7, #14]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f7ff fd6d 	bl	80035cc <WIZCHIP_WRITE>
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	3301      	adds	r3, #1
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003afe:	461a      	mov	r2, r3
 8003b00:	89fb      	ldrh	r3, [r7, #14]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	4619      	mov	r1, r3
 8003b06:	4610      	mov	r0, r2
 8003b08:	f7ff fd60 	bl	80035cc <WIZCHIP_WRITE>
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd90      	pop	{r4, r7, pc}

08003b14 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	4623      	mov	r3, r4
 8003b24:	71fb      	strb	r3, [r7, #7]
 8003b26:	4603      	mov	r3, r0
 8003b28:	71bb      	strb	r3, [r7, #6]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	80bb      	strh	r3, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d902      	bls.n	8003b3e <socket+0x2a>
 8003b38:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3c:	e0f0      	b.n	8003d20 <socket+0x20c>
	switch(protocol)
 8003b3e:	79bb      	ldrb	r3, [r7, #6]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d005      	beq.n	8003b50 <socket+0x3c>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	dd11      	ble.n	8003b6c <socket+0x58>
 8003b48:	3b02      	subs	r3, #2
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d80e      	bhi.n	8003b6c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003b4e:	e011      	b.n	8003b74 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8003b50:	f107 030c 	add.w	r3, r7, #12
 8003b54:	2204      	movs	r2, #4
 8003b56:	4619      	mov	r1, r3
 8003b58:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003b5c:	f7ff fd84 	bl	8003668 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d105      	bne.n	8003b72 <socket+0x5e>
 8003b66:	f06f 0302 	mvn.w	r3, #2
 8003b6a:	e0d9      	b.n	8003d20 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003b6c:	f06f 0304 	mvn.w	r3, #4
 8003b70:	e0d6      	b.n	8003d20 <socket+0x20c>
	    break;
 8003b72:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <socket+0x70>
 8003b7e:	f06f 0305 	mvn.w	r3, #5
 8003b82:	e0cd      	b.n	8003d20 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d028      	beq.n	8003bdc <socket+0xc8>
	{
   	switch(protocol)
 8003b8a:	79bb      	ldrb	r3, [r7, #6]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d002      	beq.n	8003b96 <socket+0x82>
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d008      	beq.n	8003ba6 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003b94:	e022      	b.n	8003bdc <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d11a      	bne.n	8003bd6 <socket+0xc2>
 8003ba0:	f06f 0305 	mvn.w	r3, #5
 8003ba4:	e0bc      	b.n	8003d20 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d006      	beq.n	8003bbe <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	db02      	blt.n	8003bbe <socket+0xaa>
 8003bb8:	f06f 0305 	mvn.w	r3, #5
 8003bbc:	e0b0      	b.n	8003d20 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	db04      	blt.n	8003bda <socket+0xc6>
 8003bd0:	f06f 0305 	mvn.w	r3, #5
 8003bd4:	e0a4      	b.n	8003d20 <socket+0x20c>
   	      break;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <socket+0xc8>
   	      break;
 8003bda:	bf00      	nop
   	}
   }
	close(sn);
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f8ac 	bl	8003d3c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	3301      	adds	r3, #1
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4618      	mov	r0, r3
 8003bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf2:	f023 030f 	bic.w	r3, r3, #15
 8003bf6:	b25a      	sxtb	r2, r3
 8003bf8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	b25b      	sxtb	r3, r3
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	4619      	mov	r1, r3
 8003c04:	f7ff fce2 	bl	80035cc <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003c08:	88bb      	ldrh	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d110      	bne.n	8003c30 <socket+0x11c>
	{
	   port = sock_any_port++;
 8003c0e:	4b46      	ldr	r3, [pc, #280]	; (8003d28 <socket+0x214>)
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	b291      	uxth	r1, r2
 8003c16:	4a44      	ldr	r2, [pc, #272]	; (8003d28 <socket+0x214>)
 8003c18:	8011      	strh	r1, [r2, #0]
 8003c1a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003c1c:	4b42      	ldr	r3, [pc, #264]	; (8003d28 <socket+0x214>)
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d103      	bne.n	8003c30 <socket+0x11c>
 8003c28:	4b3f      	ldr	r3, [pc, #252]	; (8003d28 <socket+0x214>)
 8003c2a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003c2e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	3301      	adds	r3, #1
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	88bb      	ldrh	r3, [r7, #4]
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f7ff fcbf 	bl	80035cc <WIZCHIP_WRITE>
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	3301      	adds	r3, #1
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	88bb      	ldrh	r3, [r7, #4]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f7ff fcb2 	bl	80035cc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c74:	2101      	movs	r1, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fca8 	bl	80035cc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003c7c:	bf00      	nop
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	3301      	adds	r3, #1
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fc52 	bl	8003534 <WIZCHIP_READ>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f3      	bne.n	8003c7e <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	b21b      	sxth	r3, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	b21a      	sxth	r2, r3
 8003ca4:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <socket+0x218>)
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	4013      	ands	r3, r2
 8003cac:	b21b      	sxth	r3, r3
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <socket+0x218>)
 8003cb2:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	f003 0201 	and.w	r2, r3, #1
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	b21a      	sxth	r2, r3
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <socket+0x218>)
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	b21b      	sxth	r3, r3
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	b21b      	sxth	r3, r3
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <socket+0x218>)
 8003cd0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	b21b      	sxth	r3, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	b21a      	sxth	r2, r3
 8003ce0:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <socket+0x21c>)
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	b21b      	sxth	r3, r3
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	b21b      	sxth	r3, r3
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <socket+0x21c>)
 8003cee:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	4a10      	ldr	r2, [pc, #64]	; (8003d34 <socket+0x220>)
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	4a0e      	ldr	r2, [pc, #56]	; (8003d38 <socket+0x224>)
 8003cfe:	2100      	movs	r1, #0
 8003d00:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003d02:	bf00      	nop
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	3301      	adds	r3, #1
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fc0f 	bl	8003534 <WIZCHIP_READ>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f3      	beq.n	8003d04 <socket+0x1f0>
   return (int8_t)sn;
 8003d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd90      	pop	{r4, r7, pc}
 8003d28:	2000004e 	.word	0x2000004e
 8003d2c:	20000a6c 	.word	0x20000a6c
 8003d30:	20000a6e 	.word	0x20000a6e
 8003d34:	20000a70 	.word	0x20000a70
 8003d38:	20000a80 	.word	0x20000a80

08003d3c <close>:

int8_t close(uint8_t sn)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d902      	bls.n	8003d52 <close+0x16>
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	e055      	b.n	8003dfe <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	3301      	adds	r3, #1
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003d5e:	2110      	movs	r1, #16
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fc33 	bl	80035cc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003d66:	bf00      	nop
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fbdd 	bl	8003534 <WIZCHIP_READ>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f3      	bne.n	8003d68 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	3301      	adds	r3, #1
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003d8c:	211f      	movs	r1, #31
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fc1c 	bl	80035cc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	2201      	movs	r2, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	b21b      	sxth	r3, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	b21a      	sxth	r2, r3
 8003da2:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <close+0xcc>)
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b21b      	sxth	r3, r3
 8003da8:	4013      	ands	r3, r2
 8003daa:	b21b      	sxth	r3, r3
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	4b16      	ldr	r3, [pc, #88]	; (8003e08 <close+0xcc>)
 8003db0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	2201      	movs	r2, #1
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	b21b      	sxth	r3, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	b21a      	sxth	r2, r3
 8003dc0:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <close+0xd0>)
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b21b      	sxth	r3, r3
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	b21b      	sxth	r3, r3
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <close+0xd0>)
 8003dce:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <close+0xd4>)
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	4a0d      	ldr	r2, [pc, #52]	; (8003e14 <close+0xd8>)
 8003dde:	2100      	movs	r1, #0
 8003de0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003de2:	bf00      	nop
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	3301      	adds	r3, #1
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fb9f 	bl	8003534 <WIZCHIP_READ>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f3      	bne.n	8003de4 <close+0xa8>
	return SOCK_OK;
 8003dfc:	2301      	movs	r3, #1
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000a6c 	.word	0x20000a6c
 8003e0c:	20000a6e 	.word	0x20000a6e
 8003e10:	20000a70 	.word	0x20000a70
 8003e14:	20000a80 	.word	0x20000a80

08003e18 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	6039      	str	r1, [r7, #0]
 8003e22:	71fb      	strb	r3, [r7, #7]
 8003e24:	4613      	mov	r3, r2
 8003e26:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d902      	bls.n	8003e34 <connect+0x1c>
 8003e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e32:	e0c6      	b.n	8003fc2 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	3301      	adds	r3, #1
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fb79 	bl	8003534 <WIZCHIP_READ>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d002      	beq.n	8003e52 <connect+0x3a>
 8003e4c:	f06f 0304 	mvn.w	r3, #4
 8003e50:	e0b7      	b.n	8003fc2 <connect+0x1aa>
   CHECK_SOCKINIT();
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	3301      	adds	r3, #1
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fb68 	bl	8003534 <WIZCHIP_READ>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b13      	cmp	r3, #19
 8003e68:	d002      	beq.n	8003e70 <connect+0x58>
 8003e6a:	f06f 0302 	mvn.w	r3, #2
 8003e6e:	e0a8      	b.n	8003fc2 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	3201      	adds	r2, #1
 8003e7e:	7812      	ldrb	r2, [r2, #0]
 8003e80:	4413      	add	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	3202      	adds	r2, #2
 8003e8c:	7812      	ldrb	r2, [r2, #0]
 8003e8e:	4413      	add	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	3203      	adds	r2, #3
 8003e9a:	7812      	ldrb	r2, [r2, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea6:	d002      	beq.n	8003eae <connect+0x96>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <connect+0x9c>
 8003eae:	f06f 030b 	mvn.w	r3, #11
 8003eb2:	e086      	b.n	8003fc2 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8003eb4:	88bb      	ldrh	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d102      	bne.n	8003ec0 <connect+0xa8>
 8003eba:	f06f 030a 	mvn.w	r3, #10
 8003ebe:	e080      	b.n	8003fc2 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003ecc:	2204      	movs	r2, #4
 8003ece:	6839      	ldr	r1, [r7, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff fc29 	bl	8003728 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	3301      	adds	r3, #1
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	88bb      	ldrh	r3, [r7, #4]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f7ff fb6c 	bl	80035cc <WIZCHIP_WRITE>
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	3301      	adds	r3, #1
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003f00:	461a      	mov	r2, r3
 8003f02:	88bb      	ldrh	r3, [r7, #4]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	4619      	mov	r1, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	f7ff fb5f 	bl	80035cc <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	3301      	adds	r3, #1
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f1a:	2104      	movs	r1, #4
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fb55 	bl	80035cc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003f22:	bf00      	nop
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	3301      	adds	r3, #1
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff faff 	bl	8003534 <WIZCHIP_READ>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f3      	bne.n	8003f24 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003f3c:	4b23      	ldr	r3, [pc, #140]	; (8003fcc <connect+0x1b4>)
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	fa42 f303 	asr.w	r3, r2, r3
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d02b      	beq.n	8003fa8 <connect+0x190>
 8003f50:	2300      	movs	r3, #0
 8003f52:	e036      	b.n	8003fc2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	3301      	adds	r3, #1
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fae7 	bl	8003534 <WIZCHIP_READ>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00c      	beq.n	8003f8a <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	3301      	adds	r3, #1
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f7c:	2108      	movs	r1, #8
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fb24 	bl	80035cc <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8003f84:	f06f 030c 	mvn.w	r3, #12
 8003f88:	e01b      	b.n	8003fc2 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	3301      	adds	r3, #1
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff facc 	bl	8003534 <WIZCHIP_READ>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8003fa2:	f06f 0303 	mvn.w	r3, #3
 8003fa6:	e00c      	b.n	8003fc2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	3301      	adds	r3, #1
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fabd 	bl	8003534 <WIZCHIP_READ>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b17      	cmp	r3, #23
 8003fbe:	d1c9      	bne.n	8003f54 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8003fc0:	2301      	movs	r3, #1
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000a6c 	.word	0x20000a6c

08003fd0 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d902      	bls.n	8003fe6 <disconnect+0x16>
 8003fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe4:	e062      	b.n	80040ac <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	3301      	adds	r3, #1
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff faa0 	bl	8003534 <WIZCHIP_READ>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d002      	beq.n	8004004 <disconnect+0x34>
 8003ffe:	f06f 0304 	mvn.w	r3, #4
 8004002:	e053      	b.n	80040ac <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	3301      	adds	r3, #1
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004010:	2108      	movs	r1, #8
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff fada 	bl	80035cc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004018:	bf00      	nop
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	3301      	adds	r3, #1
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fa84 	bl	8003534 <WIZCHIP_READ>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f3      	bne.n	800401a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	2201      	movs	r2, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	b21b      	sxth	r3, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	b21a      	sxth	r2, r3
 8004040:	4b1c      	ldr	r3, [pc, #112]	; (80040b4 <disconnect+0xe4>)
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b21b      	sxth	r3, r3
 8004046:	4013      	ands	r3, r2
 8004048:	b21b      	sxth	r3, r3
 800404a:	b29a      	uxth	r2, r3
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <disconnect+0xe4>)
 800404e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004050:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <disconnect+0xe8>)
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	fa42 f303 	asr.w	r3, r2, r3
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d016      	beq.n	8004092 <disconnect+0xc2>
 8004064:	2300      	movs	r3, #0
 8004066:	e021      	b.n	80040ac <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	3301      	adds	r3, #1
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fa5d 	bl	8003534 <WIZCHIP_READ>
 800407a:	4603      	mov	r3, r0
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d006      	beq.n	8004092 <disconnect+0xc2>
	   {
	      close(sn);
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fe58 	bl	8003d3c <close>
	      return SOCKERR_TIMEOUT;
 800408c:	f06f 030c 	mvn.w	r3, #12
 8004090:	e00c      	b.n	80040ac <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	3301      	adds	r3, #1
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fa48 	bl	8003534 <WIZCHIP_READ>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1de      	bne.n	8004068 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80040aa:	2301      	movs	r3, #1
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000a6e 	.word	0x20000a6e
 80040b8:	20000a6c 	.word	0x20000a6c

080040bc <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	6039      	str	r1, [r7, #0]
 80040c6:	71fb      	strb	r3, [r7, #7]
 80040c8:	4613      	mov	r3, r2
 80040ca:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d902      	bls.n	80040e0 <send+0x24>
 80040da:	f04f 33ff 	mov.w	r3, #4294967295
 80040de:	e0de      	b.n	800429e <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	3301      	adds	r3, #1
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fa23 	bl	8003534 <WIZCHIP_READ>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d002      	beq.n	80040fe <send+0x42>
 80040f8:	f06f 0304 	mvn.w	r3, #4
 80040fc:	e0cf      	b.n	800429e <send+0x1e2>
   CHECK_SOCKDATA();
 80040fe:	88bb      	ldrh	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <send+0x4e>
 8004104:	f06f 030d 	mvn.w	r3, #13
 8004108:	e0c9      	b.n	800429e <send+0x1e2>
   tmp = getSn_SR(sn);
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	3301      	adds	r3, #1
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fa0c 	bl	8003534 <WIZCHIP_READ>
 800411c:	4603      	mov	r3, r0
 800411e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b17      	cmp	r3, #23
 8004124:	d005      	beq.n	8004132 <send+0x76>
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	2b1c      	cmp	r3, #28
 800412a:	d002      	beq.n	8004132 <send+0x76>
 800412c:	f06f 0306 	mvn.w	r3, #6
 8004130:	e0b5      	b.n	800429e <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8004132:	4b5d      	ldr	r3, [pc, #372]	; (80042a8 <send+0x1ec>)
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	fa42 f303 	asr.w	r3, r2, r3
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d039      	beq.n	80041ba <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	3301      	adds	r3, #1
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff f9ee 	bl	8003534 <WIZCHIP_READ>
 8004158:	4603      	mov	r3, r0
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	d019      	beq.n	800419e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	3301      	adds	r3, #1
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004176:	2110      	movs	r1, #16
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff fa27 	bl	80035cc <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	2201      	movs	r2, #1
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	b21b      	sxth	r3, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	b21a      	sxth	r2, r3
 800418c:	4b46      	ldr	r3, [pc, #280]	; (80042a8 <send+0x1ec>)
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b21b      	sxth	r3, r3
 8004192:	4013      	ands	r3, r2
 8004194:	b21b      	sxth	r3, r3
 8004196:	b29a      	uxth	r2, r3
 8004198:	4b43      	ldr	r3, [pc, #268]	; (80042a8 <send+0x1ec>)
 800419a:	801a      	strh	r2, [r3, #0]
 800419c:	e00d      	b.n	80041ba <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d006      	beq.n	80041b6 <send+0xfa>
      {
         close(sn);
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fdc6 	bl	8003d3c <close>
         return SOCKERR_TIMEOUT;
 80041b0:	f06f 030c 	mvn.w	r3, #12
 80041b4:	e073      	b.n	800429e <send+0x1e2>
      }
      else return SOCK_BUSY;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e071      	b.n	800429e <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	3301      	adds	r3, #1
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff f9b4 	bl	8003534 <WIZCHIP_READ>
 80041cc:	4603      	mov	r3, r0
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	029b      	lsls	r3, r3, #10
 80041d2:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80041d4:	88ba      	ldrh	r2, [r7, #4]
 80041d6:	89bb      	ldrh	r3, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d901      	bls.n	80041e0 <send+0x124>
 80041dc:	89bb      	ldrh	r3, [r7, #12]
 80041de:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fb00 	bl	80037e8 <getSn_TX_FSR>
 80041e8:	4603      	mov	r3, r0
 80041ea:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	3301      	adds	r3, #1
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff f99b 	bl	8003534 <WIZCHIP_READ>
 80041fe:	4603      	mov	r3, r0
 8004200:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b17      	cmp	r3, #23
 8004206:	d009      	beq.n	800421c <send+0x160>
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	2b1c      	cmp	r3, #28
 800420c:	d006      	beq.n	800421c <send+0x160>
      {
         close(sn);
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fd93 	bl	8003d3c <close>
         return SOCKERR_SOCKSTATUS;
 8004216:	f06f 0306 	mvn.w	r3, #6
 800421a:	e040      	b.n	800429e <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800421c:	4b23      	ldr	r3, [pc, #140]	; (80042ac <send+0x1f0>)
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	fa42 f303 	asr.w	r3, r2, r3
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <send+0x180>
 8004230:	88ba      	ldrh	r2, [r7, #4]
 8004232:	89bb      	ldrh	r3, [r7, #12]
 8004234:	429a      	cmp	r2, r3
 8004236:	d901      	bls.n	800423c <send+0x180>
 8004238:	2300      	movs	r3, #0
 800423a:	e030      	b.n	800429e <send+0x1e2>
      if(len <= freesize) break;
 800423c:	88ba      	ldrh	r2, [r7, #4]
 800423e:	89bb      	ldrh	r3, [r7, #12]
 8004240:	429a      	cmp	r2, r3
 8004242:	d900      	bls.n	8004246 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8004244:	e7cc      	b.n	80041e0 <send+0x124>
      if(len <= freesize) break;
 8004246:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004248:	88ba      	ldrh	r2, [r7, #4]
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fb60 	bl	8003914 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	3301      	adds	r3, #1
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004260:	2120      	movs	r1, #32
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff f9b2 	bl	80035cc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004268:	bf00      	nop
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	3301      	adds	r3, #1
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff f95c 	bl	8003534 <WIZCHIP_READ>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f3      	bne.n	800426a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	2201      	movs	r2, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	b21a      	sxth	r2, r3
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <send+0x1ec>)
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b21b      	sxth	r3, r3
 8004292:	4313      	orrs	r3, r2
 8004294:	b21b      	sxth	r3, r3
 8004296:	b29a      	uxth	r2, r3
 8004298:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <send+0x1ec>)
 800429a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800429c:	88bb      	ldrh	r3, [r7, #4]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000a6e 	.word	0x20000a6e
 80042ac:	20000a6c 	.word	0x20000a6c

080042b0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80042b0:	b590      	push	{r4, r7, lr}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	6039      	str	r1, [r7, #0]
 80042ba:	71fb      	strb	r3, [r7, #7]
 80042bc:	4613      	mov	r3, r2
 80042be:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d902      	bls.n	80042d4 <recv+0x24>
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	e09c      	b.n	800440e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	3301      	adds	r3, #1
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff f929 	bl	8003534 <WIZCHIP_READ>
 80042e2:	4603      	mov	r3, r0
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d002      	beq.n	80042f2 <recv+0x42>
 80042ec:	f06f 0304 	mvn.w	r3, #4
 80042f0:	e08d      	b.n	800440e <recv+0x15e>
   CHECK_SOCKDATA();
 80042f2:	88bb      	ldrh	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <recv+0x4e>
 80042f8:	f06f 030d 	mvn.w	r3, #13
 80042fc:	e087      	b.n	800440e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	3301      	adds	r3, #1
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff f912 	bl	8003534 <WIZCHIP_READ>
 8004310:	4603      	mov	r3, r0
 8004312:	b29b      	uxth	r3, r3
 8004314:	029b      	lsls	r3, r3, #10
 8004316:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004318:	89ba      	ldrh	r2, [r7, #12]
 800431a:	88bb      	ldrh	r3, [r7, #4]
 800431c:	429a      	cmp	r2, r3
 800431e:	d201      	bcs.n	8004324 <recv+0x74>
 8004320:	89bb      	ldrh	r3, [r7, #12]
 8004322:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff faa9 	bl	800387e <getSn_RX_RSR>
 800432c:	4603      	mov	r3, r0
 800432e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	3301      	adds	r3, #1
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff f8f9 	bl	8003534 <WIZCHIP_READ>
 8004342:	4603      	mov	r3, r0
 8004344:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b17      	cmp	r3, #23
 800434a:	d026      	beq.n	800439a <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b1c      	cmp	r3, #28
 8004350:	d11c      	bne.n	800438c <recv+0xdc>
            {
               if(recvsize != 0) break;
 8004352:	89bb      	ldrh	r3, [r7, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d133      	bne.n	80043c0 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fa44 	bl	80037e8 <getSn_TX_FSR>
 8004360:	4603      	mov	r3, r0
 8004362:	461c      	mov	r4, r3
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	3301      	adds	r3, #1
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff f8df 	bl	8003534 <WIZCHIP_READ>
 8004376:	4603      	mov	r3, r0
 8004378:	029b      	lsls	r3, r3, #10
 800437a:	429c      	cmp	r4, r3
 800437c:	d10d      	bne.n	800439a <recv+0xea>
               {
                  close(sn);
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fcdb 	bl	8003d3c <close>
                  return SOCKERR_SOCKSTATUS;
 8004386:	f06f 0306 	mvn.w	r3, #6
 800438a:	e040      	b.n	800440e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fcd4 	bl	8003d3c <close>
               return SOCKERR_SOCKSTATUS;
 8004394:	f06f 0306 	mvn.w	r3, #6
 8004398:	e039      	b.n	800440e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800439a:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <recv+0x168>)
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	fa42 f303 	asr.w	r3, r2, r3
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d004      	beq.n	80043b8 <recv+0x108>
 80043ae:	89bb      	ldrh	r3, [r7, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <recv+0x108>
 80043b4:	2300      	movs	r3, #0
 80043b6:	e02a      	b.n	800440e <recv+0x15e>
         if(recvsize != 0) break;
 80043b8:	89bb      	ldrh	r3, [r7, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80043be:	e7b1      	b.n	8004324 <recv+0x74>
               if(recvsize != 0) break;
 80043c0:	bf00      	nop
 80043c2:	e000      	b.n	80043c6 <recv+0x116>
         if(recvsize != 0) break;
 80043c4:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80043c6:	89ba      	ldrh	r2, [r7, #12]
 80043c8:	88bb      	ldrh	r3, [r7, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d201      	bcs.n	80043d2 <recv+0x122>
 80043ce:	89bb      	ldrh	r3, [r7, #12]
 80043d0:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80043d2:	88ba      	ldrh	r2, [r7, #4]
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	6839      	ldr	r1, [r7, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff faf7 	bl	80039cc <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	3301      	adds	r3, #1
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80043ea:	2140      	movs	r1, #64	; 0x40
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff f8ed 	bl	80035cc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80043f2:	bf00      	nop
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	3301      	adds	r3, #1
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff f897 	bl	8003534 <WIZCHIP_READ>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f3      	bne.n	80043f4 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800440c:	88bb      	ldrh	r3, [r7, #4]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	bd90      	pop	{r4, r7, pc}
 8004416:	bf00      	nop
 8004418:	20000a6c 	.word	0x20000a6c

0800441c <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	4603      	mov	r3, r0
 8004428:	73fb      	strb	r3, [r7, #15]
 800442a:	4613      	mov	r3, r2
 800442c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d902      	bls.n	8004442 <sendto+0x26>
 800443c:	f04f 33ff 	mov.w	r3, #4294967295
 8004440:	e11b      	b.n	800467a <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	3301      	adds	r3, #1
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff f872 	bl	8003534 <WIZCHIP_READ>
 8004450:	4603      	mov	r3, r0
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	3b02      	subs	r3, #2
 8004458:	2b02      	cmp	r3, #2
 800445a:	d902      	bls.n	8004462 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800445c:	f06f 0304 	mvn.w	r3, #4
 8004460:	e10b      	b.n	800467a <sendto+0x25e>
         break;
 8004462:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004464:	89bb      	ldrh	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <sendto+0x54>
 800446a:	f06f 030d 	mvn.w	r3, #13
 800446e:	e104      	b.n	800467a <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	3201      	adds	r2, #1
 800447e:	7812      	ldrb	r2, [r2, #0]
 8004480:	4413      	add	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	3202      	adds	r2, #2
 800448c:	7812      	ldrb	r2, [r2, #0]
 800448e:	4413      	add	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	3203      	adds	r2, #3
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	4413      	add	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10e      	bne.n	80044c4 <sendto+0xa8>
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	3301      	adds	r3, #1
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff f840 	bl	8003534 <WIZCHIP_READ>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d002      	beq.n	80044c4 <sendto+0xa8>
 80044be:	f06f 030b 	mvn.w	r3, #11
 80044c2:	e0da      	b.n	800467a <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80044c4:	8c3b      	ldrh	r3, [r7, #32]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10e      	bne.n	80044e8 <sendto+0xcc>
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	3301      	adds	r3, #1
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff f82e 	bl	8003534 <WIZCHIP_READ>
 80044d8:	4603      	mov	r3, r0
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d002      	beq.n	80044e8 <sendto+0xcc>
 80044e2:	f06f 030a 	mvn.w	r3, #10
 80044e6:	e0c8      	b.n	800467a <sendto+0x25e>
   tmp = getSn_SR(sn);
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	3301      	adds	r3, #1
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff f81d 	bl	8003534 <WIZCHIP_READ>
 80044fa:	4603      	mov	r3, r0
 80044fc:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	2b42      	cmp	r3, #66	; 0x42
 8004502:	d008      	beq.n	8004516 <sendto+0xfa>
 8004504:	7dfb      	ldrb	r3, [r7, #23]
 8004506:	2b22      	cmp	r3, #34	; 0x22
 8004508:	d005      	beq.n	8004516 <sendto+0xfa>
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	2b32      	cmp	r3, #50	; 0x32
 800450e:	d002      	beq.n	8004516 <sendto+0xfa>
 8004510:	f06f 0306 	mvn.w	r3, #6
 8004514:	e0b1      	b.n	800467a <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	3301      	adds	r3, #1
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004522:	2204      	movs	r2, #4
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff f8fe 	bl	8003728 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	3301      	adds	r3, #1
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004538:	461a      	mov	r2, r3
 800453a:	8c3b      	ldrh	r3, [r7, #32]
 800453c:	0a1b      	lsrs	r3, r3, #8
 800453e:	b29b      	uxth	r3, r3
 8004540:	b2db      	uxtb	r3, r3
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f7ff f841 	bl	80035cc <WIZCHIP_WRITE>
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	3301      	adds	r3, #1
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004556:	461a      	mov	r2, r3
 8004558:	8c3b      	ldrh	r3, [r7, #32]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	4619      	mov	r1, r3
 800455e:	4610      	mov	r0, r2
 8004560:	f7ff f834 	bl	80035cc <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	3301      	adds	r3, #1
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe ffdf 	bl	8003534 <WIZCHIP_READ>
 8004576:	4603      	mov	r3, r0
 8004578:	b29b      	uxth	r3, r3
 800457a:	029b      	lsls	r3, r3, #10
 800457c:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800457e:	89ba      	ldrh	r2, [r7, #12]
 8004580:	8abb      	ldrh	r3, [r7, #20]
 8004582:	429a      	cmp	r2, r3
 8004584:	d901      	bls.n	800458a <sendto+0x16e>
 8004586:	8abb      	ldrh	r3, [r7, #20]
 8004588:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff f92b 	bl	80037e8 <getSn_TX_FSR>
 8004592:	4603      	mov	r3, r0
 8004594:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	3301      	adds	r3, #1
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe ffc6 	bl	8003534 <WIZCHIP_READ>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <sendto+0x198>
 80045ae:	f06f 0303 	mvn.w	r3, #3
 80045b2:	e062      	b.n	800467a <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80045b4:	4b33      	ldr	r3, [pc, #204]	; (8004684 <sendto+0x268>)
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	fa42 f303 	asr.w	r3, r2, r3
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <sendto+0x1b8>
 80045c8:	89ba      	ldrh	r2, [r7, #12]
 80045ca:	8abb      	ldrh	r3, [r7, #20]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d901      	bls.n	80045d4 <sendto+0x1b8>
 80045d0:	2300      	movs	r3, #0
 80045d2:	e052      	b.n	800467a <sendto+0x25e>
      if(len <= freesize) break;
 80045d4:	89ba      	ldrh	r2, [r7, #12]
 80045d6:	8abb      	ldrh	r3, [r7, #20]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d900      	bls.n	80045de <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80045dc:	e7d5      	b.n	800458a <sendto+0x16e>
      if(len <= freesize) break;
 80045de:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80045e0:	89ba      	ldrh	r2, [r7, #12]
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff f994 	bl	8003914 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	3301      	adds	r3, #1
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80045f8:	2120      	movs	r1, #32
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe ffe6 	bl	80035cc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004600:	bf00      	nop
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	3301      	adds	r3, #1
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe ff90 	bl	8003534 <WIZCHIP_READ>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f3      	bne.n	8004602 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	3301      	adds	r3, #1
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe ff84 	bl	8003534 <WIZCHIP_READ>
 800462c:	4603      	mov	r3, r0
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	3301      	adds	r3, #1
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800464a:	2110      	movs	r1, #16
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe ffbd 	bl	80035cc <WIZCHIP_WRITE>
         break;
 8004652:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004654:	89bb      	ldrh	r3, [r7, #12]
 8004656:	e010      	b.n	800467a <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0db      	beq.n	800461a <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	3301      	adds	r3, #1
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800466e:	2108      	movs	r1, #8
 8004670:	4618      	mov	r0, r3
 8004672:	f7fe ffab 	bl	80035cc <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8004676:	f06f 030c 	mvn.w	r3, #12
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000a6c 	.word	0x20000a6c

08004688 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	4603      	mov	r3, r0
 8004694:	73fb      	strb	r3, [r7, #15]
 8004696:	4613      	mov	r3, r2
 8004698:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800469a:	2300      	movs	r3, #0
 800469c:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d902      	bls.n	80046aa <recvfrom+0x22>
 80046a4:	f04f 33ff 	mov.w	r3, #4294967295
 80046a8:	e1d4      	b.n	8004a54 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	3301      	adds	r3, #1
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fe ff3e 	bl	8003534 <WIZCHIP_READ>
 80046b8:	4603      	mov	r3, r0
 80046ba:	777b      	strb	r3, [r7, #29]
 80046bc:	7f7b      	ldrb	r3, [r7, #29]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	3b02      	subs	r3, #2
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d902      	bls.n	80046ce <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80046c8:	f06f 0304 	mvn.w	r3, #4
 80046cc:	e1c2      	b.n	8004a54 <recvfrom+0x3cc>
         break;
 80046ce:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80046d0:	89bb      	ldrh	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <recvfrom+0x54>
 80046d6:	f06f 030d 	mvn.w	r3, #13
 80046da:	e1bb      	b.n	8004a54 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	4a88      	ldr	r2, [pc, #544]	; (8004900 <recvfrom+0x278>)
 80046e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d128      	bne.n	800473a <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff f8c7 	bl	800387e <getSn_RX_RSR>
 80046f0:	4603      	mov	r3, r0
 80046f2:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	3301      	adds	r3, #1
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004700:	4618      	mov	r0, r3
 8004702:	f7fe ff17 	bl	8003534 <WIZCHIP_READ>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d102      	bne.n	8004712 <recvfrom+0x8a>
 800470c:	f06f 0303 	mvn.w	r3, #3
 8004710:	e1a0      	b.n	8004a54 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8004712:	4b7c      	ldr	r3, [pc, #496]	; (8004904 <recvfrom+0x27c>)
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	fa42 f303 	asr.w	r3, r2, r3
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <recvfrom+0xa8>
 8004726:	8bfb      	ldrh	r3, [r7, #30]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <recvfrom+0xa8>
 800472c:	2300      	movs	r3, #0
 800472e:	e191      	b.n	8004a54 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8004730:	8bfb      	ldrh	r3, [r7, #30]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d100      	bne.n	8004738 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8004736:	e7d7      	b.n	80046e8 <recvfrom+0x60>
         if(pack_len != 0) break;
 8004738:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800473a:	7f7b      	ldrb	r3, [r7, #29]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	2b04      	cmp	r3, #4
 8004742:	d079      	beq.n	8004838 <recvfrom+0x1b0>
 8004744:	2b04      	cmp	r3, #4
 8004746:	f300 8142 	bgt.w	80049ce <recvfrom+0x346>
 800474a:	2b02      	cmp	r3, #2
 800474c:	d003      	beq.n	8004756 <recvfrom+0xce>
 800474e:	2b03      	cmp	r3, #3
 8004750:	f000 80dc 	beq.w	800490c <recvfrom+0x284>
 8004754:	e13b      	b.n	80049ce <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	4a69      	ldr	r2, [pc, #420]	; (8004900 <recvfrom+0x278>)
 800475a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d152      	bne.n	8004808 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8004762:	f107 0114 	add.w	r1, r7, #20
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	2208      	movs	r2, #8
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff f92e 	bl	80039cc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	3301      	adds	r3, #1
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800477c:	2140      	movs	r1, #64	; 0x40
 800477e:	4618      	mov	r0, r3
 8004780:	f7fe ff24 	bl	80035cc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004784:	bf00      	nop
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	3301      	adds	r3, #1
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe fece 	bl	8003534 <WIZCHIP_READ>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f3      	bne.n	8004786 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800479e:	7d3a      	ldrb	r2, [r7, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3301      	adds	r3, #1
 80047a8:	7d7a      	ldrb	r2, [r7, #21]
 80047aa:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3302      	adds	r3, #2
 80047b0:	7dba      	ldrb	r2, [r7, #22]
 80047b2:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3303      	adds	r3, #3
 80047b8:	7dfa      	ldrb	r2, [r7, #23]
 80047ba:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80047bc:	7e3b      	ldrb	r3, [r7, #24]
 80047be:	b29a      	uxth	r2, r3
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	7e7b      	ldrb	r3, [r7, #25]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80047d8:	7eba      	ldrb	r2, [r7, #26]
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	b291      	uxth	r1, r2
 80047de:	4a48      	ldr	r2, [pc, #288]	; (8004900 <recvfrom+0x278>)
 80047e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	4a46      	ldr	r2, [pc, #280]	; (8004900 <recvfrom+0x278>)
 80047e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ec:	021b      	lsls	r3, r3, #8
 80047ee:	b299      	uxth	r1, r3
 80047f0:	7efb      	ldrb	r3, [r7, #27]
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	440a      	add	r2, r1
 80047f8:	b291      	uxth	r1, r2
 80047fa:	4a41      	ldr	r2, [pc, #260]	; (8004900 <recvfrom+0x278>)
 80047fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	4a41      	ldr	r2, [pc, #260]	; (8004908 <recvfrom+0x280>)
 8004804:	2180      	movs	r1, #128	; 0x80
 8004806:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	4a3d      	ldr	r2, [pc, #244]	; (8004900 <recvfrom+0x278>)
 800480c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004810:	89ba      	ldrh	r2, [r7, #12]
 8004812:	429a      	cmp	r2, r3
 8004814:	d202      	bcs.n	800481c <recvfrom+0x194>
 8004816:	89bb      	ldrh	r3, [r7, #12]
 8004818:	83fb      	strh	r3, [r7, #30]
 800481a:	e004      	b.n	8004826 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	4a38      	ldr	r2, [pc, #224]	; (8004900 <recvfrom+0x278>)
 8004820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004824:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8004826:	8bfb      	ldrh	r3, [r7, #30]
 8004828:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800482a:	8bfa      	ldrh	r2, [r7, #30]
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff f8cb 	bl	80039cc <wiz_recv_data>
			break;
 8004836:	e0d6      	b.n	80049e6 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	4a31      	ldr	r2, [pc, #196]	; (8004900 <recvfrom+0x278>)
 800483c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d146      	bne.n	80048d2 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8004844:	f107 0114 	add.w	r1, r7, #20
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2202      	movs	r2, #2
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff f8bd 	bl	80039cc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004852:	7bfb      	ldrb	r3, [r7, #15]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	3301      	adds	r3, #1
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800485e:	2140      	movs	r1, #64	; 0x40
 8004860:	4618      	mov	r0, r3
 8004862:	f7fe feb3 	bl	80035cc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004866:	bf00      	nop
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	3301      	adds	r3, #1
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe fe5d 	bl	8003534 <WIZCHIP_READ>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f3      	bne.n	8004868 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8004880:	7d3a      	ldrb	r2, [r7, #20]
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	b291      	uxth	r1, r2
 8004886:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <recvfrom+0x278>)
 8004888:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <recvfrom+0x278>)
 8004890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	b29a      	uxth	r2, r3
 8004898:	7d7b      	ldrb	r3, [r7, #21]
 800489a:	b29b      	uxth	r3, r3
 800489c:	4413      	add	r3, r2
 800489e:	b29a      	uxth	r2, r3
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	3a02      	subs	r2, #2
 80048a4:	b291      	uxth	r1, r2
 80048a6:	4a16      	ldr	r2, [pc, #88]	; (8004900 <recvfrom+0x278>)
 80048a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	4a14      	ldr	r2, [pc, #80]	; (8004900 <recvfrom+0x278>)
 80048b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b4:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d906      	bls.n	80048ca <recvfrom+0x242>
   			{
   			   close(sn);
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fa3c 	bl	8003d3c <close>
   			   return SOCKFATAL_PACKLEN;
 80048c4:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80048c8:	e0c4      	b.n	8004a54 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	4a0e      	ldr	r2, [pc, #56]	; (8004908 <recvfrom+0x280>)
 80048ce:	2180      	movs	r1, #128	; 0x80
 80048d0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <recvfrom+0x278>)
 80048d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048da:	89ba      	ldrh	r2, [r7, #12]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d202      	bcs.n	80048e6 <recvfrom+0x25e>
 80048e0:	89bb      	ldrh	r3, [r7, #12]
 80048e2:	83fb      	strh	r3, [r7, #30]
 80048e4:	e004      	b.n	80048f0 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	4a05      	ldr	r2, [pc, #20]	; (8004900 <recvfrom+0x278>)
 80048ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ee:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80048f0:	8bfa      	ldrh	r2, [r7, #30]
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff f868 	bl	80039cc <wiz_recv_data>
		   break;
 80048fc:	e073      	b.n	80049e6 <recvfrom+0x35e>
 80048fe:	bf00      	nop
 8004900:	20000a70 	.word	0x20000a70
 8004904:	20000a6c 	.word	0x20000a6c
 8004908:	20000a80 	.word	0x20000a80
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	4a53      	ldr	r2, [pc, #332]	; (8004a5c <recvfrom+0x3d4>)
 8004910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d144      	bne.n	80049a2 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8004918:	f107 0114 	add.w	r1, r7, #20
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	2206      	movs	r2, #6
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff f853 	bl	80039cc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	3301      	adds	r3, #1
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004932:	2140      	movs	r1, #64	; 0x40
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe fe49 	bl	80035cc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800493a:	bf00      	nop
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	3301      	adds	r3, #1
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe fdf3 	bl	8003534 <WIZCHIP_READ>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f3      	bne.n	800493c <recvfrom+0x2b4>
   			addr[0] = head[0];
 8004954:	7d3a      	ldrb	r2, [r7, #20]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3301      	adds	r3, #1
 800495e:	7d7a      	ldrb	r2, [r7, #21]
 8004960:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3302      	adds	r3, #2
 8004966:	7dba      	ldrb	r2, [r7, #22]
 8004968:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3303      	adds	r3, #3
 800496e:	7dfa      	ldrb	r2, [r7, #23]
 8004970:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8004972:	7e3a      	ldrb	r2, [r7, #24]
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	b291      	uxth	r1, r2
 8004978:	4a38      	ldr	r2, [pc, #224]	; (8004a5c <recvfrom+0x3d4>)
 800497a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	4a36      	ldr	r2, [pc, #216]	; (8004a5c <recvfrom+0x3d4>)
 8004982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	b299      	uxth	r1, r3
 800498a:	7e7b      	ldrb	r3, [r7, #25]
 800498c:	b29a      	uxth	r2, r3
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	440a      	add	r2, r1
 8004992:	b291      	uxth	r1, r2
 8004994:	4a31      	ldr	r2, [pc, #196]	; (8004a5c <recvfrom+0x3d4>)
 8004996:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	4a30      	ldr	r2, [pc, #192]	; (8004a60 <recvfrom+0x3d8>)
 800499e:	2180      	movs	r1, #128	; 0x80
 80049a0:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	4a2d      	ldr	r2, [pc, #180]	; (8004a5c <recvfrom+0x3d4>)
 80049a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049aa:	89ba      	ldrh	r2, [r7, #12]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d202      	bcs.n	80049b6 <recvfrom+0x32e>
 80049b0:	89bb      	ldrh	r3, [r7, #12]
 80049b2:	83fb      	strh	r3, [r7, #30]
 80049b4:	e004      	b.n	80049c0 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	4a28      	ldr	r2, [pc, #160]	; (8004a5c <recvfrom+0x3d4>)
 80049ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049be:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80049c0:	8bfa      	ldrh	r2, [r7, #30]
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff f800 	bl	80039cc <wiz_recv_data>
			break;
 80049cc:	e00b      	b.n	80049e6 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80049ce:	8bfa      	ldrh	r2, [r7, #30]
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff f855 	bl	8003a84 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	491f      	ldr	r1, [pc, #124]	; (8004a5c <recvfrom+0x3d4>)
 80049de:	8bfa      	ldrh	r2, [r7, #30]
 80049e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80049e4:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	3301      	adds	r3, #1
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80049f2:	2140      	movs	r1, #64	; 0x40
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe fde9 	bl	80035cc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80049fa:	bf00      	nop
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	3301      	adds	r3, #1
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe fd93 	bl	8003534 <WIZCHIP_READ>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f3      	bne.n	80049fc <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <recvfrom+0x3d4>)
 8004a18:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	8bfa      	ldrh	r2, [r7, #30]
 8004a20:	1a8a      	subs	r2, r1, r2
 8004a22:	b291      	uxth	r1, r2
 8004a24:	4a0d      	ldr	r2, [pc, #52]	; (8004a5c <recvfrom+0x3d4>)
 8004a26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	4a0b      	ldr	r2, [pc, #44]	; (8004a5c <recvfrom+0x3d4>)
 8004a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <recvfrom+0x3d8>)
 8004a3a:	5cd2      	ldrb	r2, [r2, r3]
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	b2d1      	uxtb	r1, r2
 8004a44:	4a06      	ldr	r2, [pc, #24]	; (8004a60 <recvfrom+0x3d8>)
 8004a46:	54d1      	strb	r1, [r2, r3]
 8004a48:	e003      	b.n	8004a52 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <recvfrom+0x3d8>)
 8004a4e:	2100      	movs	r1, #0
 8004a50:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8004a52:	8bfb      	ldrh	r3, [r7, #30]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3720      	adds	r7, #32
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000a70 	.word	0x20000a70
 8004a60:	20000a80 	.word	0x20000a80

08004a64 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	bf00      	nop
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	70fb      	strb	r3, [r7, #3]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	78fa      	ldrb	r2, [r7, #3]
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	2300      	movs	r3, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	4603      	mov	r3, r0
 8004ade:	71fb      	strb	r3, [r7, #7]
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr

08004aea <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	460b      	mov	r3, r1
 8004af4:	807b      	strh	r3, [r7, #2]
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	807b      	strh	r3, [r7, #2]
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr
	...

08004b18 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <reg_wizchip_cs_cbfunc+0x16>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004b2e:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <reg_wizchip_cs_cbfunc+0x3c>)
 8004b30:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <reg_wizchip_cs_cbfunc+0x40>)
 8004b32:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004b34:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <reg_wizchip_cs_cbfunc+0x3c>)
 8004b36:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <reg_wizchip_cs_cbfunc+0x44>)
 8004b38:	619a      	str	r2, [r3, #24]
 8004b3a:	e006      	b.n	8004b4a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004b3c:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <reg_wizchip_cs_cbfunc+0x3c>)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8004b42:	4a04      	ldr	r2, [pc, #16]	; (8004b54 <reg_wizchip_cs_cbfunc+0x3c>)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	6193      	str	r3, [r2, #24]
   }
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr
 8004b54:	20000050 	.word	0x20000050
 8004b58:	08004a7d 	.word	0x08004a7d
 8004b5c:	08004a89 	.word	0x08004a89

08004b60 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004b6a:	bf00      	nop
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <reg_wizchip_spi_cbfunc+0x4c>)
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f9      	beq.n	8004b6c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <reg_wizchip_spi_cbfunc+0x24>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004b84:	4b09      	ldr	r3, [pc, #36]	; (8004bac <reg_wizchip_spi_cbfunc+0x4c>)
 8004b86:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <reg_wizchip_spi_cbfunc+0x50>)
 8004b88:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <reg_wizchip_spi_cbfunc+0x4c>)
 8004b8c:	4a09      	ldr	r2, [pc, #36]	; (8004bb4 <reg_wizchip_spi_cbfunc+0x54>)
 8004b8e:	621a      	str	r2, [r3, #32]
 8004b90:	e006      	b.n	8004ba0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004b92:	4a06      	ldr	r2, [pc, #24]	; (8004bac <reg_wizchip_spi_cbfunc+0x4c>)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004b98:	4a04      	ldr	r2, [pc, #16]	; (8004bac <reg_wizchip_spi_cbfunc+0x4c>)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6213      	str	r3, [r2, #32]
   }
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	20000050 	.word	0x20000050
 8004bb0:	08004ac9 	.word	0x08004ac9
 8004bb4:	08004ad7 	.word	0x08004ad7

08004bb8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004bc2:	bf00      	nop
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f9      	beq.n	8004bc4 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <reg_wizchip_spiburst_cbfunc+0x24>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004bdc:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004bde:	4a0a      	ldr	r2, [pc, #40]	; (8004c08 <reg_wizchip_spiburst_cbfunc+0x50>)
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004be4:	4a09      	ldr	r2, [pc, #36]	; (8004c0c <reg_wizchip_spiburst_cbfunc+0x54>)
 8004be6:	629a      	str	r2, [r3, #40]	; 0x28
 8004be8:	e006      	b.n	8004bf8 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8004bea:	4a06      	ldr	r2, [pc, #24]	; (8004c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8004bf0:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000050 	.word	0x20000050
 8004c08:	08004aeb 	.word	0x08004aeb
 8004c0c:	08004b01 	.word	0x08004b01

08004c10 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8004c10:	b590      	push	{r4, r7, lr}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	6039      	str	r1, [r7, #0]
 8004c1a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	2300      	movs	r3, #0
 8004c26:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	2b0f      	cmp	r3, #15
 8004c2c:	f200 80c7 	bhi.w	8004dbe <ctlwizchip+0x1ae>
 8004c30:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <ctlwizchip+0x28>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c79 	.word	0x08004c79
 8004c3c:	08004c7f 	.word	0x08004c7f
 8004c40:	08004cab 	.word	0x08004cab
 8004c44:	08004c9f 	.word	0x08004c9f
 8004c48:	08004cb9 	.word	0x08004cb9
 8004c4c:	08004cc5 	.word	0x08004cc5
 8004c50:	08004cd3 	.word	0x08004cd3
 8004c54:	08004cf9 	.word	0x08004cf9
 8004c58:	08004d1f 	.word	0x08004d1f
 8004c5c:	08004d63 	.word	0x08004d63
 8004c60:	08004d69 	.word	0x08004d69
 8004c64:	08004d71 	.word	0x08004d71
 8004c68:	08004dc5 	.word	0x08004dc5
 8004c6c:	08004d79 	.word	0x08004d79
 8004c70:	08004d87 	.word	0x08004d87
 8004c74:	08004da3 	.word	0x08004da3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8004c78:	f000 f8ac 	bl	8004dd4 <wizchip_sw_reset>
         break;
 8004c7c:	e0a3      	b.n	8004dc6 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d004      	beq.n	8004c8e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 f8e9 	bl	8004e6c <wizchip_init>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	e094      	b.n	8004dc8 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f96e 	bl	8004f84 <wizchip_clrinterrupt>
         break;
 8004ca8:	e08d      	b.n	8004dc6 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8004caa:	f000 f99f 	bl	8004fec <wizchip_getinterrupt>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	801a      	strh	r2, [r3, #0]
         break;
 8004cb6:	e086      	b.n	8004dc6 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 f9ba 	bl	8005036 <wizchip_setinterruptmask>
         break;         
 8004cc2:	e080      	b.n	8004dc6 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8004cc4:	f000 f9d2 	bl	800506c <wizchip_getinterruptmask>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	461a      	mov	r2, r3
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	801a      	strh	r2, [r3, #0]
         break;
 8004cd0:	e079      	b.n	8004dc6 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	0a1b      	lsrs	r3, r3, #8
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	4619      	mov	r1, r3
 8004cde:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8004ce2:	f7fe fc73 	bl	80035cc <WIZCHIP_WRITE>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	4619      	mov	r1, r3
 8004cee:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8004cf2:	f7fe fc6b 	bl	80035cc <WIZCHIP_WRITE>
         break;
 8004cf6:	e066      	b.n	8004dc6 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8004cf8:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8004cfc:	f7fe fc1a 	bl	8003534 <WIZCHIP_READ>
 8004d00:	4603      	mov	r3, r0
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	b29c      	uxth	r4, r3
 8004d08:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8004d0c:	f7fe fc12 	bl	8003534 <WIZCHIP_READ>
 8004d10:	4603      	mov	r3, r0
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	4423      	add	r3, r4
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	801a      	strh	r2, [r3, #0]
         break;
 8004d1c:	e053      	b.n	8004dc6 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8004d1e:	4b2c      	ldr	r3, [pc, #176]	; (8004dd0 <ctlwizchip+0x1c0>)
 8004d20:	789a      	ldrb	r2, [r3, #2]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	4a29      	ldr	r2, [pc, #164]	; (8004dd0 <ctlwizchip+0x1c0>)
 8004d2c:	78d2      	ldrb	r2, [r2, #3]
 8004d2e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	3302      	adds	r3, #2
 8004d34:	4a26      	ldr	r2, [pc, #152]	; (8004dd0 <ctlwizchip+0x1c0>)
 8004d36:	7912      	ldrb	r2, [r2, #4]
 8004d38:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	3303      	adds	r3, #3
 8004d3e:	4a24      	ldr	r2, [pc, #144]	; (8004dd0 <ctlwizchip+0x1c0>)
 8004d40:	7952      	ldrb	r2, [r2, #5]
 8004d42:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4a21      	ldr	r2, [pc, #132]	; (8004dd0 <ctlwizchip+0x1c0>)
 8004d4a:	7992      	ldrb	r2, [r2, #6]
 8004d4c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	3305      	adds	r3, #5
 8004d52:	4a1f      	ldr	r2, [pc, #124]	; (8004dd0 <ctlwizchip+0x1c0>)
 8004d54:	79d2      	ldrb	r2, [r2, #7]
 8004d56:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	3306      	adds	r3, #6
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
         break;
 8004d60:	e031      	b.n	8004dc6 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8004d62:	f000 f9d5 	bl	8005110 <wizphy_reset>
         break;
 8004d66:	e02e      	b.n	8004dc6 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8004d68:	6838      	ldr	r0, [r7, #0]
 8004d6a:	f000 f9f8 	bl	800515e <wizphy_setphyconf>
         break;
 8004d6e:	e02a      	b.n	8004dc6 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8004d70:	6838      	ldr	r0, [r7, #0]
 8004d72:	f000 fa37 	bl	80051e4 <wizphy_getphyconf>
         break;
 8004d76:	e026      	b.n	8004dc6 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fa9b 	bl	80052b8 <wizphy_setphypmode>
 8004d82:	4603      	mov	r3, r0
 8004d84:	e020      	b.n	8004dc8 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8004d86:	f000 f9aa 	bl	80050de <wizphy_getphypmode>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	2bff      	cmp	r3, #255	; 0xff
 8004d92:	d102      	bne.n	8004d9a <ctlwizchip+0x18a>
 8004d94:	f04f 33ff 	mov.w	r3, #4294967295
 8004d98:	e016      	b.n	8004dc8 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	7dfa      	ldrb	r2, [r7, #23]
 8004d9e:	701a      	strb	r2, [r3, #0]
         break;
 8004da0:	e011      	b.n	8004dc6 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8004da2:	f000 f986 	bl	80050b2 <wizphy_getphylink>
 8004da6:	4603      	mov	r3, r0
 8004da8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
 8004dac:	2bff      	cmp	r3, #255	; 0xff
 8004dae:	d102      	bne.n	8004db6 <ctlwizchip+0x1a6>
 8004db0:	f04f 33ff 	mov.w	r3, #4294967295
 8004db4:	e008      	b.n	8004dc8 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	7dfa      	ldrb	r2, [r7, #23]
 8004dba:	701a      	strb	r2, [r3, #0]
         break;
 8004dbc:	e003      	b.n	8004dc6 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8004dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc2:	e001      	b.n	8004dc8 <ctlwizchip+0x1b8>
         break;
 8004dc4:	bf00      	nop
   }
   return 0;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	371c      	adds	r7, #28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd90      	pop	{r4, r7, pc}
 8004dd0:	20000050 	.word	0x20000050

08004dd4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004dda:	1d3b      	adds	r3, r7, #4
 8004ddc:	2206      	movs	r2, #6
 8004dde:	4619      	mov	r1, r3
 8004de0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004de4:	f7fe fc40 	bl	8003668 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004de8:	f107 0314 	add.w	r3, r7, #20
 8004dec:	2204      	movs	r2, #4
 8004dee:	4619      	mov	r1, r3
 8004df0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004df4:	f7fe fc38 	bl	8003668 <WIZCHIP_READ_BUF>
 8004df8:	f107 0310 	add.w	r3, r7, #16
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	4619      	mov	r1, r3
 8004e00:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004e04:	f7fe fc30 	bl	8003668 <WIZCHIP_READ_BUF>
 8004e08:	f107 030c 	add.w	r3, r7, #12
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	4619      	mov	r1, r3
 8004e10:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004e14:	f7fe fc28 	bl	8003668 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004e18:	2180      	movs	r1, #128	; 0x80
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	f7fe fbd6 	bl	80035cc <WIZCHIP_WRITE>
   getMR(); // for delay
 8004e20:	2000      	movs	r0, #0
 8004e22:	f7fe fb87 	bl	8003534 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004e26:	1d3b      	adds	r3, r7, #4
 8004e28:	2206      	movs	r2, #6
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004e30:	f7fe fc7a 	bl	8003728 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004e34:	f107 0314 	add.w	r3, r7, #20
 8004e38:	2204      	movs	r2, #4
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004e40:	f7fe fc72 	bl	8003728 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004e44:	f107 0310 	add.w	r3, r7, #16
 8004e48:	2204      	movs	r2, #4
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004e50:	f7fe fc6a 	bl	8003728 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004e54:	f107 030c 	add.w	r3, r7, #12
 8004e58:	2204      	movs	r2, #4
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004e60:	f7fe fc62 	bl	8003728 <WIZCHIP_WRITE_BUF>
}
 8004e64:	bf00      	nop
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004e7a:	f7ff ffab 	bl	8004dd4 <wizchip_sw_reset>
   if(txsize)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d03b      	beq.n	8004efc <wizchip_init+0x90>
   {
      tmp = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	73fb      	strb	r3, [r7, #15]
 8004e8c:	e015      	b.n	8004eba <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8004e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	4413      	add	r3, r2
 8004e96:	781a      	ldrb	r2, [r3, #0]
 8004e98:	7bbb      	ldrb	r3, [r7, #14]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	dd02      	ble.n	8004eae <wizchip_init+0x42>
 8004ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8004eac:	e066      	b.n	8004f7c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	73fb      	strb	r3, [r7, #15]
 8004eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ebe:	2b07      	cmp	r3, #7
 8004ec0:	dde5      	ble.n	8004e8e <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	73fb      	strb	r3, [r7, #15]
 8004ec6:	e015      	b.n	8004ef4 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	3301      	adds	r3, #1
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	4413      	add	r3, r2
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	f7fe fb72 	bl	80035cc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ef8:	2b07      	cmp	r3, #7
 8004efa:	dde5      	ble.n	8004ec8 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d03b      	beq.n	8004f7a <wizchip_init+0x10e>
   {
      tmp = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	73fb      	strb	r3, [r7, #15]
 8004f0a:	e015      	b.n	8004f38 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8004f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	4413      	add	r3, r2
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	7bbb      	ldrb	r3, [r7, #14]
 8004f18:	4413      	add	r3, r2
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004f1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	dd02      	ble.n	8004f2c <wizchip_init+0xc0>
 8004f26:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2a:	e027      	b.n	8004f7c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	3301      	adds	r3, #1
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	73fb      	strb	r3, [r7, #15]
 8004f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f3c:	2b07      	cmp	r3, #7
 8004f3e:	dde5      	ble.n	8004f0c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f40:	2300      	movs	r3, #0
 8004f42:	73fb      	strb	r3, [r7, #15]
 8004f44:	e015      	b.n	8004f72 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8004f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8004f54:	4618      	mov	r0, r3
 8004f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	4619      	mov	r1, r3
 8004f62:	f7fe fb33 	bl	80035cc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	73fb      	strb	r3, [r7, #15]
 8004f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f76:	2b07      	cmp	r3, #7
 8004f78:	dde5      	ble.n	8004f46 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	0a1b      	lsrs	r3, r3, #8
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	f023 030f 	bic.w	r3, r3, #15
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8004fa8:	f7fe fb10 	bl	80035cc <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8004fac:	2300      	movs	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]
 8004fb0:	e014      	b.n	8004fdc <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8004fb2:	7bba      	ldrb	r2, [r7, #14]
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	fa42 f303 	asr.w	r3, r2, r3
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d009      	beq.n	8004fd6 <wizchip_clrinterrupt+0x52>
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004fce:	211f      	movs	r1, #31
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe fafb 	bl	80035cc <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	73fb      	strb	r3, [r7, #15]
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b07      	cmp	r3, #7
 8004fe0:	d9e7      	bls.n	8004fb2 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8004ffe:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8005002:	f7fe fa97 	bl	8003534 <WIZCHIP_READ>
 8005006:	4603      	mov	r3, r0
 8005008:	f023 030f 	bic.w	r3, r3, #15
 800500c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800500e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8005012:	f7fe fa8f 	bl	8003534 <WIZCHIP_READ>
 8005016:	4603      	mov	r3, r0
 8005018:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800501a:	79bb      	ldrb	r3, [r7, #6]
 800501c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800501e:	88bb      	ldrh	r3, [r7, #4]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	b29a      	uxth	r2, r3
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	b29b      	uxth	r3, r3
 8005028:	4413      	add	r3, r2
 800502a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800502c:	88bb      	ldrh	r3, [r7, #4]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	4603      	mov	r3, r0
 800503e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8005044:	88fb      	ldrh	r3, [r7, #6]
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	b29b      	uxth	r3, r3
 800504a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	4619      	mov	r1, r3
 8005050:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8005054:	f7fe faba 	bl	80035cc <WIZCHIP_WRITE>
   setSIMR(simr);
 8005058:	7bbb      	ldrb	r3, [r7, #14]
 800505a:	4619      	mov	r1, r3
 800505c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8005060:	f7fe fab4 	bl	80035cc <WIZCHIP_WRITE>
#endif   
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800507e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8005082:	f7fe fa57 	bl	8003534 <WIZCHIP_READ>
 8005086:	4603      	mov	r3, r0
 8005088:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800508a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800508e:	f7fe fa51 	bl	8003534 <WIZCHIP_READ>
 8005092:	4603      	mov	r3, r0
 8005094:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8005096:	79bb      	ldrb	r3, [r7, #6]
 8005098:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800509a:	88bb      	ldrh	r3, [r7, #4]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	b29a      	uxth	r2, r3
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	4413      	add	r3, r2
 80050a6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80050a8:	88bb      	ldrh	r3, [r7, #4]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80050b8:	2300      	movs	r3, #0
 80050ba:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80050bc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80050c0:	f7fe fa38 	bl	8003534 <WIZCHIP_READ>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80050ce:	2301      	movs	r3, #1
 80050d0:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80050d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80050e8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80050ec:	f7fe fa22 	bl	8003534 <WIZCHIP_READ>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050f6:	2b30      	cmp	r3, #48	; 0x30
 80050f8:	d102      	bne.n	8005100 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80050fa:	2301      	movs	r3, #1
 80050fc:	71fb      	strb	r3, [r7, #7]
 80050fe:	e001      	b.n	8005104 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8005100:	2300      	movs	r3, #0
 8005102:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8005104:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8005116:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800511a:	f7fe fa0b 	bl	8003534 <WIZCHIP_READ>
 800511e:	4603      	mov	r3, r0
 8005120:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005128:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	4619      	mov	r1, r3
 800512e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005132:	f7fe fa4b 	bl	80035cc <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8005136:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800513a:	f7fe f9fb 	bl	8003534 <WIZCHIP_READ>
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005148:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	4619      	mov	r1, r3
 800514e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005152:	f7fe fa3b 	bl	80035cc <WIZCHIP_WRITE>
}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d104      	bne.n	800517c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005178:	73fb      	strb	r3, [r7, #15]
 800517a:	e003      	b.n	8005184 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005182:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d104      	bne.n	8005196 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8005192:	73fb      	strb	r3, [r7, #15]
 8005194:	e019      	b.n	80051ca <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	78db      	ldrb	r3, [r3, #3]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d10d      	bne.n	80051ba <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	789b      	ldrb	r3, [r3, #2]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d104      	bne.n	80051b0 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	f043 0318 	orr.w	r3, r3, #24
 80051ac:	73fb      	strb	r3, [r7, #15]
 80051ae:	e00c      	b.n	80051ca <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	f043 0308 	orr.w	r3, r3, #8
 80051b6:	73fb      	strb	r3, [r7, #15]
 80051b8:	e007      	b.n	80051ca <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	789b      	ldrb	r3, [r3, #2]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d103      	bne.n	80051ca <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	f043 0310 	orr.w	r3, r3, #16
 80051c8:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	4619      	mov	r1, r3
 80051ce:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80051d2:	f7fe f9fb 	bl	80035cc <WIZCHIP_WRITE>
   wizphy_reset();
 80051d6:	f7ff ff9b 	bl	8005110 <wizphy_reset>
}
 80051da:	bf00      	nop
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80051f0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80051f4:	f7fe f99e 	bl	8003534 <WIZCHIP_READ>
 80051f8:	4603      	mov	r3, r0
 80051fa:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	119b      	asrs	r3, r3, #6
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	b2da      	uxtb	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005212:	2b20      	cmp	r3, #32
 8005214:	d001      	beq.n	800521a <wizphy_getphyconf+0x36>
 8005216:	2b38      	cmp	r3, #56	; 0x38
 8005218:	d103      	bne.n	8005222 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	705a      	strb	r2, [r3, #1]
         break;
 8005220:	e003      	b.n	800522a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	705a      	strb	r2, [r3, #1]
         break;
 8005228:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005230:	3b10      	subs	r3, #16
 8005232:	2b10      	cmp	r3, #16
 8005234:	bf8c      	ite	hi
 8005236:	2201      	movhi	r2, #1
 8005238:	2200      	movls	r2, #0
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	2a00      	cmp	r2, #0
 800523e:	d10f      	bne.n	8005260 <wizphy_getphyconf+0x7c>
 8005240:	4a1b      	ldr	r2, [pc, #108]	; (80052b0 <wizphy_getphyconf+0xcc>)
 8005242:	fa22 f303 	lsr.w	r3, r2, r3
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	bf14      	ite	ne
 800524e:	2301      	movne	r3, #1
 8005250:	2300      	moveq	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	709a      	strb	r2, [r3, #2]
         break;
 800525e:	e003      	b.n	8005268 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	709a      	strb	r2, [r3, #2]
         break;
 8005266:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800526e:	3b08      	subs	r3, #8
 8005270:	2b18      	cmp	r3, #24
 8005272:	bf8c      	ite	hi
 8005274:	2201      	movhi	r2, #1
 8005276:	2200      	movls	r2, #0
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	2a00      	cmp	r2, #0
 800527c:	d10f      	bne.n	800529e <wizphy_getphyconf+0xba>
 800527e:	4a0d      	ldr	r2, [pc, #52]	; (80052b4 <wizphy_getphyconf+0xd0>)
 8005280:	fa22 f303 	lsr.w	r3, r2, r3
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf14      	ite	ne
 800528c:	2301      	movne	r3, #1
 800528e:	2300      	moveq	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	70da      	strb	r2, [r3, #3]
         break;
 800529c:	e003      	b.n	80052a6 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	70da      	strb	r2, [r3, #3]
         break;
 80052a4:	bf00      	nop
   }
}
 80052a6:	bf00      	nop
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	00010101 	.word	0x00010101
 80052b4:	01010001 	.word	0x01010001

080052b8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80052c6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80052ca:	f7fe f933 	bl	8003534 <WIZCHIP_READ>
 80052ce:	4603      	mov	r3, r0
 80052d0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <wizphy_setphypmode+0x2a>
 80052dc:	f04f 33ff 	mov.w	r3, #4294967295
 80052e0:	e030      	b.n	8005344 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80052e8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d104      	bne.n	80052fa <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80052f6:	73fb      	strb	r3, [r7, #15]
 80052f8:	e003      	b.n	8005302 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
 80052fc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8005300:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	4619      	mov	r1, r3
 8005306:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800530a:	f7fe f95f 	bl	80035cc <WIZCHIP_WRITE>
   wizphy_reset();
 800530e:	f7ff feff 	bl	8005110 <wizphy_reset>
   tmp = getPHYCFGR();
 8005312:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005316:	f7fe f90d 	bl	8003534 <WIZCHIP_READ>
 800531a:	4603      	mov	r3, r0
 800531c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d106      	bne.n	8005332 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800532a:	2b00      	cmp	r3, #0
 800532c:	d008      	beq.n	8005340 <wizphy_setphypmode+0x88>
 800532e:	2300      	movs	r3, #0
 8005330:	e008      	b.n	8005344 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <wizphy_setphypmode+0x88>
 800533c:	2300      	movs	r3, #0
 800533e:	e001      	b.n	8005344 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8005340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2206      	movs	r2, #6
 8005358:	4619      	mov	r1, r3
 800535a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800535e:	f7fe f9e3 	bl	8003728 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	330e      	adds	r3, #14
 8005366:	2204      	movs	r2, #4
 8005368:	4619      	mov	r1, r3
 800536a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800536e:	f7fe f9db 	bl	8003728 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	330a      	adds	r3, #10
 8005376:	2204      	movs	r2, #4
 8005378:	4619      	mov	r1, r3
 800537a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800537e:	f7fe f9d3 	bl	8003728 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3306      	adds	r3, #6
 8005386:	2204      	movs	r2, #4
 8005388:	4619      	mov	r1, r3
 800538a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800538e:	f7fe f9cb 	bl	8003728 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	7c9a      	ldrb	r2, [r3, #18]
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <wizchip_setnetinfo+0x78>)
 8005398:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7cda      	ldrb	r2, [r3, #19]
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <wizchip_setnetinfo+0x78>)
 80053a0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	7d1a      	ldrb	r2, [r3, #20]
 80053a6:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <wizchip_setnetinfo+0x78>)
 80053a8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	7d5a      	ldrb	r2, [r3, #21]
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <wizchip_setnetinfo+0x78>)
 80053b0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	7d9a      	ldrb	r2, [r3, #22]
 80053b6:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <wizchip_setnetinfo+0x7c>)
 80053b8:	701a      	strb	r2, [r3, #0]
}
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000a88 	.word	0x20000a88
 80053c8:	20000a8c 	.word	0x20000a8c

080053cc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2206      	movs	r2, #6
 80053d8:	4619      	mov	r1, r3
 80053da:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80053de:	f7fe f943 	bl	8003668 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	330e      	adds	r3, #14
 80053e6:	2204      	movs	r2, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80053ee:	f7fe f93b 	bl	8003668 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	330a      	adds	r3, #10
 80053f6:	2204      	movs	r2, #4
 80053f8:	4619      	mov	r1, r3
 80053fa:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80053fe:	f7fe f933 	bl	8003668 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3306      	adds	r3, #6
 8005406:	2204      	movs	r2, #4
 8005408:	4619      	mov	r1, r3
 800540a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800540e:	f7fe f92b 	bl	8003668 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8005412:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <wizchip_getnetinfo+0x78>)
 8005414:	781a      	ldrb	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800541a:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <wizchip_getnetinfo+0x78>)
 800541c:	785a      	ldrb	r2, [r3, #1]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8005422:	4b08      	ldr	r3, [pc, #32]	; (8005444 <wizchip_getnetinfo+0x78>)
 8005424:	789a      	ldrb	r2, [r3, #2]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <wizchip_getnetinfo+0x78>)
 800542c:	78da      	ldrb	r2, [r3, #3]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8005432:	4b05      	ldr	r3, [pc, #20]	; (8005448 <wizchip_getnetinfo+0x7c>)
 8005434:	781a      	ldrb	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	759a      	strb	r2, [r3, #22]
}
 800543a:	bf00      	nop
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000a88 	.word	0x20000a88
 8005448:	20000a8c 	.word	0x20000a8c

0800544c <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	607a      	str	r2, [r7, #4]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	b29a      	uxth	r2, r3
 8005468:	89fb      	ldrh	r3, [r7, #14]
 800546a:	4413      	add	r3, r2
 800546c:	81fb      	strh	r3, [r7, #14]
	return i;
 800546e:	89fb      	ldrh	r3, [r7, #14]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 8005486:	887b      	ldrh	r3, [r7, #2]
 8005488:	0a1b      	lsrs	r3, r3, #8
 800548a:	b299      	uxth	r1, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	607a      	str	r2, [r7, #4]
 8005492:	b2ca      	uxtb	r2, r1
 8005494:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	887a      	ldrh	r2, [r7, #2]
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]
	return s;
 80054a2:	687b      	ldr	r3, [r7, #4]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b08b      	sub	sp, #44	; 0x2c
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
 80054ba:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 80054bc:	2300      	movs	r3, #0
 80054be:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 80054c0:	2300      	movs	r3, #0
 80054c2:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]

	cp = compressed;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	623a      	str	r2, [r7, #32]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d102      	bne.n	80054e2 <parse_name+0x34>
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	3301      	adds	r3, #1
 80054e0:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 80054e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054e8:	2bc0      	cmp	r3, #192	; 0xc0
 80054ea:	d117      	bne.n	800551c <parse_name+0x6e>
		{
			if (!indirect)
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d102      	bne.n	80054f8 <parse_name+0x4a>
				clen++;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	3301      	adds	r3, #1
 80054f6:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 80054f8:	2301      	movs	r3, #1
 80054fa:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 80054fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005504:	6a3a      	ldr	r2, [r7, #32]
 8005506:	7812      	ldrb	r2, [r2, #0]
 8005508:	4413      	add	r3, r2
 800550a:	461a      	mov	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	623a      	str	r2, [r7, #32]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 800551c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800551e:	2b00      	cmp	r3, #0
 8005520:	d02b      	beq.n	800557a <parse_name+0xcc>
			break;

		len -= slen + 1;
 8005522:	887a      	ldrh	r2, [r7, #2]
 8005524:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8005530:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005534:	2b00      	cmp	r3, #0
 8005536:	da02      	bge.n	800553e <parse_name+0x90>
 8005538:	f04f 33ff 	mov.w	r3, #4294967295
 800553c:	e038      	b.n	80055b0 <parse_name+0x102>

		if (!indirect) clen += slen;
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10c      	bne.n	800555e <parse_name+0xb0>
 8005544:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 800554c:	e007      	b.n	800555e <parse_name+0xb0>
 800554e:	6a3a      	ldr	r2, [r7, #32]
 8005550:	1c53      	adds	r3, r2, #1
 8005552:	623b      	str	r3, [r7, #32]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	6079      	str	r1, [r7, #4]
 800555a:	7812      	ldrb	r2, [r2, #0]
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005560:	1e5a      	subs	r2, r3, #1
 8005562:	84fa      	strh	r2, [r7, #38]	; 0x26
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1f2      	bne.n	800554e <parse_name+0xa0>
		*buf++ = '.';
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	222e      	movs	r2, #46	; 0x2e
 8005570:	701a      	strb	r2, [r3, #0]
		nseg++;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	3301      	adds	r3, #1
 8005576:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 8005578:	e7a8      	b.n	80054cc <parse_name+0x1e>
			break;
 800557a:	bf00      	nop
	}

	if (nseg == 0)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	222e      	movs	r2, #46	; 0x2e
 800558a:	701a      	strb	r2, [r3, #0]
		len--;
 800558c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005590:	b29b      	uxth	r3, r3
 8005592:	3b01      	subs	r3, #1
 8005594:	b29b      	uxth	r3, r3
 8005596:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	607a      	str	r2, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]
	len--;
 80055a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 80055ae:	69fb      	ldr	r3, [r7, #28]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	372c      	adds	r7, #44	; 0x2c
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bc80      	pop	{r7}
 80055b8:	4770      	bx	lr

080055ba <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b0b4      	sub	sp, #208	; 0xd0
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 80055c4:	f107 020c 	add.w	r2, r7, #12
 80055c8:	23c0      	movs	r3, #192	; 0xc0
 80055ca:	6839      	ldr	r1, [r7, #0]
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff ff6e 	bl	80054ae <parse_name>
 80055d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 80055d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d101      	bne.n	80055e4 <dns_question+0x2a>
 80055e0:	2300      	movs	r3, #0
 80055e2:	e00b      	b.n	80055fc <dns_question+0x42>

	cp += len;
 80055e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	4413      	add	r3, r2
 80055ec:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	3302      	adds	r3, #2
 80055f2:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	3302      	adds	r3, #2
 80055f8:	603b      	str	r3, [r7, #0]

	return cp;
 80055fa:	683b      	ldr	r3, [r7, #0]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	37d0      	adds	r7, #208	; 0xd0
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b0b6      	sub	sp, #216	; 0xd8
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8005610:	f107 0210 	add.w	r2, r7, #16
 8005614:	23c0      	movs	r3, #192	; 0xc0
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7ff ff48 	bl	80054ae <parse_name>
 800561e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 8005622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562a:	d101      	bne.n	8005630 <dns_answer+0x2c>
 800562c:	2300      	movs	r3, #0
 800562e:	e0f9      	b.n	8005824 <dns_answer+0x220>

	cp += len;
 8005630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	4413      	add	r3, r2
 8005638:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 800563a:	68b8      	ldr	r0, [r7, #8]
 800563c:	f7ff ff06 	bl	800544c <get16>
 8005640:	4603      	mov	r3, r0
 8005642:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	3302      	adds	r3, #2
 800564a:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	3302      	adds	r3, #2
 8005650:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	3304      	adds	r3, #4
 8005656:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	3302      	adds	r3, #2
 800565c:	60bb      	str	r3, [r7, #8]


	switch (type)
 800565e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005662:	2b10      	cmp	r3, #16
 8005664:	f000 80da 	beq.w	800581c <dns_answer+0x218>
 8005668:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800566c:	2b10      	cmp	r3, #16
 800566e:	f300 80d7 	bgt.w	8005820 <dns_answer+0x21c>
 8005672:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005676:	2b0f      	cmp	r3, #15
 8005678:	d07d      	beq.n	8005776 <dns_answer+0x172>
 800567a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800567e:	2b0f      	cmp	r3, #15
 8005680:	f300 80ce 	bgt.w	8005820 <dns_answer+0x21c>
 8005684:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005688:	2b0c      	cmp	r3, #12
 800568a:	dc26      	bgt.n	80056da <dns_answer+0xd6>
 800568c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005690:	2b00      	cmp	r3, #0
 8005692:	f340 80c5 	ble.w	8005820 <dns_answer+0x21c>
 8005696:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800569a:	2201      	movs	r2, #1
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	f241 32a4 	movw	r2, #5028	; 0x13a4
 80056a4:	401a      	ands	r2, r3
 80056a6:	2a00      	cmp	r2, #0
 80056a8:	bf14      	ite	ne
 80056aa:	2201      	movne	r2, #1
 80056ac:	2200      	moveq	r2, #0
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	2a00      	cmp	r2, #0
 80056b2:	d133      	bne.n	800571c <dns_answer+0x118>
 80056b4:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80056b8:	2a00      	cmp	r2, #0
 80056ba:	bf14      	ite	ne
 80056bc:	2201      	movne	r2, #1
 80056be:	2200      	moveq	r2, #0
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	2a00      	cmp	r2, #0
 80056c4:	d170      	bne.n	80057a8 <dns_answer+0x1a4>
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bf14      	ite	ne
 80056ce:	2301      	movne	r3, #1
 80056d0:	2300      	moveq	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d105      	bne.n	80056e4 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 80056d8:	e0a2      	b.n	8005820 <dns_answer+0x21c>
	switch (type)
 80056da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80056de:	2b0d      	cmp	r3, #13
 80056e0:	d032      	beq.n	8005748 <dns_answer+0x144>
		break;
 80056e2:	e09d      	b.n	8005820 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	60ba      	str	r2, [r7, #8]
 80056ea:	781a      	ldrb	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	60ba      	str	r2, [r7, #8]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	3201      	adds	r2, #1
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	60ba      	str	r2, [r7, #8]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	3202      	adds	r2, #2
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	60ba      	str	r2, [r7, #8]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	3203      	adds	r2, #3
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	7013      	strb	r3, [r2, #0]
		break;
 800571a:	e082      	b.n	8005822 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 800571c:	f107 0210 	add.w	r2, r7, #16
 8005720:	23c0      	movs	r3, #192	; 0xc0
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff fec2 	bl	80054ae <parse_name>
 800572a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800572e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d101      	bne.n	800573c <dns_answer+0x138>
 8005738:	2300      	movs	r3, #0
 800573a:	e073      	b.n	8005824 <dns_answer+0x220>
		cp += len;
 800573c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	4413      	add	r3, r2
 8005744:	60bb      	str	r3, [r7, #8]
		break;
 8005746:	e06c      	b.n	8005822 <dns_answer+0x21e>
		len = *cp++;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	60ba      	str	r2, [r7, #8]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 8005754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	4413      	add	r3, r2
 800575c:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	60ba      	str	r2, [r7, #8]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 800576a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	4413      	add	r3, r2
 8005772:	60bb      	str	r3, [r7, #8]
		break;
 8005774:	e055      	b.n	8005822 <dns_answer+0x21e>
		cp += 2;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	3302      	adds	r3, #2
 800577a:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 800577c:	f107 0210 	add.w	r2, r7, #16
 8005780:	23c0      	movs	r3, #192	; 0xc0
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f7ff fe92 	bl	80054ae <parse_name>
 800578a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800578e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d101      	bne.n	800579c <dns_answer+0x198>
 8005798:	2300      	movs	r3, #0
 800579a:	e043      	b.n	8005824 <dns_answer+0x220>
		cp += len;
 800579c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	4413      	add	r3, r2
 80057a4:	60bb      	str	r3, [r7, #8]
		break;
 80057a6:	e03c      	b.n	8005822 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 80057a8:	f107 0210 	add.w	r2, r7, #16
 80057ac:	23c0      	movs	r3, #192	; 0xc0
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff fe7c 	bl	80054ae <parse_name>
 80057b6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80057ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d101      	bne.n	80057c8 <dns_answer+0x1c4>
 80057c4:	2300      	movs	r3, #0
 80057c6:	e02d      	b.n	8005824 <dns_answer+0x220>
		cp += len;
 80057c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	4413      	add	r3, r2
 80057d0:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 80057d2:	f107 0210 	add.w	r2, r7, #16
 80057d6:	23c0      	movs	r3, #192	; 0xc0
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f7ff fe67 	bl	80054ae <parse_name>
 80057e0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80057e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d101      	bne.n	80057f2 <dns_answer+0x1ee>
 80057ee:	2300      	movs	r3, #0
 80057f0:	e018      	b.n	8005824 <dns_answer+0x220>
		cp += len;
 80057f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	4413      	add	r3, r2
 80057fa:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	3304      	adds	r3, #4
 8005800:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	3304      	adds	r3, #4
 8005806:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	3304      	adds	r3, #4
 800580c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	3304      	adds	r3, #4
 8005812:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	3304      	adds	r3, #4
 8005818:	60bb      	str	r3, [r7, #8]
		break;
 800581a:	e002      	b.n	8005822 <dns_answer+0x21e>
		break;
 800581c:	bf00      	nop
 800581e:	e000      	b.n	8005822 <dns_answer+0x21e>
		break;
 8005820:	bf00      	nop
	}

	return cp;
 8005822:	68bb      	ldr	r3, [r7, #8]
}
 8005824:	4618      	mov	r0, r3
 8005826:	37d8      	adds	r7, #216	; 0xd8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 800583c:	2212      	movs	r2, #18
 800583e:	2100      	movs	r1, #0
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f002 fe9f 	bl	8008584 <memset>

	pdhdr->id = get16(&msg[0]);
 8005846:	6978      	ldr	r0, [r7, #20]
 8005848:	f7ff fe00 	bl	800544c <get16>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	3302      	adds	r3, #2
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fdf7 	bl	800544c <get16>
 800585e:	4603      	mov	r3, r0
 8005860:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 8005862:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005866:	2b00      	cmp	r3, #0
 8005868:	da02      	bge.n	8005870 <parseDNSMSG+0x44>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8005870:	8a7b      	ldrh	r3, [r7, #18]
 8005872:	0adb      	lsrs	r3, r3, #11
 8005874:	b29b      	uxth	r3, r3
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f003 030f 	and.w	r3, r3, #15
 800587c:	b2da      	uxtb	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 8005882:	8a7b      	ldrh	r3, [r7, #18]
 8005884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <parseDNSMSG+0x66>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8005892:	8a7b      	ldrh	r3, [r7, #18]
 8005894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <parseDNSMSG+0x76>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 80058a2:	8a7b      	ldrh	r3, [r7, #18]
 80058a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <parseDNSMSG+0x86>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 80058b2:	8a7b      	ldrh	r3, [r7, #18]
 80058b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <parseDNSMSG+0x96>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 80058c2:	8a7b      	ldrh	r3, [r7, #18]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fdb9 	bl	800544c <get16>
 80058da:	4603      	mov	r3, r0
 80058dc:	461a      	mov	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	3306      	adds	r3, #6
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff fdb0 	bl	800544c <get16>
 80058ec:	4603      	mov	r3, r0
 80058ee:	461a      	mov	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	3308      	adds	r3, #8
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fda7 	bl	800544c <get16>
 80058fe:	4603      	mov	r3, r0
 8005900:	461a      	mov	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	330a      	adds	r3, #10
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff fd9e 	bl	800544c <get16>
 8005910:	4603      	mov	r3, r0
 8005912:	461a      	mov	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	330c      	adds	r3, #12
 800591c:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 800591e:	2300      	movs	r3, #0
 8005920:	83fb      	strh	r3, [r7, #30]
 8005922:	e00d      	b.n	8005940 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 8005924:	69b9      	ldr	r1, [r7, #24]
 8005926:	6978      	ldr	r0, [r7, #20]
 8005928:	f7ff fe47 	bl	80055ba <dns_question>
 800592c:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d102      	bne.n	800593a <parseDNSMSG+0x10e>
 8005934:	f04f 33ff 	mov.w	r3, #4294967295
 8005938:	e03b      	b.n	80059b2 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 800593a:	8bfb      	ldrh	r3, [r7, #30]
 800593c:	3301      	adds	r3, #1
 800593e:	83fb      	strh	r3, [r7, #30]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	895b      	ldrh	r3, [r3, #10]
 8005944:	8bfa      	ldrh	r2, [r7, #30]
 8005946:	429a      	cmp	r2, r3
 8005948:	d3ec      	bcc.n	8005924 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 800594a:	2300      	movs	r3, #0
 800594c:	83fb      	strh	r3, [r7, #30]
 800594e:	e00e      	b.n	800596e <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	69b9      	ldr	r1, [r7, #24]
 8005954:	6978      	ldr	r0, [r7, #20]
 8005956:	f7ff fe55 	bl	8005604 <dns_answer>
 800595a:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d102      	bne.n	8005968 <parseDNSMSG+0x13c>
 8005962:	f04f 33ff 	mov.w	r3, #4294967295
 8005966:	e024      	b.n	80059b2 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8005968:	8bfb      	ldrh	r3, [r7, #30]
 800596a:	3301      	adds	r3, #1
 800596c:	83fb      	strh	r3, [r7, #30]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	899b      	ldrh	r3, [r3, #12]
 8005972:	8bfa      	ldrh	r2, [r7, #30]
 8005974:	429a      	cmp	r2, r3
 8005976:	d3eb      	bcc.n	8005950 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8005978:	2300      	movs	r3, #0
 800597a:	83fb      	strh	r3, [r7, #30]
 800597c:	e002      	b.n	8005984 <parseDNSMSG+0x158>
 800597e:	8bfb      	ldrh	r3, [r7, #30]
 8005980:	3301      	adds	r3, #1
 8005982:	83fb      	strh	r3, [r7, #30]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	89db      	ldrh	r3, [r3, #14]
 8005988:	8bfa      	ldrh	r2, [r7, #30]
 800598a:	429a      	cmp	r2, r3
 800598c:	d3f7      	bcc.n	800597e <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 800598e:	2300      	movs	r3, #0
 8005990:	83fb      	strh	r3, [r7, #30]
 8005992:	e002      	b.n	800599a <parseDNSMSG+0x16e>
 8005994:	8bfb      	ldrh	r3, [r7, #30]
 8005996:	3301      	adds	r3, #1
 8005998:	83fb      	strh	r3, [r7, #30]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8a1b      	ldrh	r3, [r3, #16]
 800599e:	8bfa      	ldrh	r2, [r7, #30]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d3f7      	bcc.n	8005994 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	7a1b      	ldrb	r3, [r3, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <parseDNSMSG+0x184>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <parseDNSMSG+0x186>
	else return 0;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3720      	adds	r7, #32
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b0b8      	sub	sp, #224	; 0xe0
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	607a      	str	r2, [r7, #4]
 80059c6:	461a      	mov	r2, r3
 80059c8:	4603      	mov	r3, r0
 80059ca:	81fb      	strh	r3, [r7, #14]
 80059cc:	4613      	mov	r3, r2
 80059ce:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 80059d6:	4b57      	ldr	r3, [pc, #348]	; (8005b34 <dns_makequery+0x178>)
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	3301      	adds	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	4b55      	ldr	r3, [pc, #340]	; (8005b34 <dns_makequery+0x178>)
 80059e0:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 80059e2:	4b54      	ldr	r3, [pc, #336]	; (8005b34 <dns_makequery+0x178>)
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	4619      	mov	r1, r3
 80059e8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80059ec:	f7ff fd45 	bl	800547a <put16>
 80059f0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 80059f4:	89fb      	ldrh	r3, [r7, #14]
 80059f6:	02db      	lsls	r3, r3, #11
 80059f8:	b21b      	sxth	r3, r3
 80059fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059fe:	b21b      	sxth	r3, r3
 8005a00:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 8005a04:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8005a08:	4619      	mov	r1, r3
 8005a0a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8005a0e:	f7ff fd34 	bl	800547a <put16>
 8005a12:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 8005a16:	2101      	movs	r1, #1
 8005a18:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8005a1c:	f7ff fd2d 	bl	800547a <put16>
 8005a20:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8005a24:	2100      	movs	r1, #0
 8005a26:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8005a2a:	f7ff fd26 	bl	800547a <put16>
 8005a2e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8005a32:	2100      	movs	r1, #0
 8005a34:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8005a38:	f7ff fd1f 	bl	800547a <put16>
 8005a3c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8005a40:	2100      	movs	r1, #0
 8005a42:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8005a46:	f7ff fd18 	bl	800547a <put16>
 8005a4a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 8005a4e:	f107 0310 	add.w	r3, r7, #16
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f002 fe56 	bl	8008706 <strcpy>
	dname = sname;
 8005a5a:	f107 0310 	add.w	r3, r7, #16
 8005a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 8005a62:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8005a66:	f7fa fb73 	bl	8000150 <strlen>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8005a70:	212e      	movs	r1, #46	; 0x2e
 8005a72:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8005a76:	f002 fd8d 	bl	8008594 <strchr>
 8005a7a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8005a7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d006      	beq.n	8005a94 <dns_makequery+0xd8>
 8005a86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	81bb      	strh	r3, [r7, #12]
 8005a92:	e002      	b.n	8005a9a <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8005a94:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8005a98:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8005a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005aa4:	89ba      	ldrh	r2, [r7, #12]
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8005aaa:	89bb      	ldrh	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d029      	beq.n	8005b04 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8005ab0:	89bb      	ldrh	r3, [r7, #12]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005ab8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8005abc:	f002 fd89 	bl	80085d2 <strncpy>
		cp += len;
 8005ac0:	89bb      	ldrh	r3, [r7, #12]
 8005ac2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 8005acc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d107      	bne.n	8005ae4 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8005ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]
			break;
 8005ae2:	e010      	b.n	8005b06 <dns_makequery+0x14a>
		}
		dname += len+1;
 8005ae4:	89bb      	ldrh	r3, [r7, #12]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005aec:	4413      	add	r3, r2
 8005aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 8005af2:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8005af6:	89bb      	ldrh	r3, [r7, #12]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 8005b02:	e7b5      	b.n	8005a70 <dns_makequery+0xb4>
		if (len == 0) break;
 8005b04:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8005b06:	2101      	movs	r1, #1
 8005b08:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8005b0c:	f7ff fcb5 	bl	800547a <put16>
 8005b10:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8005b14:	2101      	movs	r1, #1
 8005b16:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8005b1a:	f7ff fcae 	bl	800547a <put16>
 8005b1e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 8005b22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	b21b      	sxth	r3, r3
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	37e0      	adds	r7, #224	; 0xe0
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20002c98 	.word	0x20002c98

08005b38 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8005b3c:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <check_DNS_timeout+0x40>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d914      	bls.n	8005b6e <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8005b44:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <check_DNS_timeout+0x40>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <check_DNS_timeout+0x44>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d905      	bls.n	8005b5e <check_DNS_timeout+0x26>
			retry_count = 0;
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <check_DNS_timeout+0x44>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8005b58:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5c:	e008      	b.n	8005b70 <check_DNS_timeout+0x38>
		}
		retry_count++;
 8005b5e:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <check_DNS_timeout+0x44>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	3301      	adds	r3, #1
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <check_DNS_timeout+0x44>)
 8005b68:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e000      	b.n	8005b70 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 8005b6e:	2301      	movs	r3, #1
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr
 8005b78:	20002c90 	.word	0x20002c90
 8005b7c:	20000a8d 	.word	0x20000a8d

08005b80 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	4603      	mov	r3, r0
 8005b88:	6039      	str	r1, [r7, #0]
 8005b8a:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8005b8c:	4a07      	ldr	r2, [pc, #28]	; (8005bac <DNS_init+0x2c>)
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8005b92:	4a07      	ldr	r2, [pc, #28]	; (8005bb0 <DNS_init+0x30>)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8005b98:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <DNS_init+0x34>)
 8005b9a:	f241 1222 	movw	r2, #4386	; 0x1122
 8005b9e:	801a      	strh	r2, [r3, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bc80      	pop	{r7}
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	20002c8c 	.word	0x20002c8c
 8005bb0:	20002c94 	.word	0x20002c94
 8005bb4:	20002c98 	.word	0x20002c98

08005bb8 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8005bb8:	b590      	push	{r4, r7, lr}
 8005bba:	b08f      	sub	sp, #60	; 0x3c
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8005bc4:	4b3b      	ldr	r3, [pc, #236]	; (8005cb4 <DNS_run+0xfc>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 8005bca:	4b3b      	ldr	r3, [pc, #236]	; (8005cb8 <DNS_run+0x100>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8005bd0:	4b3a      	ldr	r3, [pc, #232]	; (8005cbc <DNS_run+0x104>)
 8005bd2:	7818      	ldrb	r0, [r3, #0]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2102      	movs	r1, #2
 8005bda:	f7fd ff9b 	bl	8003b14 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8005bde:	4b38      	ldr	r3, [pc, #224]	; (8005cc0 <DNS_run+0x108>)
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	2000      	movs	r0, #0
 8005bea:	f7ff fee7 	bl	80059bc <dns_makequery>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8005bf2:	4b32      	ldr	r3, [pc, #200]	; (8005cbc <DNS_run+0x104>)
 8005bf4:	7818      	ldrb	r0, [r3, #0]
 8005bf6:	4b32      	ldr	r3, [pc, #200]	; (8005cc0 <DNS_run+0x108>)
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005bfc:	2335      	movs	r3, #53	; 0x35
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f7fe fc0b 	bl	800441c <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8005c06:	4b2d      	ldr	r3, [pc, #180]	; (8005cbc <DNS_run+0x104>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fd fe37 	bl	800387e <getSn_RX_RSR>
 8005c10:	4603      	mov	r3, r0
 8005c12:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005c14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d029      	beq.n	8005c6e <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8005c1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c20:	d902      	bls.n	8005c28 <DNS_run+0x70>
 8005c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c26:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8005c28:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <DNS_run+0x104>)
 8005c2a:	7818      	ldrb	r0, [r3, #0]
 8005c2c:	4b24      	ldr	r3, [pc, #144]	; (8005cc0 <DNS_run+0x108>)
 8005c2e:	6819      	ldr	r1, [r3, #0]
 8005c30:	f107 0414 	add.w	r4, r7, #20
 8005c34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c36:	f107 0312 	add.w	r3, r7, #18
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	f7fe fd23 	bl	8004688 <recvfrom>
 8005c42:	4603      	mov	r3, r0
 8005c44:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8005c46:	4b1e      	ldr	r3, [pc, #120]	; (8005cc0 <DNS_run+0x108>)
 8005c48:	6819      	ldr	r1, [r3, #0]
 8005c4a:	f107 0318 	add.w	r3, r7, #24
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff fdeb 	bl	800582c <parseDNSMSG>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 8005c5c:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8005c5e:	4b17      	ldr	r3, [pc, #92]	; (8005cbc <DNS_run+0x104>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe f86a 	bl	8003d3c <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8005c68:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8005c6c:	e01e      	b.n	8005cac <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 8005c6e:	f7ff ff63 	bl	8005b38 <check_DNS_timeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 8005c78:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da06      	bge.n	8005c8e <DNS_run+0xd6>
			close(DNS_SOCKET);
 8005c80:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <DNS_run+0x104>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fe f859 	bl	8003d3c <close>
			return 0; // timeout occurred
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e00e      	b.n	8005cac <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 8005c8e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1b7      	bne.n	8005c06 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8005c96:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <DNS_run+0x104>)
 8005c98:	7818      	ldrb	r0, [r3, #0]
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <DNS_run+0x108>)
 8005c9c:	6819      	ldr	r1, [r3, #0]
 8005c9e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005ca0:	2335      	movs	r3, #53	; 0x35
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f7fe fbb9 	bl	800441c <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8005caa:	e7ac      	b.n	8005c06 <DNS_run+0x4e>
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3734      	adds	r7, #52	; 0x34
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd90      	pop	{r4, r7, pc}
 8005cb4:	20000a8d 	.word	0x20000a8d
 8005cb8:	20002c90 	.word	0x20002c90
 8005cbc:	20002c8c 	.word	0x20002c8c
 8005cc0:	20002c94 	.word	0x20002c94

08005cc4 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	601a      	str	r2, [r3, #0]
}
 8005cdc:	bf00      	nop
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr

08005ce6 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d003      	beq.n	8005d02 <getNextPacketId+0x1c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	e000      	b.n	8005d04 <getNextPacketId+0x1e>
 8005d02:	2301      	movs	r3, #1
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr

08005d16 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8005d16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d18:	b087      	sub	sp, #28
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8005d22:	f04f 33ff 	mov.w	r3, #4294967295
 8005d26:	617b      	str	r3, [r7, #20]
        sent = 0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8005d2c:	e018      	b.n	8005d60 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d32:	689c      	ldr	r4, [r3, #8]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	18d6      	adds	r6, r2, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fd8f 	bl	8006864 <TimerLeftMS>
 8005d46:	4603      	mov	r3, r0
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47a0      	blx	r4
 8005d50:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	db0e      	blt.n	8005d76 <sendPacket+0x60>
            break;
        sent += rc;
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	da07      	bge.n	8005d78 <sendPacket+0x62>
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fd3f 	bl	80067ec <TimerIsExpired>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0dc      	beq.n	8005d2e <sendPacket+0x18>
 8005d74:	e000      	b.n	8005d78 <sendPacket+0x62>
            break;
 8005d76:	bf00      	nop
    }
    if (sent == length)
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d10b      	bne.n	8005d98 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f000 fd53 	bl	8006838 <TimerCountdown>
        rc = SUCCESSS;
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	e002      	b.n	8005d9e <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8005d98:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9c:	617b      	str	r3, [r7, #20]
    return rc;
 8005d9e:	697b      	ldr	r3, [r7, #20]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005da8 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	e009      	b.n	8005dd6 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	4413      	add	r3, r2
 8005dcc:	2200      	movs	r2, #0
 8005dce:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	ddf2      	ble.n	8005dc2 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a3a      	ldr	r2, [r7, #32]
 8005dec:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df2:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005df8:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3354      	adds	r3, #84	; 0x54
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fcdc 	bl	80067d4 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 8005e1c:	bf00      	nop
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b08b      	sub	sp, #44	; 0x2c
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8005e30:	2301      	movs	r3, #1
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8005e38:	2304      	movs	r3, #4
 8005e3a:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8005e42:	f04f 33ff 	mov.w	r3, #4294967295
 8005e46:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	623b      	str	r3, [r7, #32]
 8005e4e:	6a3a      	ldr	r2, [r7, #32]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	dd03      	ble.n	8005e5e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8005e56:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5a:	61bb      	str	r3, [r7, #24]
            goto exit;
 8005e5c:	e021      	b.n	8005ea2 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e62:	685c      	ldr	r4, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005e68:	f107 0117 	add.w	r1, r7, #23
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	47a0      	blx	r4
 8005e72:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d112      	bne.n	8005ea0 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e86:	fb01 f303 	mul.w	r3, r1, r3
 8005e8a:	441a      	add	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	01db      	lsls	r3, r3, #7
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	b25b      	sxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	dbd1      	blt.n	8005e42 <decodePacket+0x1e>
exit:
 8005e9e:	e000      	b.n	8005ea2 <decodePacket+0x7e>
            goto exit;
 8005ea0:	bf00      	nop
    return len;
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	372c      	adds	r7, #44	; 0x2c
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd90      	pop	{r4, r7, pc}

08005eac <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8005eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eae:	b089      	sub	sp, #36	; 0x24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8005eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eba:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]
    int len = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ecc:	685c      	ldr	r4, [r3, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	695e      	ldr	r6, [r3, #20]
 8005ed6:	68b8      	ldr	r0, [r7, #8]
 8005ed8:	f000 fcc4 	bl	8006864 <TimerLeftMS>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2201      	movs	r2, #1
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47a0      	blx	r4
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d13b      	bne.n	8005f64 <readPacket+0xb8>
        goto exit;

    len = 1;
 8005eec:	2301      	movs	r3, #1
 8005eee:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8005ef0:	68b8      	ldr	r0, [r7, #8]
 8005ef2:	f000 fcb7 	bl	8006864 <TimerLeftMS>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	f107 0310 	add.w	r3, r7, #16
 8005efc:	4619      	mov	r1, r3
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f7ff ff90 	bl	8005e24 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 f809 	bl	8006f26 <MQTTPacket_encode>
 8005f14:	4602      	mov	r2, r0
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	4413      	add	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	dd16      	ble.n	8005f50 <readPacket+0xa4>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f26:	685c      	ldr	r4, [r3, #4]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	695a      	ldr	r2, [r3, #20]
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	18d6      	adds	r6, r2, r3
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	607b      	str	r3, [r7, #4]
 8005f38:	68b8      	ldr	r0, [r7, #8]
 8005f3a:	f000 fc93 	bl	8006864 <TimerLeftMS>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	4631      	mov	r1, r6
 8005f44:	4628      	mov	r0, r5
 8005f46:	47a0      	blx	r4
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d10b      	bne.n	8005f68 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8005f58:	7d3b      	ldrb	r3, [r7, #20]
 8005f5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	61fb      	str	r3, [r7, #28]
 8005f62:	e002      	b.n	8005f6a <readPacket+0xbe>
        goto exit;
 8005f64:	bf00      	nop
 8005f66:	e000      	b.n	8005f6a <readPacket+0xbe>
        goto exit;
 8005f68:	bf00      	nop
exit:
    return rc;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3724      	adds	r7, #36	; 0x24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f74 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	4413      	add	r3, r2
 8005f92:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8005f94:	e039      	b.n	800600a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b2f      	cmp	r3, #47	; 0x2f
 8005f9c:	d103      	bne.n	8005fa6 <isTopicMatched+0x32>
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b2f      	cmp	r3, #47	; 0x2f
 8005fa4:	d13a      	bne.n	800601c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b2b      	cmp	r3, #43	; 0x2b
 8005fac:	d009      	beq.n	8005fc2 <isTopicMatched+0x4e>
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b23      	cmp	r3, #35	; 0x23
 8005fb4:	d005      	beq.n	8005fc2 <isTopicMatched+0x4e>
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d12e      	bne.n	8006020 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b2b      	cmp	r3, #43	; 0x2b
 8005fc8:	d112      	bne.n	8005ff0 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8005fd0:	e005      	b.n	8005fde <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	613b      	str	r3, [r7, #16]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d20b      	bcs.n	8005ffe <isTopicMatched+0x8a>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b2f      	cmp	r3, #47	; 0x2f
 8005fec:	d1f1      	bne.n	8005fd2 <isTopicMatched+0x5e>
 8005fee:	e006      	b.n	8005ffe <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b23      	cmp	r3, #35	; 0x23
 8005ff6:	d102      	bne.n	8005ffe <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	613b      	str	r3, [r7, #16]
        curf++;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	3301      	adds	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
        curn++;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	3301      	adds	r3, #1
 8006008:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <isTopicMatched+0xae>
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	429a      	cmp	r2, r3
 8006018:	d3bd      	bcc.n	8005f96 <isTopicMatched+0x22>
 800601a:	e002      	b.n	8006022 <isTopicMatched+0xae>
            break;
 800601c:	bf00      	nop
 800601e:	e000      	b.n	8006022 <isTopicMatched+0xae>
            break;
 8006020:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	429a      	cmp	r2, r3
 8006028:	d105      	bne.n	8006036 <isTopicMatched+0xc2>
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <isTopicMatched+0xc2>
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <isTopicMatched+0xc4>
 8006036:	2300      	movs	r3, #0
 8006038:	b2db      	uxtb	r3, r3
}
 800603a:	4618      	mov	r0, r3
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr

08006044 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08a      	sub	sp, #40	; 0x28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8006050:	f04f 33ff 	mov.w	r3, #4294967295
 8006054:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8006056:	2300      	movs	r3, #0
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
 800605a:	e03f      	b.n	80060dc <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	3304      	adds	r3, #4
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4413      	add	r3, r2
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d034      	beq.n	80060d6 <deliverMessage+0x92>
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	3304      	adds	r3, #4
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	4413      	add	r3, r2
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4619      	mov	r1, r3
 800607a:	68b8      	ldr	r0, [r7, #8]
 800607c:	f001 f91e 	bl	80072bc <MQTTPacket_equals>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10c      	bne.n	80060a0 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	3304      	adds	r3, #4
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	4413      	add	r3, r2
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff ff6d 	bl	8005f74 <isTopicMatched>
 800609a:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01a      	beq.n	80060d6 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	3304      	adds	r3, #4
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4413      	add	r3, r2
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d012      	beq.n	80060d6 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 80060b0:	f107 0318 	add.w	r3, r7, #24
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff fe03 	bl	8005cc4 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	3304      	adds	r3, #4
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4413      	add	r3, r2
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f107 0218 	add.w	r2, r7, #24
 80060ce:	4610      	mov	r0, r2
 80060d0:	4798      	blx	r3
                rc = SUCCESSS;
 80060d2:	2300      	movs	r3, #0
 80060d4:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	3301      	adds	r3, #1
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	2b04      	cmp	r3, #4
 80060e0:	ddbc      	ble.n	800605c <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d112      	bne.n	8006110 <deliverMessage+0xcc>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00e      	beq.n	8006110 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 80060f2:	f107 0310 	add.w	r3, r7, #16
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fde2 	bl	8005cc4 <NewMessageData>
        c->defaultMessageHandler(&md);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006104:	f107 0210 	add.w	r2, r7, #16
 8006108:	4610      	mov	r0, r2
 800610a:	4798      	blx	r3
        rc = SUCCESSS;
 800610c:	2300      	movs	r3, #0
 800610e:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8006110:	6a3b      	ldr	r3, [r7, #32]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3728      	adds	r7, #40	; 0x28
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <keepalive>:


int keepalive(MQTTClient* c)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b086      	sub	sp, #24
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8006122:	f04f 33ff 	mov.w	r3, #4294967295
 8006126:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
        goto exit;
 8006134:	e033      	b.n	800619e <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3354      	adds	r3, #84	; 0x54
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fb56 	bl	80067ec <TimerIsExpired>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d02a      	beq.n	800619c <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	7f1b      	ldrb	r3, [r3, #28]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d126      	bne.n	800619c <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 800614e:	f107 0308 	add.w	r3, r7, #8
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fb3e 	bl	80067d4 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8006158:	f107 0308 	add.w	r3, r7, #8
 800615c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fb57 	bl	8006814 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	4619      	mov	r1, r3
 8006170:	4610      	mov	r0, r2
 8006172:	f000 fe0c 	bl	8006d8e <MQTTSerialize_pingreq>
 8006176:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	dd0f      	ble.n	800619e <keepalive+0x84>
 800617e:	f107 0308 	add.w	r3, r7, #8
 8006182:	461a      	mov	r2, r3
 8006184:	6939      	ldr	r1, [r7, #16]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fdc5 	bl	8005d16 <sendPacket>
 800618c:	6178      	str	r0, [r7, #20]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <keepalive+0x84>
                c->ping_outstanding = 1;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	771a      	strb	r2, [r3, #28]
 800619a:	e000      	b.n	800619e <keepalive+0x84>
        }
    }

exit:
 800619c:	bf00      	nop
    return rc;
 800619e:	697b      	ldr	r3, [r7, #20]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 80061a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061aa:	b095      	sub	sp, #84	; 0x54
 80061ac:	af06      	add	r7, sp, #24
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff fe79 	bl	8005eac <readPacket>
 80061ba:	4603      	mov	r3, r0
 80061bc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 80061be:	2300      	movs	r3, #0
 80061c0:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 80061c2:	2300      	movs	r3, #0
 80061c4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 80061c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061c8:	3b02      	subs	r3, #2
 80061ca:	2b0b      	cmp	r3, #11
 80061cc:	f200 80c0 	bhi.w	8006350 <cycle+0x1a8>
 80061d0:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <cycle+0x30>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	08006351 	.word	0x08006351
 80061dc:	08006209 	.word	0x08006209
 80061e0:	08006351 	.word	0x08006351
 80061e4:	080062d1 	.word	0x080062d1
 80061e8:	08006351 	.word	0x08006351
 80061ec:	08006351 	.word	0x08006351
 80061f0:	08006351 	.word	0x08006351
 80061f4:	08006351 	.word	0x08006351
 80061f8:	08006351 	.word	0x08006351
 80061fc:	08006351 	.word	0x08006351
 8006200:	08006351 	.word	0x08006351
 8006204:	08006343 	.word	0x08006343
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8006210:	4616      	mov	r6, r2
 8006212:	f107 0210 	add.w	r2, r7, #16
 8006216:	1d15      	adds	r5, r2, #4
 8006218:	f107 0210 	add.w	r2, r7, #16
 800621c:	1c54      	adds	r4, r2, #1
 800621e:	f107 010c 	add.w	r1, r7, #12
 8006222:	f107 0210 	add.w	r2, r7, #16
 8006226:	1c90      	adds	r0, r2, #2
 8006228:	9604      	str	r6, [sp, #16]
 800622a:	9303      	str	r3, [sp, #12]
 800622c:	f107 0310 	add.w	r3, r7, #16
 8006230:	330c      	adds	r3, #12
 8006232:	9302      	str	r3, [sp, #8]
 8006234:	f107 0310 	add.w	r3, r7, #16
 8006238:	3308      	adds	r3, #8
 800623a:	9301      	str	r3, [sp, #4]
 800623c:	f107 0320 	add.w	r3, r7, #32
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	462b      	mov	r3, r5
 8006244:	4622      	mov	r2, r4
 8006246:	f000 fdb1 	bl	8006dac <MQTTDeserialize_publish>
 800624a:	4603      	mov	r3, r0
 800624c:	2b01      	cmp	r3, #1
 800624e:	f040 8083 	bne.w	8006358 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8006258:	f107 0210 	add.w	r2, r7, #16
 800625c:	f107 0320 	add.w	r3, r7, #32
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff feee 	bl	8006044 <deliverMessage>
            if (msg.qos != QOS0)
 8006268:	7c3b      	ldrb	r3, [r7, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d06d      	beq.n	800634a <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 800626e:	7c3b      	ldrb	r3, [r7, #16]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d10c      	bne.n	800628e <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6918      	ldr	r0, [r3, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4619      	mov	r1, r3
 800627e:	8abb      	ldrh	r3, [r7, #20]
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	2300      	movs	r3, #0
 8006284:	2204      	movs	r2, #4
 8006286:	f001 f8e6 	bl	8007456 <MQTTSerialize_ack>
 800628a:	6378      	str	r0, [r7, #52]	; 0x34
 800628c:	e00e      	b.n	80062ac <cycle+0x104>
                else if (msg.qos == QOS2)
 800628e:	7c3b      	ldrb	r3, [r7, #16]
 8006290:	2b02      	cmp	r3, #2
 8006292:	d10b      	bne.n	80062ac <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6918      	ldr	r0, [r3, #16]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	4619      	mov	r1, r3
 800629e:	8abb      	ldrh	r3, [r7, #20]
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	2300      	movs	r3, #0
 80062a4:	2205      	movs	r2, #5
 80062a6:	f001 f8d6 	bl	8007456 <MQTTSerialize_ack>
 80062aa:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 80062ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	dc03      	bgt.n	80062ba <cycle+0x112>
                    rc = FAILURE;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	633b      	str	r3, [r7, #48]	; 0x30
 80062b8:	e005      	b.n	80062c6 <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fd29 	bl	8005d16 <sendPacket>
 80062c4:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d13d      	bne.n	800634a <cycle+0x1a2>
                    goto exit; // there was a problem
 80062ce:	e044      	b.n	800635a <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	695c      	ldr	r4, [r3, #20]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f107 020a 	add.w	r2, r7, #10
 80062dc:	f107 0109 	add.w	r1, r7, #9
 80062e0:	f107 0008 	add.w	r0, r7, #8
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	4623      	mov	r3, r4
 80062e8:	f000 fdd2 	bl	8006e90 <MQTTDeserialize_ack>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d003      	beq.n	80062fa <cycle+0x152>
                rc = FAILURE;
 80062f2:	f04f 33ff 	mov.w	r3, #4294967295
 80062f6:	633b      	str	r3, [r7, #48]	; 0x30
 80062f8:	e01e      	b.n	8006338 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6918      	ldr	r0, [r3, #16]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	4619      	mov	r1, r3
 8006304:	897b      	ldrh	r3, [r7, #10]
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	2300      	movs	r3, #0
 800630a:	2206      	movs	r2, #6
 800630c:	f001 f8a3 	bl	8007456 <MQTTSerialize_ack>
 8006310:	6378      	str	r0, [r7, #52]	; 0x34
 8006312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006314:	2b00      	cmp	r3, #0
 8006316:	dc03      	bgt.n	8006320 <cycle+0x178>
                rc = FAILURE;
 8006318:	f04f 33ff 	mov.w	r3, #4294967295
 800631c:	633b      	str	r3, [r7, #48]	; 0x30
 800631e:	e00b      	b.n	8006338 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff fcf6 	bl	8005d16 <sendPacket>
 800632a:	6338      	str	r0, [r7, #48]	; 0x30
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <cycle+0x190>
                rc = FAILURE; // there was a problem
 8006332:	f04f 33ff 	mov.w	r3, #4294967295
 8006336:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d106      	bne.n	800634e <cycle+0x1a6>
                goto exit; // there was a problem
 8006340:	e00b      	b.n	800635a <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	771a      	strb	r2, [r3, #28]
            break;
 8006348:	e002      	b.n	8006350 <cycle+0x1a8>
            break;
 800634a:	bf00      	nop
 800634c:	e000      	b.n	8006350 <cycle+0x1a8>
            break;
 800634e:	bf00      	nop
    }
    keepalive(c);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff fee2 	bl	800611a <keepalive>
 8006356:	e000      	b.n	800635a <cycle+0x1b2>
                goto exit;
 8006358:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <cycle+0x1bc>
        rc = packet_type;
 8006360:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006362:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006366:	4618      	mov	r0, r3
 8006368:	373c      	adds	r7, #60	; 0x3c
 800636a:	46bd      	mov	sp, r7
 800636c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800636e:	bf00      	nop

08006370 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 800637e:	f107 030c 	add.w	r3, r7, #12
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fa26 	bl	80067d4 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	f107 030c 	add.w	r3, r7, #12
 800638e:	4611      	mov	r1, r2
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fa3f 	bl	8006814 <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 8006396:	f107 030c 	add.w	r3, r7, #12
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff ff03 	bl	80061a8 <cycle>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d102      	bne.n	80063b0 <MQTTYield+0x40>
    {
        rc = FAILURE;
 80063aa:	f04f 33ff 	mov.w	r3, #4294967295
 80063ae:	617b      	str	r3, [r7, #20]
    }

    return rc;
 80063b0:	697b      	ldr	r3, [r7, #20]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b086      	sub	sp, #24
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 80063c6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ca:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fa0d 	bl	80067ec <TimerIsExpired>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d109      	bne.n	80063ec <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7ff fee4 	bl	80061a8 <cycle>
 80063e0:	6178      	str	r0, [r7, #20]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d1f0      	bne.n	80063cc <waitfor+0x12>
 80063ea:	e000      	b.n	80063ee <waitfor+0x34>
            break; // we timed out
 80063ec:	bf00      	nop

    return rc;
 80063ee:	697b      	ldr	r3, [r7, #20]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b09e      	sub	sp, #120	; 0x78
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 8006402:	f04f 33ff 	mov.w	r3, #4294967295
 8006406:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8006408:	4a3d      	ldr	r2, [pc, #244]	; (8006500 <MQTTConnect+0x108>)
 800640a:	f107 0310 	add.w	r3, r7, #16
 800640e:	4611      	mov	r1, r2
 8006410:	2258      	movs	r2, #88	; 0x58
 8006412:	4618      	mov	r0, r3
 8006414:	f002 f98d 	bl	8008732 <memcpy>
    int len = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d15d      	bne.n	80064e0 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 8006424:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006428:	4618      	mov	r0, r3
 800642a:	f000 f9d3 	bl	80067d4 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006436:	4611      	mov	r1, r2
 8006438:	4618      	mov	r0, r3
 800643a:	f000 f9eb 	bl	8006814 <TimerCountdownMS>

    if (options == 0)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 8006444:	f107 0310 	add.w	r3, r7, #16
 8006448:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	8b1b      	ldrh	r3, [r3, #24]
 800644e:	461a      	mov	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f000 f9e9 	bl	8006838 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6918      	ldr	r0, [r3, #16]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	4619      	mov	r1, r3
 8006472:	f000 fb13 	bl	8006a9c <MQTTSerialize_connect>
 8006476:	6738      	str	r0, [r7, #112]	; 0x70
 8006478:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800647a:	2b00      	cmp	r3, #0
 800647c:	dd32      	ble.n	80064e4 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 800647e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006482:	461a      	mov	r2, r3
 8006484:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff fc45 	bl	8005d16 <sendPacket>
 800648c:	6778      	str	r0, [r7, #116]	; 0x74
 800648e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006490:	2b00      	cmp	r3, #0
 8006492:	d129      	bne.n	80064e8 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8006494:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006498:	461a      	mov	r2, r3
 800649a:	2102      	movs	r1, #2
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff ff8c 	bl	80063ba <waitfor>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d117      	bne.n	80064d8 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 80064a8:	23ff      	movs	r3, #255	; 0xff
 80064aa:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695a      	ldr	r2, [r3, #20]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f107 010f 	add.w	r1, r7, #15
 80064bc:	f107 000e 	add.w	r0, r7, #14
 80064c0:	f000 fbd8 	bl	8006c74 <MQTTDeserialize_connack>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d102      	bne.n	80064d0 <MQTTConnect+0xd8>
            rc = connack_rc;
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	677b      	str	r3, [r7, #116]	; 0x74
 80064ce:	e00c      	b.n	80064ea <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 80064d0:	f04f 33ff 	mov.w	r3, #4294967295
 80064d4:	677b      	str	r3, [r7, #116]	; 0x74
 80064d6:	e008      	b.n	80064ea <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 80064d8:	f04f 33ff 	mov.w	r3, #4294967295
 80064dc:	677b      	str	r3, [r7, #116]	; 0x74
 80064de:	e004      	b.n	80064ea <MQTTConnect+0xf2>
		goto exit;
 80064e0:	bf00      	nop
 80064e2:	e002      	b.n	80064ea <MQTTConnect+0xf2>
        goto exit;
 80064e4:	bf00      	nop
 80064e6:	e000      	b.n	80064ea <MQTTConnect+0xf2>
        goto exit; // there was a problem
 80064e8:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 80064ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d102      	bne.n	80064f6 <MQTTConnect+0xfe>
        c->isconnected = 1;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 80064f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3778      	adds	r7, #120	; 0x78
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	0800a774 	.word	0x0800a774

08006504 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8006504:	b5b0      	push	{r4, r5, r7, lr}
 8006506:	b094      	sub	sp, #80	; 0x50
 8006508:	af04      	add	r7, sp, #16
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	4613      	mov	r3, r2
 8006512:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8006514:	f04f 33ff 	mov.w	r3, #4294967295
 8006518:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 800651e:	2300      	movs	r3, #0
 8006520:	623b      	str	r3, [r7, #32]
 8006522:	2300      	movs	r3, #0
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
 8006526:	2300      	movs	r3, #0
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 8083 	beq.w	8006642 <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 800653c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006540:	4618      	mov	r0, r3
 8006542:	f000 f947 	bl	80067d4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800654e:	4611      	mov	r1, r2
 8006550:	4618      	mov	r0, r3
 8006552:	f000 f95f 	bl	8006814 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	691c      	ldr	r4, [r3, #16]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	461d      	mov	r5, r3
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f7ff fbc0 	bl	8005ce6 <getNextPacketId>
 8006566:	4603      	mov	r3, r0
 8006568:	b29a      	uxth	r2, r3
 800656a:	f107 031f 	add.w	r3, r7, #31
 800656e:	9302      	str	r3, [sp, #8]
 8006570:	f107 0320 	add.w	r3, r7, #32
 8006574:	9301      	str	r3, [sp, #4]
 8006576:	2301      	movs	r3, #1
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	4613      	mov	r3, r2
 800657c:	2200      	movs	r2, #0
 800657e:	4629      	mov	r1, r5
 8006580:	4620      	mov	r0, r4
 8006582:	f000 ffe4 	bl	800754e <MQTTSerialize_subscribe>
 8006586:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 8006588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658a:	2b00      	cmp	r3, #0
 800658c:	dd5b      	ble.n	8006646 <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800658e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006592:	461a      	mov	r2, r3
 8006594:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7ff fbbd 	bl	8005d16 <sendPacket>
 800659c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800659e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d152      	bne.n	800664a <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 80065a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80065a8:	461a      	mov	r2, r3
 80065aa:	2109      	movs	r1, #9
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f7ff ff04 	bl	80063ba <waitfor>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b09      	cmp	r3, #9
 80065b6:	d140      	bne.n	800663a <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 80065b8:	2300      	movs	r3, #0
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	f04f 33ff 	mov.w	r3, #4294967295
 80065c0:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	68d2      	ldr	r2, [r2, #12]
 80065ca:	4614      	mov	r4, r2
 80065cc:	f107 0114 	add.w	r1, r7, #20
 80065d0:	f107 0218 	add.w	r2, r7, #24
 80065d4:	f107 0012 	add.w	r0, r7, #18
 80065d8:	9401      	str	r4, [sp, #4]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	460b      	mov	r3, r1
 80065de:	2101      	movs	r1, #1
 80065e0:	f001 f82f 	bl	8007642 <MQTTDeserialize_suback>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 80065ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f0:	2b80      	cmp	r3, #128	; 0x80
 80065f2:	d02b      	beq.n	800664c <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80065f4:	2300      	movs	r3, #0
 80065f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065f8:	e01b      	b.n	8006632 <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fe:	3304      	adds	r3, #4
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	4413      	add	r3, r2
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d110      	bne.n	800662c <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	3304      	adds	r3, #4
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	4413      	add	r3, r2
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	3304      	adds	r3, #4
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	4413      	add	r3, r2
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	609a      	str	r2, [r3, #8]
                    rc = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800662a:	e00f      	b.n	800664c <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662e:	3301      	adds	r3, #1
 8006630:	63bb      	str	r3, [r7, #56]	; 0x38
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	2b04      	cmp	r3, #4
 8006636:	dde0      	ble.n	80065fa <MQTTSubscribe+0xf6>
 8006638:	e008      	b.n	800664c <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 800663a:	f04f 33ff 	mov.w	r3, #4294967295
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006640:	e004      	b.n	800664c <MQTTSubscribe+0x148>
		goto exit;
 8006642:	bf00      	nop
 8006644:	e002      	b.n	800664c <MQTTSubscribe+0x148>
        goto exit;
 8006646:	bf00      	nop
 8006648:	e000      	b.n	800664c <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 800664a:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800664c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800664e:	4618      	mov	r0, r3
 8006650:	3740      	adds	r7, #64	; 0x40
 8006652:	46bd      	mov	sp, r7
 8006654:	bdb0      	pop	{r4, r5, r7, pc}

08006656 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8006656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006658:	b097      	sub	sp, #92	; 0x5c
 800665a:	af08      	add	r7, sp, #32
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8006662:	f04f 33ff 	mov.w	r3, #4294967295
 8006666:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8006668:	2300      	movs	r3, #0
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	2300      	movs	r3, #0
 800666e:	623b      	str	r3, [r7, #32]
 8006670:	2300      	movs	r3, #0
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8006678:	2300      	movs	r3, #0
 800667a:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 809b 	beq.w	80067bc <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 8006686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800668a:	4618      	mov	r0, r3
 800668c:	f000 f8a2 	bl	80067d4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006698:	4611      	mov	r1, r2
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f8ba 	bl	8006814 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d003      	beq.n	80066b0 <MQTTPublish+0x5a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d106      	bne.n	80066be <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f7ff fb18 	bl	8005ce6 <getNextPacketId>
 80066b6:	4603      	mov	r3, r0
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	469c      	mov	ip, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	469e      	mov	lr, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	785d      	ldrb	r5, [r3, #1]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 80066e0:	9206      	str	r2, [sp, #24]
 80066e2:	9305      	str	r3, [sp, #20]
 80066e4:	ac02      	add	r4, sp, #8
 80066e6:	f107 031c 	add.w	r3, r7, #28
 80066ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80066f2:	9601      	str	r6, [sp, #4]
 80066f4:	9500      	str	r5, [sp, #0]
 80066f6:	4673      	mov	r3, lr
 80066f8:	2200      	movs	r2, #0
 80066fa:	4661      	mov	r1, ip
 80066fc:	6838      	ldr	r0, [r7, #0]
 80066fe:	f000 fe34 	bl	800736a <MQTTSerialize_publish>
 8006702:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	2b00      	cmp	r3, #0
 8006708:	dd5a      	ble.n	80067c0 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800670a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800670e:	461a      	mov	r2, r3
 8006710:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7ff faff 	bl	8005d16 <sendPacket>
 8006718:	6378      	str	r0, [r7, #52]	; 0x34
 800671a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671c:	2b00      	cmp	r3, #0
 800671e:	d151      	bne.n	80067c4 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d122      	bne.n	800676e <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 8006728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800672c:	461a      	mov	r2, r3
 800672e:	2104      	movs	r1, #4
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff fe42 	bl	80063ba <waitfor>
 8006736:	4603      	mov	r3, r0
 8006738:	2b04      	cmp	r3, #4
 800673a:	d114      	bne.n	8006766 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	695c      	ldr	r4, [r3, #20]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f107 021a 	add.w	r2, r7, #26
 8006748:	f107 0119 	add.w	r1, r7, #25
 800674c:	f107 0018 	add.w	r0, r7, #24
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	4623      	mov	r3, r4
 8006754:	f000 fb9c 	bl	8006e90 <MQTTDeserialize_ack>
 8006758:	4603      	mov	r3, r0
 800675a:	2b01      	cmp	r3, #1
 800675c:	d035      	beq.n	80067ca <MQTTPublish+0x174>
                rc = FAILURE;
 800675e:	f04f 33ff 	mov.w	r3, #4294967295
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
 8006764:	e031      	b.n	80067ca <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8006766:	f04f 33ff 	mov.w	r3, #4294967295
 800676a:	637b      	str	r3, [r7, #52]	; 0x34
 800676c:	e02d      	b.n	80067ca <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d128      	bne.n	80067c8 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8006776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800677a:	461a      	mov	r2, r3
 800677c:	2107      	movs	r1, #7
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff fe1b 	bl	80063ba <waitfor>
 8006784:	4603      	mov	r3, r0
 8006786:	2b07      	cmp	r3, #7
 8006788:	d114      	bne.n	80067b4 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	695c      	ldr	r4, [r3, #20]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f107 0216 	add.w	r2, r7, #22
 8006796:	f107 0115 	add.w	r1, r7, #21
 800679a:	f107 0014 	add.w	r0, r7, #20
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	4623      	mov	r3, r4
 80067a2:	f000 fb75 	bl	8006e90 <MQTTDeserialize_ack>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d00e      	beq.n	80067ca <MQTTPublish+0x174>
                rc = FAILURE;
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
 80067b2:	e00a      	b.n	80067ca <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 80067b4:	f04f 33ff 	mov.w	r3, #4294967295
 80067b8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ba:	e006      	b.n	80067ca <MQTTPublish+0x174>
		goto exit;
 80067bc:	bf00      	nop
 80067be:	e004      	b.n	80067ca <MQTTPublish+0x174>
        goto exit;
 80067c0:	bf00      	nop
 80067c2:	e002      	b.n	80067ca <MQTTPublish+0x174>
        goto exit; // there was a problem
 80067c4:	bf00      	nop
 80067c6:	e000      	b.n	80067ca <MQTTPublish+0x174>
    }

exit:
 80067c8:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 80067ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	373c      	adds	r7, #60	; 0x3c
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067d4 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	605a      	str	r2, [r3, #4]
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr

080067ec <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <TimerIsExpired+0x24>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	0fdb      	lsrs	r3, r3, #31
 8006804:	b2db      	uxtb	r3, r3
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr
 8006810:	20002c9c 	.word	0x20002c9c

08006814 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 800681e:	4b05      	ldr	r3, [pc, #20]	; (8006834 <TimerCountdownMS+0x20>)
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	441a      	add	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	605a      	str	r2, [r3, #4]
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr
 8006834:	20002c9c 	.word	0x20002c9c

08006838 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006848:	fb03 f202 	mul.w	r2, r3, r2
 800684c:	4b04      	ldr	r3, [pc, #16]	; (8006860 <TimerCountdown+0x28>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	441a      	add	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	605a      	str	r2, [r3, #4]
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr
 8006860:	20002c9c 	.word	0x20002c9c

08006864 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	4b05      	ldr	r3, [pc, #20]	; (8006888 <TimerLeftMS+0x24>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr
 8006888:	20002c9c 	.word	0x20002c9c

0800688c <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a06      	ldr	r2, [pc, #24]	; (80068b8 <NewNetwork+0x2c>)
 80068a0:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a05      	ldr	r2, [pc, #20]	; (80068bc <NewNetwork+0x30>)
 80068a6:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a05      	ldr	r2, [pc, #20]	; (80068c0 <NewNetwork+0x34>)
 80068ac:	60da      	str	r2, [r3, #12]
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr
 80068b8:	080068c5 	.word	0x080068c5
 80068bc:	0800691f 	.word	0x0800691f
 80068c0:	08006967 	.word	0x08006967

080068c4 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	3301      	adds	r3, #1
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fc fe27 	bl	8003534 <WIZCHIP_READ>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b17      	cmp	r3, #23
 80068ea:	d113      	bne.n	8006914 <w5x00_read+0x50>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fc ffc3 	bl	800387e <getSn_RX_RSR>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	b292      	uxth	r2, r2
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	4618      	mov	r0, r3
 800690c:	f7fd fcd0 	bl	80042b0 <recv>
 8006910:	4603      	mov	r3, r0
 8006912:	e000      	b.n	8006916 <w5x00_read+0x52>

	return SOCK_ERROR;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	607a      	str	r2, [r7, #4]
 800692a:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	3301      	adds	r3, #1
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800693a:	4618      	mov	r0, r3
 800693c:	f7fc fdfa 	bl	8003534 <WIZCHIP_READ>
 8006940:	4603      	mov	r3, r0
 8006942:	2b17      	cmp	r3, #23
 8006944:	d10a      	bne.n	800695c <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	b292      	uxth	r2, r2
 8006950:	68b9      	ldr	r1, [r7, #8]
 8006952:	4618      	mov	r0, r3
 8006954:	f7fd fbb2 	bl	80040bc <send>
 8006958:	4603      	mov	r3, r0
 800695a:	e000      	b.n	800695e <w5x00_write+0x40>

	return SOCK_ERROR;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	4618      	mov	r0, r3
 8006976:	f7fd fb2b 	bl	8003fd0 <disconnect>
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b086      	sub	sp, #24
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	4613      	mov	r3, r2
 800698e:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 8006990:	f243 0339 	movw	r3, #12345	; 0x3039
 8006994:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	b2d8      	uxtb	r0, r3
 800699c:	8afa      	ldrh	r2, [r7, #22]
 800699e:	2300      	movs	r3, #0
 80069a0:	2101      	movs	r1, #1
 80069a2:	f7fd f8b7 	bl	8003b14 <socket>
 80069a6:	4603      	mov	r3, r0
 80069a8:	461a      	mov	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d001      	beq.n	80069b6 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 80069b2:	2300      	movs	r3, #0
 80069b4:	e00d      	b.n	80069d2 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	88fa      	ldrh	r2, [r7, #6]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fd fa29 	bl	8003e18 <connect>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d001      	beq.n	80069d0 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 80069cc:	2300      	movs	r3, #0
 80069ce:	e000      	b.n	80069d2 <ConnectNetwork+0x50>

	return SOCK_OK;
 80069d0:	2301      	movs	r3, #1
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80069da:	b590      	push	{r4, r7, lr}
 80069dc:	b085      	sub	sp, #20
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
	int len = 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7a1b      	ldrb	r3, [r3, #8]
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d102      	bne.n	80069f4 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80069ee:	230c      	movs	r3, #12
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	e005      	b.n	8006a00 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	7a1b      	ldrb	r3, [r3, #8]
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d101      	bne.n	8006a00 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80069fc:	230a      	movs	r3, #10
 80069fe:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	330c      	adds	r3, #12
 8006a04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a08:	f000 fc3f 	bl	800728a <MQTTstrlen>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	3302      	adds	r3, #2
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	7edb      	ldrb	r3, [r3, #27]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d013      	beq.n	8006a46 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3324      	adds	r3, #36	; 0x24
 8006a22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a26:	f000 fc30 	bl	800728a <MQTTstrlen>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	1c9c      	adds	r4, r3, #2
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3330      	adds	r3, #48	; 0x30
 8006a32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a36:	f000 fc28 	bl	800728a <MQTTstrlen>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4423      	add	r3, r4
 8006a3e:	3302      	adds	r3, #2
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d103      	bne.n	8006a56 <MQTTSerialize_connectLength+0x7c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3340      	adds	r3, #64	; 0x40
 8006a5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a5e:	f000 fc14 	bl	800728a <MQTTstrlen>
 8006a62:	4603      	mov	r3, r0
 8006a64:	3302      	adds	r3, #2
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d103      	bne.n	8006a7c <MQTTSerialize_connectLength+0xa2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00a      	beq.n	8006a92 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	334c      	adds	r3, #76	; 0x4c
 8006a80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a84:	f000 fc01 	bl	800728a <MQTTstrlen>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8006a92:	68fb      	ldr	r3, [r7, #12]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd90      	pop	{r4, r7, pc}

08006a9c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08a      	sub	sp, #40	; 0x28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8006aac:	2300      	movs	r3, #0
 8006aae:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	617b      	str	r3, [r7, #20]
	int len = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8006ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff ff8b 	bl	80069da <MQTTSerialize_connectLength>
 8006ac4:	6238      	str	r0, [r7, #32]
 8006ac6:	6a38      	ldr	r0, [r7, #32]
 8006ac8:	f000 fa98 	bl	8006ffc <MQTTPacket_len>
 8006acc:	4602      	mov	r2, r0
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	da03      	bge.n	8006adc <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8006ad4:	f06f 0301 	mvn.w	r3, #1
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8006ada:	e0c2      	b.n	8006c62 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8006ae0:	7e3b      	ldrb	r3, [r7, #24]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f362 1307 	bfi	r3, r2, #4, #4
 8006ae8:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8006aea:	7e3a      	ldrb	r2, [r7, #24]
 8006aec:	f107 031c 	add.w	r3, r7, #28
 8006af0:	4611      	mov	r1, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fb0f 	bl	8007116 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	6a39      	ldr	r1, [r7, #32]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fa12 	bl	8006f26 <MQTTPacket_encode>
 8006b02:	4602      	mov	r2, r0
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	4413      	add	r3, r2
 8006b08:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	7a1b      	ldrb	r3, [r3, #8]
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d10c      	bne.n	8006b2c <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8006b12:	f107 031c 	add.w	r3, r7, #28
 8006b16:	4955      	ldr	r1, [pc, #340]	; (8006c6c <MQTTSerialize_connect+0x1d0>)
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fb38 	bl	800718e <writeCString>
		writeChar(&ptr, (char) 4);
 8006b1e:	f107 031c 	add.w	r3, r7, #28
 8006b22:	2104      	movs	r1, #4
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 faf6 	bl	8007116 <writeChar>
 8006b2a:	e00b      	b.n	8006b44 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8006b2c:	f107 031c 	add.w	r3, r7, #28
 8006b30:	494f      	ldr	r1, [pc, #316]	; (8006c70 <MQTTSerialize_connect+0x1d4>)
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fb2b 	bl	800718e <writeCString>
		writeChar(&ptr, (char) 3);
 8006b38:	f107 031c 	add.w	r3, r7, #28
 8006b3c:	2103      	movs	r1, #3
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fae9 	bl	8007116 <writeChar>
	}

	flags.all = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	7e9b      	ldrb	r3, [r3, #26]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	7d3b      	ldrb	r3, [r7, #20]
 8006b54:	f362 0341 	bfi	r3, r2, #1, #1
 8006b58:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	7edb      	ldrb	r3, [r3, #27]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	bf14      	ite	ne
 8006b62:	2301      	movne	r3, #1
 8006b64:	2300      	moveq	r3, #0
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	7d3b      	ldrb	r3, [r7, #20]
 8006b6a:	f362 0382 	bfi	r3, r2, #2, #1
 8006b6e:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8006b70:	7d3b      	ldrb	r3, [r7, #20]
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d013      	beq.n	8006ba4 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	7d3b      	ldrb	r3, [r7, #20]
 8006b8a:	f362 03c4 	bfi	r3, r2, #3, #2
 8006b8e:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	7d3b      	ldrb	r3, [r7, #20]
 8006b9e:	f362 1345 	bfi	r3, r2, #5, #1
 8006ba2:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d103      	bne.n	8006bb4 <MQTTSerialize_connect+0x118>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8006bb4:	7d3b      	ldrb	r3, [r7, #20]
 8006bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bba:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d103      	bne.n	8006bcc <MQTTSerialize_connect+0x130>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8006bcc:	7d3b      	ldrb	r3, [r7, #20]
 8006bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bd2:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8006bd4:	7d3a      	ldrb	r2, [r7, #20]
 8006bd6:	f107 031c 	add.w	r3, r7, #28
 8006bda:	4611      	mov	r1, r2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fa9a 	bl	8007116 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	8b1b      	ldrh	r3, [r3, #24]
 8006be6:	461a      	mov	r2, r3
 8006be8:	f107 031c 	add.w	r3, r7, #28
 8006bec:	4611      	mov	r1, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 faa5 	bl	800713e <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f107 001c 	add.w	r0, r7, #28
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bfe:	f000 fae5 	bl	80071cc <writeMQTTString>
	if (options->willFlag)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	7edb      	ldrb	r3, [r3, #27]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00d      	beq.n	8006c26 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f107 001c 	add.w	r0, r7, #28
 8006c10:	3324      	adds	r3, #36	; 0x24
 8006c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c14:	f000 fada 	bl	80071cc <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f107 001c 	add.w	r0, r7, #28
 8006c1e:	3330      	adds	r3, #48	; 0x30
 8006c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c22:	f000 fad3 	bl	80071cc <writeMQTTString>
	}
	if (flags.bits.username)
 8006c26:	7d3b      	ldrb	r3, [r7, #20]
 8006c28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d006      	beq.n	8006c40 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f107 001c 	add.w	r0, r7, #28
 8006c38:	3340      	adds	r3, #64	; 0x40
 8006c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c3c:	f000 fac6 	bl	80071cc <writeMQTTString>
	if (flags.bits.password)
 8006c40:	7d3b      	ldrb	r3, [r7, #20]
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d006      	beq.n	8006c5a <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f107 001c 	add.w	r0, r7, #28
 8006c52:	334c      	adds	r3, #76	; 0x4c
 8006c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c56:	f000 fab9 	bl	80071cc <writeMQTTString>

	rc = ptr - buf;
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3728      	adds	r7, #40	; 0x28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	0800a7cc 	.word	0x0800a7cc
 8006c70:	0800a7d4 	.word	0x0800a7d4

08006c74 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	; 0x28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8006c92:	2300      	movs	r3, #0
 8006c94:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8006c96:	f107 0318 	add.w	r3, r7, #24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fa28 	bl	80070f0 <readChar>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8006ca4:	7f3b      	ldrb	r3, [r7, #28]
 8006ca6:	f023 030f 	bic.w	r3, r3, #15
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d12e      	bne.n	8006d0e <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f107 0214 	add.w	r2, r7, #20
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 f9e9 	bl	8007090 <MQTTPacket_decodeBuf>
 8006cbe:	6278      	str	r0, [r7, #36]	; 0x24
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4413      	add	r3, r2
 8006cce:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	6a3a      	ldr	r2, [r7, #32]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	dd1b      	ble.n	8006d12 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8006cda:	f107 0318 	add.w	r3, r7, #24
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fa06 	bl	80070f0 <readChar>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8006ce8:	7c3b      	ldrb	r3, [r7, #16]
 8006cea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8006cf6:	f107 0318 	add.w	r3, r7, #24
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f9f8 	bl	80070f0 <readChar>
 8006d00:	4603      	mov	r3, r0
 8006d02:	461a      	mov	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d0c:	e002      	b.n	8006d14 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8006d0e:	bf00      	nop
 8006d10:	e000      	b.n	8006d14 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8006d12:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3728      	adds	r7, #40	; 0x28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b088      	sub	sp, #32
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8006d30:	f04f 33ff 	mov.w	r3, #4294967295
 8006d34:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	dc03      	bgt.n	8006d48 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8006d40:	f06f 0301 	mvn.w	r3, #1
 8006d44:	61fb      	str	r3, [r7, #28]
		goto exit;
 8006d46:	e01d      	b.n	8006d84 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8006d4c:	79fb      	ldrb	r3, [r7, #7]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	7e3b      	ldrb	r3, [r7, #24]
 8006d56:	f362 1307 	bfi	r3, r2, #4, #4
 8006d5a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8006d5c:	7e3a      	ldrb	r2, [r7, #24]
 8006d5e:	f107 0314 	add.w	r3, r7, #20
 8006d62:	4611      	mov	r1, r2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 f9d6 	bl	8007116 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 f8d9 	bl	8006f26 <MQTTPacket_encode>
 8006d74:	4602      	mov	r2, r0
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	4413      	add	r3, r2
 8006d7a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8006d84:	69fb      	ldr	r3, [r7, #28]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8006d98:	220c      	movs	r2, #12
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff ffbe 	bl	8006d1e <MQTTSerialize_zero>
 8006da2:	4603      	mov	r3, r0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08a      	sub	sp, #40	; 0x28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
 8006db8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8006dba:	2300      	movs	r3, #0
 8006dbc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8006dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8006dce:	f107 0318 	add.w	r3, r7, #24
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 f98c 	bl	80070f0 <readChar>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8006ddc:	7f3b      	ldrb	r3, [r7, #28]
 8006dde:	f023 030f 	bic.w	r3, r3, #15
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b30      	cmp	r3, #48	; 0x30
 8006de6:	d14b      	bne.n	8006e80 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8006de8:	7f3b      	ldrb	r3, [r7, #28]
 8006dea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8006df6:	7f3b      	ldrb	r3, [r7, #28]
 8006df8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	461a      	mov	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8006e04:	7f3b      	ldrb	r3, [r7, #28]
 8006e06:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	f107 0214 	add.w	r2, r7, #20
 8006e18:	4611      	mov	r1, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 f938 	bl	8007090 <MQTTPacket_decodeBuf>
 8006e20:	6278      	str	r0, [r7, #36]	; 0x24
 8006e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	4413      	add	r3, r2
 8006e28:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4413      	add	r3, r2
 8006e30:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8006e32:	f107 0318 	add.w	r3, r7, #24
 8006e36:	6a3a      	ldr	r2, [r7, #32]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e3c:	f000 f9f4 	bl	8007228 <readMQTTLenString>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d01e      	beq.n	8006e84 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	6a3a      	ldr	r2, [r7, #32]
 8006e4a:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	db19      	blt.n	8006e84 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	dd08      	ble.n	8006e6a <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8006e58:	f107 0318 	add.w	r3, r7, #24
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 f92d 	bl	80070bc <readInt>
 8006e62:	4603      	mov	r3, r0
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	6a3a      	ldr	r2, [r7, #32]
 8006e6e:	1ad2      	subs	r2, r2, r3
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e78:	601a      	str	r2, [r3, #0]
	rc = 1;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e7e:	e002      	b.n	8006e86 <MQTTDeserialize_publish+0xda>
		goto exit;
 8006e80:	bf00      	nop
 8006e82:	e000      	b.n	8006e86 <MQTTDeserialize_publish+0xda>
		goto exit;
 8006e84:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3728      	adds	r7, #40	; 0x28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	; 0x28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8006eae:	f107 0318 	add.w	r3, r7, #24
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 f91c 	bl	80070f0 <readChar>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8006ebc:	7f3b      	ldrb	r3, [r7, #28]
 8006ebe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8006eca:	7f3b      	ldrb	r3, [r7, #28]
 8006ecc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	f107 0214 	add.w	r2, r7, #20
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 f8d5 	bl	8007090 <MQTTPacket_decodeBuf>
 8006ee6:	6278      	str	r0, [r7, #36]	; 0x24
 8006ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	4413      	add	r3, r2
 8006eee:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	6a3a      	ldr	r2, [r7, #32]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	dd0b      	ble.n	8006f1a <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8006f02:	f107 0318 	add.w	r3, r7, #24
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 f8d8 	bl	80070bc <readInt>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8006f14:	2301      	movs	r3, #1
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
 8006f18:	e000      	b.n	8006f1c <MQTTDeserialize_ack+0x8c>
		goto exit;
 8006f1a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3728      	adds	r7, #40	; 0x28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	425a      	negs	r2, r3
 8006f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f40:	bf58      	it	pl
 8006f42:	4253      	negpl	r3, r2
 8006f44:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	da00      	bge.n	8006f4e <MQTTPacket_encode+0x28>
 8006f4c:	337f      	adds	r3, #127	; 0x7f
 8006f4e:	11db      	asrs	r3, r3, #7
 8006f50:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	dd03      	ble.n	8006f60 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8006f58:	7afb      	ldrb	r3, [r7, #11]
 8006f5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f5e:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	60fa      	str	r2, [r7, #12]
 8006f66:	461a      	mov	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	7afa      	ldrb	r2, [r7, #11]
 8006f6e:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dcde      	bgt.n	8006f34 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8006f76:	68fb      	ldr	r3, [r7, #12]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr

08006f82 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b086      	sub	sp, #24
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	617b      	str	r3, [r7, #20]
	int len = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8006f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f9e:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	dd03      	ble.n	8006fb4 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8006fac:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb0:	60fb      	str	r3, [r7, #12]
			goto exit;
 8006fb2:	e01d      	b.n	8006ff0 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8006fb4:	f107 020b 	add.w	r2, r7, #11
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2101      	movs	r1, #1
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4798      	blx	r3
 8006fc0:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d112      	bne.n	8006fee <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	7afb      	ldrb	r3, [r7, #11]
 8006fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd2:	6979      	ldr	r1, [r7, #20]
 8006fd4:	fb01 f303 	mul.w	r3, r1, r3
 8006fd8:	441a      	add	r2, r3
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	01db      	lsls	r3, r3, #7
 8006fe2:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8006fe4:	7afb      	ldrb	r3, [r7, #11]
 8006fe6:	b25b      	sxtb	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	dbd6      	blt.n	8006f9a <MQTTPacket_decode+0x18>
exit:
 8006fec:	e000      	b.n	8006ff0 <MQTTPacket_decode+0x6e>
			goto exit;
 8006fee:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8006ff0:	693b      	ldr	r3, [r7, #16]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3301      	adds	r3, #1
 8007008:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b7f      	cmp	r3, #127	; 0x7f
 800700e:	dc03      	bgt.n	8007018 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3301      	adds	r3, #1
 8007014:	607b      	str	r3, [r7, #4]
 8007016:	e012      	b.n	800703e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800701e:	da03      	bge.n	8007028 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3302      	adds	r3, #2
 8007024:	607b      	str	r3, [r7, #4]
 8007026:	e00a      	b.n	800703e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a08      	ldr	r2, [pc, #32]	; (800704c <MQTTPacket_len+0x50>)
 800702c:	4293      	cmp	r3, r2
 800702e:	dc03      	bgt.n	8007038 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3303      	adds	r3, #3
 8007034:	607b      	str	r3, [r7, #4]
 8007036:	e002      	b.n	800703e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3304      	adds	r3, #4
 800703c:	607b      	str	r3, [r7, #4]
	return rem_len;
 800703e:	687b      	ldr	r3, [r7, #4]
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	001ffffe 	.word	0x001ffffe

08007050 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	e00a      	b.n	8007076 <bufchar+0x26>
		*c = *bufptr++;
 8007060:	4b0a      	ldr	r3, [pc, #40]	; (800708c <bufchar+0x3c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	4909      	ldr	r1, [pc, #36]	; (800708c <bufchar+0x3c>)
 8007068:	600a      	str	r2, [r1, #0]
 800706a:	781a      	ldrb	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60fb      	str	r3, [r7, #12]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	dbf0      	blt.n	8007060 <bufchar+0x10>
	return count;
 800707e:	683b      	ldr	r3, [r7, #0]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	bc80      	pop	{r7}
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	20000a90 	.word	0x20000a90

08007090 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800709a:	4a06      	ldr	r2, [pc, #24]	; (80070b4 <MQTTPacket_decodeBuf+0x24>)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	4805      	ldr	r0, [pc, #20]	; (80070b8 <MQTTPacket_decodeBuf+0x28>)
 80070a4:	f7ff ff6d 	bl	8006f82 <MQTTPacket_decode>
 80070a8:	4603      	mov	r3, r0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000a90 	.word	0x20000a90
 80070b8:	08007051 	.word	0x08007051

080070bc <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	021b      	lsls	r3, r3, #8
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	3201      	adds	r2, #1
 80070d4:	7812      	ldrb	r2, [r2, #0]
 80070d6:	4413      	add	r3, r2
 80070d8:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	1c9a      	adds	r2, r3, #2
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	601a      	str	r2, [r3, #0]
	return len;
 80070e4:	68bb      	ldr	r3, [r7, #8]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr

080070f0 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	601a      	str	r2, [r3, #0]
	return c;
 800710a:	7bfb      	ldrb	r3, [r7, #15]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr

08007116 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	78fa      	ldrb	r2, [r7, #3]
 8007128:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	601a      	str	r2, [r3, #0]
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	bc80      	pop	{r7}
 800713c:	4770      	bx	lr

0800713e <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	da00      	bge.n	8007150 <writeInt+0x12>
 800714e:	33ff      	adds	r3, #255	; 0xff
 8007150:	121b      	asrs	r3, r3, #8
 8007152:	461a      	mov	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	b2d2      	uxtb	r2, r2
 800715a:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	425a      	negs	r2, r3
 800716a:	b2db      	uxtb	r3, r3
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	bf58      	it	pl
 8007170:	4253      	negpl	r3, r2
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	601a      	str	r2, [r3, #0]
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	bc80      	pop	{r7}
 800718c:	4770      	bx	lr

0800718e <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8007198:	6838      	ldr	r0, [r7, #0]
 800719a:	f7f8 ffd9 	bl	8000150 <strlen>
 800719e:	4603      	mov	r3, r0
 80071a0:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 80071a2:	68f9      	ldr	r1, [r7, #12]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff ffca 	bl	800713e <writeInt>
	memcpy(*pptr, string, len);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f001 fabd 	bl	8008732 <memcpy>
	*pptr += len;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	441a      	add	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	601a      	str	r2, [r3, #0]
}
 80071c4:	bf00      	nop
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	4638      	mov	r0, r7
 80071d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dd12      	ble.n	8007206 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4619      	mov	r1, r3
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f7ff ffaa 	bl	800713e <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f001 fa9d 	bl	8008732 <memcpy>
		*pptr += mqttstring.lenstring.len;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	441a      	add	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8007204:	e00c      	b.n	8007220 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	4619      	mov	r1, r3
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f7ff ffbc 	bl	800718e <writeCString>
}
 8007216:	e003      	b.n	8007220 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8007218:	2100      	movs	r1, #0
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f7ff ff8f 	bl	800713e <writeInt>
}
 8007220:	bf00      	nop
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8007234:	2300      	movs	r3, #0
 8007236:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	dd1a      	ble.n	800727a <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8007244:	68b8      	ldr	r0, [r7, #8]
 8007246:	f7ff ff39 	bl	80070bc <readInt>
 800724a:	4602      	mov	r2, r0
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	6852      	ldr	r2, [r2, #4]
 8007258:	4413      	add	r3, r2
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	429a      	cmp	r2, r3
 800725e:	d30c      	bcc.n	800727a <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	6852      	ldr	r2, [r2, #4]
 8007270:	441a      	add	r2, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	601a      	str	r2, [r3, #0]
			rc = 1;
 8007276:	2301      	movs	r3, #1
 8007278:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8007280:	697b      	ldr	r3, [r7, #20]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b086      	sub	sp, #24
 800728e:	af00      	add	r7, sp, #0
 8007290:	1d3b      	adds	r3, r7, #4
 8007292:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7f8 ff54 	bl	8000150 <strlen>
 80072a8:	4603      	mov	r3, r0
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	e001      	b.n	80072b2 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	617b      	str	r3, [r7, #20]
	return rc;
 80072b2:	697b      	ldr	r3, [r7, #20]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
	int alen = 0,
 80072c6:	2300      	movs	r3, #0
 80072c8:	617b      	str	r3, [r7, #20]
		blen = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7f8 ff35 	bl	8000150 <strlen>
 80072e6:	4603      	mov	r3, r0
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	e005      	b.n	80072f8 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 80072f8:	6838      	ldr	r0, [r7, #0]
 80072fa:	f7f8 ff29 	bl	8000150 <strlen>
 80072fe:	4603      	mov	r3, r0
 8007300:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	429a      	cmp	r2, r3
 8007308:	d10a      	bne.n	8007320 <MQTTPacket_equals+0x64>
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	461a      	mov	r2, r3
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6938      	ldr	r0, [r7, #16]
 8007312:	f001 f94c 	bl	80085ae <strncmp>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <MQTTPacket_equals+0x64>
 800731c:	2301      	movs	r3, #1
 800731e:	e000      	b.n	8007322 <MQTTPacket_equals+0x66>
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b086      	sub	sp, #24
 800732e:	af00      	add	r7, sp, #0
 8007330:	60f8      	str	r0, [r7, #12]
 8007332:	4638      	mov	r0, r7
 8007334:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8007338:	2300      	movs	r3, #0
 800733a:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800733c:	463b      	mov	r3, r7
 800733e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007342:	f7ff ffa2 	bl	800728a <MQTTstrlen>
 8007346:	4603      	mov	r3, r0
 8007348:	1c9a      	adds	r2, r3, #2
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	4413      	add	r3, r2
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4413      	add	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	dd02      	ble.n	8007360 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	3302      	adds	r3, #2
 800735e:	617b      	str	r3, [r7, #20]
	return len;
 8007360:	697b      	ldr	r3, [r7, #20]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b08a      	sub	sp, #40	; 0x28
 800736e:	af02      	add	r7, sp, #8
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	603b      	str	r3, [r7, #0]
 8007376:	4613      	mov	r3, r2
 8007378:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800737e:	2300      	movs	r3, #0
 8007380:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800738a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007394:	6838      	ldr	r0, [r7, #0]
 8007396:	f7ff ffc8 	bl	800732a <MQTTSerialize_publishLength>
 800739a:	61b8      	str	r0, [r7, #24]
 800739c:	69b8      	ldr	r0, [r7, #24]
 800739e:	f7ff fe2d 	bl	8006ffc <MQTTPacket_len>
 80073a2:	4602      	mov	r2, r0
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4293      	cmp	r3, r2
 80073a8:	da03      	bge.n	80073b2 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80073aa:	f06f 0301 	mvn.w	r3, #1
 80073ae:	61fb      	str	r3, [r7, #28]
		goto exit;
 80073b0:	e04c      	b.n	800744c <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 80073b2:	7c3b      	ldrb	r3, [r7, #16]
 80073b4:	2203      	movs	r2, #3
 80073b6:	f362 1307 	bfi	r3, r2, #4, #4
 80073ba:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 80073bc:	79fb      	ldrb	r3, [r7, #7]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	7c3b      	ldrb	r3, [r7, #16]
 80073c6:	f362 03c3 	bfi	r3, r2, #3, #1
 80073ca:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	7c3b      	ldrb	r3, [r7, #16]
 80073d6:	f362 0342 	bfi	r3, r2, #1, #2
 80073da:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 80073dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	7c3b      	ldrb	r3, [r7, #16]
 80073e8:	f362 0300 	bfi	r3, r2, #0, #1
 80073ec:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 80073ee:	7c3a      	ldrb	r2, [r7, #16]
 80073f0:	f107 0314 	add.w	r3, r7, #20
 80073f4:	4611      	mov	r1, r2
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff fe8d 	bl	8007116 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	69b9      	ldr	r1, [r7, #24]
 8007400:	4618      	mov	r0, r3
 8007402:	f7ff fd90 	bl	8006f26 <MQTTPacket_encode>
 8007406:	4602      	mov	r2, r0
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	4413      	add	r3, r2
 800740c:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800740e:	f107 0014 	add.w	r0, r7, #20
 8007412:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007418:	f7ff fed8 	bl	80071cc <writeMQTTString>

	if (qos > 0)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	dd06      	ble.n	8007430 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8007422:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007424:	f107 0314 	add.w	r3, r7, #20
 8007428:	4611      	mov	r1, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff fe87 	bl	800713e <writeInt>

	memcpy(ptr, payload, payloadlen);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007436:	4618      	mov	r0, r3
 8007438:	f001 f97b 	bl	8008732 <memcpy>
	ptr += payloadlen;
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007440:	4413      	add	r3, r2
 8007442:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800744c:	69fb      	ldr	r3, [r7, #28]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3720      	adds	r7, #32
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b088      	sub	sp, #32
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	4611      	mov	r1, r2
 8007462:	461a      	mov	r2, r3
 8007464:	460b      	mov	r3, r1
 8007466:	71fb      	strb	r3, [r7, #7]
 8007468:	4613      	mov	r3, r2
 800746a:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 800746c:	2300      	movs	r3, #0
 800746e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b03      	cmp	r3, #3
 800747c:	dc03      	bgt.n	8007486 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800747e:	f06f 0301 	mvn.w	r3, #1
 8007482:	61fb      	str	r3, [r7, #28]
		goto exit;
 8007484:	e037      	b.n	80074f6 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	f003 030f 	and.w	r3, r3, #15
 800748c:	b2da      	uxtb	r2, r3
 800748e:	7e3b      	ldrb	r3, [r7, #24]
 8007490:	f362 1307 	bfi	r3, r2, #4, #4
 8007494:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8007496:	79bb      	ldrb	r3, [r7, #6]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	b2da      	uxtb	r2, r3
 800749e:	7e3b      	ldrb	r3, [r7, #24]
 80074a0:	f362 03c3 	bfi	r3, r2, #3, #1
 80074a4:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 80074a6:	79fb      	ldrb	r3, [r7, #7]
 80074a8:	2b06      	cmp	r3, #6
 80074aa:	bf0c      	ite	eq
 80074ac:	2301      	moveq	r3, #1
 80074ae:	2300      	movne	r3, #0
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	7e3b      	ldrb	r3, [r7, #24]
 80074ba:	f362 0342 	bfi	r3, r2, #1, #2
 80074be:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80074c0:	7e3a      	ldrb	r2, [r7, #24]
 80074c2:	f107 0314 	add.w	r3, r7, #20
 80074c6:	4611      	mov	r1, r2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff fe24 	bl	8007116 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2102      	movs	r1, #2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff fd27 	bl	8006f26 <MQTTPacket_encode>
 80074d8:	4602      	mov	r2, r0
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	4413      	add	r3, r2
 80074de:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 80074e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80074e2:	f107 0314 	add.w	r3, r7, #20
 80074e6:	4611      	mov	r1, r2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff fe28 	bl	800713e <writeInt>
	rc = ptr - buf;
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80074f6:	69fb      	ldr	r3, [r7, #28]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3720      	adds	r7, #32
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 800750a:	2302      	movs	r3, #2
 800750c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	e013      	b.n	800753c <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4613      	mov	r3, r2
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	461a      	mov	r2, r3
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	4413      	add	r3, r2
 8007524:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007528:	f7ff feaf 	bl	800728a <MQTTstrlen>
 800752c:	4603      	mov	r3, r0
 800752e:	3303      	adds	r3, #3
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	4413      	add	r3, r2
 8007534:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3301      	adds	r3, #1
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	429a      	cmp	r2, r3
 8007542:	dbe7      	blt.n	8007514 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8007544:	68bb      	ldr	r3, [r7, #8]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b08a      	sub	sp, #40	; 0x28
 8007552:	af00      	add	r7, sp, #0
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	4611      	mov	r1, r2
 800755a:	461a      	mov	r2, r3
 800755c:	460b      	mov	r3, r1
 800755e:	71fb      	strb	r3, [r7, #7]
 8007560:	4613      	mov	r3, r2
 8007562:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8007568:	2300      	movs	r3, #0
 800756a:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8007578:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800757a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800757c:	f7ff ffc0 	bl	8007500 <MQTTSerialize_subscribeLength>
 8007580:	61f8      	str	r0, [r7, #28]
 8007582:	69f8      	ldr	r0, [r7, #28]
 8007584:	f7ff fd3a 	bl	8006ffc <MQTTPacket_len>
 8007588:	4602      	mov	r2, r0
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	4293      	cmp	r3, r2
 800758e:	da03      	bge.n	8007598 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8007590:	f06f 0301 	mvn.w	r3, #1
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8007596:	e04f      	b.n	8007638 <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800759c:	7d3b      	ldrb	r3, [r7, #20]
 800759e:	2208      	movs	r2, #8
 80075a0:	f362 1307 	bfi	r3, r2, #4, #4
 80075a4:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	7d3b      	ldrb	r3, [r7, #20]
 80075b0:	f362 03c3 	bfi	r3, r2, #3, #1
 80075b4:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 80075b6:	7d3b      	ldrb	r3, [r7, #20]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f362 0342 	bfi	r3, r2, #1, #2
 80075be:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80075c0:	7d3a      	ldrb	r2, [r7, #20]
 80075c2:	f107 0318 	add.w	r3, r7, #24
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff fda4 	bl	8007116 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	69f9      	ldr	r1, [r7, #28]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7ff fca7 	bl	8006f26 <MQTTPacket_encode>
 80075d8:	4602      	mov	r2, r0
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	4413      	add	r3, r2
 80075de:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 80075e0:	88ba      	ldrh	r2, [r7, #4]
 80075e2:	f107 0318 	add.w	r3, r7, #24
 80075e6:	4611      	mov	r1, r2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff fda8 	bl	800713e <writeInt>

	for (i = 0; i < count; ++i)
 80075ee:	2300      	movs	r3, #0
 80075f0:	623b      	str	r3, [r7, #32]
 80075f2:	e019      	b.n	8007628 <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 80075f4:	6a3a      	ldr	r2, [r7, #32]
 80075f6:	4613      	mov	r3, r2
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	461a      	mov	r2, r3
 8007600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007602:	4413      	add	r3, r2
 8007604:	f107 0018 	add.w	r0, r7, #24
 8007608:	cb0e      	ldmia	r3, {r1, r2, r3}
 800760a:	f7ff fddf 	bl	80071cc <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007612:	4413      	add	r3, r2
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	f107 0318 	add.w	r3, r7, #24
 800761a:	4611      	mov	r1, r2
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff fd7a 	bl	8007116 <writeChar>
	for (i = 0; i < count; ++i)
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	3301      	adds	r3, #1
 8007626:	623b      	str	r3, [r7, #32]
 8007628:	6a3a      	ldr	r2, [r7, #32]
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	429a      	cmp	r2, r3
 800762e:	dbe1      	blt.n	80075f4 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800763a:	4618      	mov	r0, r3
 800763c:	3728      	adds	r7, #40	; 0x28
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b08a      	sub	sp, #40	; 0x28
 8007646:	af00      	add	r7, sp, #0
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	607a      	str	r2, [r7, #4]
 800764e:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8007650:	2300      	movs	r3, #0
 8007652:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8007658:	2300      	movs	r3, #0
 800765a:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8007660:	f107 0318 	add.w	r3, r7, #24
 8007664:	4618      	mov	r0, r3
 8007666:	f7ff fd43 	bl	80070f0 <readChar>
 800766a:	4603      	mov	r3, r0
 800766c:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 800766e:	7f3b      	ldrb	r3, [r7, #28]
 8007670:	f023 030f 	bic.w	r3, r3, #15
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b90      	cmp	r3, #144	; 0x90
 8007678:	d142      	bne.n	8007700 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	f107 0214 	add.w	r2, r7, #20
 8007680:	4611      	mov	r1, r2
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff fd04 	bl	8007090 <MQTTPacket_decodeBuf>
 8007688:	6278      	str	r0, [r7, #36]	; 0x24
 800768a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	4413      	add	r3, r2
 8007690:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4413      	add	r3, r2
 8007698:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	6a3a      	ldr	r2, [r7, #32]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	dd2f      	ble.n	8007704 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 80076a4:	f107 0318 	add.w	r3, r7, #24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff fd07 	bl	80070bc <readInt>
 80076ae:	4603      	mov	r3, r0
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	801a      	strh	r2, [r3, #0]

	*count = 0;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 80076bc:	e019      	b.n	80076f2 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	da03      	bge.n	80076d0 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 80076c8:	f04f 33ff 	mov.w	r3, #4294967295
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 80076ce:	e01a      	b.n	8007706 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 80076d0:	f107 0318 	add.w	r3, r7, #24
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff fd0b 	bl	80070f0 <readChar>
 80076da:	4603      	mov	r3, r0
 80076dc:	4618      	mov	r0, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	1c59      	adds	r1, r3, #1
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6011      	str	r1, [r2, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	4413      	add	r3, r2
 80076ee:	4602      	mov	r2, r0
 80076f0:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	6a3a      	ldr	r2, [r7, #32]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d8e1      	bhi.n	80076be <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 80076fa:	2301      	movs	r3, #1
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
 80076fe:	e002      	b.n	8007706 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8007700:	bf00      	nop
 8007702:	e000      	b.n	8007706 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8007704:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007708:	4618      	mov	r0, r3
 800770a:	3728      	adds	r7, #40	; 0x28
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <malloc>:
 8007710:	4b02      	ldr	r3, [pc, #8]	; (800771c <malloc+0xc>)
 8007712:	4601      	mov	r1, r0
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	f000 b823 	b.w	8007760 <_malloc_r>
 800771a:	bf00      	nop
 800771c:	200000d4 	.word	0x200000d4

08007720 <sbrk_aligned>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	4e0e      	ldr	r6, [pc, #56]	; (800775c <sbrk_aligned+0x3c>)
 8007724:	460c      	mov	r4, r1
 8007726:	6831      	ldr	r1, [r6, #0]
 8007728:	4605      	mov	r5, r0
 800772a:	b911      	cbnz	r1, 8007732 <sbrk_aligned+0x12>
 800772c:	f000 ff9c 	bl	8008668 <_sbrk_r>
 8007730:	6030      	str	r0, [r6, #0]
 8007732:	4621      	mov	r1, r4
 8007734:	4628      	mov	r0, r5
 8007736:	f000 ff97 	bl	8008668 <_sbrk_r>
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	d00a      	beq.n	8007754 <sbrk_aligned+0x34>
 800773e:	1cc4      	adds	r4, r0, #3
 8007740:	f024 0403 	bic.w	r4, r4, #3
 8007744:	42a0      	cmp	r0, r4
 8007746:	d007      	beq.n	8007758 <sbrk_aligned+0x38>
 8007748:	1a21      	subs	r1, r4, r0
 800774a:	4628      	mov	r0, r5
 800774c:	f000 ff8c 	bl	8008668 <_sbrk_r>
 8007750:	3001      	adds	r0, #1
 8007752:	d101      	bne.n	8007758 <sbrk_aligned+0x38>
 8007754:	f04f 34ff 	mov.w	r4, #4294967295
 8007758:	4620      	mov	r0, r4
 800775a:	bd70      	pop	{r4, r5, r6, pc}
 800775c:	20000a98 	.word	0x20000a98

08007760 <_malloc_r>:
 8007760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007764:	1ccd      	adds	r5, r1, #3
 8007766:	f025 0503 	bic.w	r5, r5, #3
 800776a:	3508      	adds	r5, #8
 800776c:	2d0c      	cmp	r5, #12
 800776e:	bf38      	it	cc
 8007770:	250c      	movcc	r5, #12
 8007772:	2d00      	cmp	r5, #0
 8007774:	4607      	mov	r7, r0
 8007776:	db01      	blt.n	800777c <_malloc_r+0x1c>
 8007778:	42a9      	cmp	r1, r5
 800777a:	d905      	bls.n	8007788 <_malloc_r+0x28>
 800777c:	230c      	movs	r3, #12
 800777e:	2600      	movs	r6, #0
 8007780:	603b      	str	r3, [r7, #0]
 8007782:	4630      	mov	r0, r6
 8007784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007788:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800785c <_malloc_r+0xfc>
 800778c:	f000 f868 	bl	8007860 <__malloc_lock>
 8007790:	f8d8 3000 	ldr.w	r3, [r8]
 8007794:	461c      	mov	r4, r3
 8007796:	bb5c      	cbnz	r4, 80077f0 <_malloc_r+0x90>
 8007798:	4629      	mov	r1, r5
 800779a:	4638      	mov	r0, r7
 800779c:	f7ff ffc0 	bl	8007720 <sbrk_aligned>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	4604      	mov	r4, r0
 80077a4:	d155      	bne.n	8007852 <_malloc_r+0xf2>
 80077a6:	f8d8 4000 	ldr.w	r4, [r8]
 80077aa:	4626      	mov	r6, r4
 80077ac:	2e00      	cmp	r6, #0
 80077ae:	d145      	bne.n	800783c <_malloc_r+0xdc>
 80077b0:	2c00      	cmp	r4, #0
 80077b2:	d048      	beq.n	8007846 <_malloc_r+0xe6>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	4631      	mov	r1, r6
 80077b8:	4638      	mov	r0, r7
 80077ba:	eb04 0903 	add.w	r9, r4, r3
 80077be:	f000 ff53 	bl	8008668 <_sbrk_r>
 80077c2:	4581      	cmp	r9, r0
 80077c4:	d13f      	bne.n	8007846 <_malloc_r+0xe6>
 80077c6:	6821      	ldr	r1, [r4, #0]
 80077c8:	4638      	mov	r0, r7
 80077ca:	1a6d      	subs	r5, r5, r1
 80077cc:	4629      	mov	r1, r5
 80077ce:	f7ff ffa7 	bl	8007720 <sbrk_aligned>
 80077d2:	3001      	adds	r0, #1
 80077d4:	d037      	beq.n	8007846 <_malloc_r+0xe6>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	442b      	add	r3, r5
 80077da:	6023      	str	r3, [r4, #0]
 80077dc:	f8d8 3000 	ldr.w	r3, [r8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d038      	beq.n	8007856 <_malloc_r+0xf6>
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	42a2      	cmp	r2, r4
 80077e8:	d12b      	bne.n	8007842 <_malloc_r+0xe2>
 80077ea:	2200      	movs	r2, #0
 80077ec:	605a      	str	r2, [r3, #4]
 80077ee:	e00f      	b.n	8007810 <_malloc_r+0xb0>
 80077f0:	6822      	ldr	r2, [r4, #0]
 80077f2:	1b52      	subs	r2, r2, r5
 80077f4:	d41f      	bmi.n	8007836 <_malloc_r+0xd6>
 80077f6:	2a0b      	cmp	r2, #11
 80077f8:	d917      	bls.n	800782a <_malloc_r+0xca>
 80077fa:	1961      	adds	r1, r4, r5
 80077fc:	42a3      	cmp	r3, r4
 80077fe:	6025      	str	r5, [r4, #0]
 8007800:	bf18      	it	ne
 8007802:	6059      	strne	r1, [r3, #4]
 8007804:	6863      	ldr	r3, [r4, #4]
 8007806:	bf08      	it	eq
 8007808:	f8c8 1000 	streq.w	r1, [r8]
 800780c:	5162      	str	r2, [r4, r5]
 800780e:	604b      	str	r3, [r1, #4]
 8007810:	4638      	mov	r0, r7
 8007812:	f104 060b 	add.w	r6, r4, #11
 8007816:	f000 f829 	bl	800786c <__malloc_unlock>
 800781a:	f026 0607 	bic.w	r6, r6, #7
 800781e:	1d23      	adds	r3, r4, #4
 8007820:	1af2      	subs	r2, r6, r3
 8007822:	d0ae      	beq.n	8007782 <_malloc_r+0x22>
 8007824:	1b9b      	subs	r3, r3, r6
 8007826:	50a3      	str	r3, [r4, r2]
 8007828:	e7ab      	b.n	8007782 <_malloc_r+0x22>
 800782a:	42a3      	cmp	r3, r4
 800782c:	6862      	ldr	r2, [r4, #4]
 800782e:	d1dd      	bne.n	80077ec <_malloc_r+0x8c>
 8007830:	f8c8 2000 	str.w	r2, [r8]
 8007834:	e7ec      	b.n	8007810 <_malloc_r+0xb0>
 8007836:	4623      	mov	r3, r4
 8007838:	6864      	ldr	r4, [r4, #4]
 800783a:	e7ac      	b.n	8007796 <_malloc_r+0x36>
 800783c:	4634      	mov	r4, r6
 800783e:	6876      	ldr	r6, [r6, #4]
 8007840:	e7b4      	b.n	80077ac <_malloc_r+0x4c>
 8007842:	4613      	mov	r3, r2
 8007844:	e7cc      	b.n	80077e0 <_malloc_r+0x80>
 8007846:	230c      	movs	r3, #12
 8007848:	4638      	mov	r0, r7
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	f000 f80e 	bl	800786c <__malloc_unlock>
 8007850:	e797      	b.n	8007782 <_malloc_r+0x22>
 8007852:	6025      	str	r5, [r4, #0]
 8007854:	e7dc      	b.n	8007810 <_malloc_r+0xb0>
 8007856:	605b      	str	r3, [r3, #4]
 8007858:	deff      	udf	#255	; 0xff
 800785a:	bf00      	nop
 800785c:	20000a94 	.word	0x20000a94

08007860 <__malloc_lock>:
 8007860:	4801      	ldr	r0, [pc, #4]	; (8007868 <__malloc_lock+0x8>)
 8007862:	f000 bf4e 	b.w	8008702 <__retarget_lock_acquire_recursive>
 8007866:	bf00      	nop
 8007868:	20000bdc 	.word	0x20000bdc

0800786c <__malloc_unlock>:
 800786c:	4801      	ldr	r0, [pc, #4]	; (8007874 <__malloc_unlock+0x8>)
 800786e:	f000 bf49 	b.w	8008704 <__retarget_lock_release_recursive>
 8007872:	bf00      	nop
 8007874:	20000bdc 	.word	0x20000bdc

08007878 <__cvt>:
 8007878:	2b00      	cmp	r3, #0
 800787a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800787e:	461f      	mov	r7, r3
 8007880:	bfbb      	ittet	lt
 8007882:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007886:	461f      	movlt	r7, r3
 8007888:	2300      	movge	r3, #0
 800788a:	232d      	movlt	r3, #45	; 0x2d
 800788c:	b088      	sub	sp, #32
 800788e:	4614      	mov	r4, r2
 8007890:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007892:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007894:	7013      	strb	r3, [r2, #0]
 8007896:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007898:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800789c:	f023 0820 	bic.w	r8, r3, #32
 80078a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078a4:	d005      	beq.n	80078b2 <__cvt+0x3a>
 80078a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80078aa:	d100      	bne.n	80078ae <__cvt+0x36>
 80078ac:	3501      	adds	r5, #1
 80078ae:	2302      	movs	r3, #2
 80078b0:	e000      	b.n	80078b4 <__cvt+0x3c>
 80078b2:	2303      	movs	r3, #3
 80078b4:	aa07      	add	r2, sp, #28
 80078b6:	9204      	str	r2, [sp, #16]
 80078b8:	aa06      	add	r2, sp, #24
 80078ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80078be:	e9cd 3500 	strd	r3, r5, [sp]
 80078c2:	4622      	mov	r2, r4
 80078c4:	463b      	mov	r3, r7
 80078c6:	f000 ffeb 	bl	80088a0 <_dtoa_r>
 80078ca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80078ce:	4606      	mov	r6, r0
 80078d0:	d102      	bne.n	80078d8 <__cvt+0x60>
 80078d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078d4:	07db      	lsls	r3, r3, #31
 80078d6:	d522      	bpl.n	800791e <__cvt+0xa6>
 80078d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078dc:	eb06 0905 	add.w	r9, r6, r5
 80078e0:	d110      	bne.n	8007904 <__cvt+0x8c>
 80078e2:	7833      	ldrb	r3, [r6, #0]
 80078e4:	2b30      	cmp	r3, #48	; 0x30
 80078e6:	d10a      	bne.n	80078fe <__cvt+0x86>
 80078e8:	2200      	movs	r2, #0
 80078ea:	2300      	movs	r3, #0
 80078ec:	4620      	mov	r0, r4
 80078ee:	4639      	mov	r1, r7
 80078f0:	f7f9 f85a 	bl	80009a8 <__aeabi_dcmpeq>
 80078f4:	b918      	cbnz	r0, 80078fe <__cvt+0x86>
 80078f6:	f1c5 0501 	rsb	r5, r5, #1
 80078fa:	f8ca 5000 	str.w	r5, [sl]
 80078fe:	f8da 3000 	ldr.w	r3, [sl]
 8007902:	4499      	add	r9, r3
 8007904:	2200      	movs	r2, #0
 8007906:	2300      	movs	r3, #0
 8007908:	4620      	mov	r0, r4
 800790a:	4639      	mov	r1, r7
 800790c:	f7f9 f84c 	bl	80009a8 <__aeabi_dcmpeq>
 8007910:	b108      	cbz	r0, 8007916 <__cvt+0x9e>
 8007912:	f8cd 901c 	str.w	r9, [sp, #28]
 8007916:	2230      	movs	r2, #48	; 0x30
 8007918:	9b07      	ldr	r3, [sp, #28]
 800791a:	454b      	cmp	r3, r9
 800791c:	d307      	bcc.n	800792e <__cvt+0xb6>
 800791e:	4630      	mov	r0, r6
 8007920:	9b07      	ldr	r3, [sp, #28]
 8007922:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007924:	1b9b      	subs	r3, r3, r6
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	b008      	add	sp, #32
 800792a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792e:	1c59      	adds	r1, r3, #1
 8007930:	9107      	str	r1, [sp, #28]
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	e7f0      	b.n	8007918 <__cvt+0xa0>

08007936 <__exponent>:
 8007936:	4603      	mov	r3, r0
 8007938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800793a:	2900      	cmp	r1, #0
 800793c:	f803 2b02 	strb.w	r2, [r3], #2
 8007940:	bfb6      	itet	lt
 8007942:	222d      	movlt	r2, #45	; 0x2d
 8007944:	222b      	movge	r2, #43	; 0x2b
 8007946:	4249      	neglt	r1, r1
 8007948:	2909      	cmp	r1, #9
 800794a:	7042      	strb	r2, [r0, #1]
 800794c:	dd2a      	ble.n	80079a4 <__exponent+0x6e>
 800794e:	f10d 0207 	add.w	r2, sp, #7
 8007952:	4617      	mov	r7, r2
 8007954:	260a      	movs	r6, #10
 8007956:	fb91 f5f6 	sdiv	r5, r1, r6
 800795a:	4694      	mov	ip, r2
 800795c:	fb06 1415 	mls	r4, r6, r5, r1
 8007960:	3430      	adds	r4, #48	; 0x30
 8007962:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007966:	460c      	mov	r4, r1
 8007968:	2c63      	cmp	r4, #99	; 0x63
 800796a:	4629      	mov	r1, r5
 800796c:	f102 32ff 	add.w	r2, r2, #4294967295
 8007970:	dcf1      	bgt.n	8007956 <__exponent+0x20>
 8007972:	3130      	adds	r1, #48	; 0x30
 8007974:	f1ac 0402 	sub.w	r4, ip, #2
 8007978:	f802 1c01 	strb.w	r1, [r2, #-1]
 800797c:	4622      	mov	r2, r4
 800797e:	1c41      	adds	r1, r0, #1
 8007980:	42ba      	cmp	r2, r7
 8007982:	d30a      	bcc.n	800799a <__exponent+0x64>
 8007984:	f10d 0209 	add.w	r2, sp, #9
 8007988:	eba2 020c 	sub.w	r2, r2, ip
 800798c:	42bc      	cmp	r4, r7
 800798e:	bf88      	it	hi
 8007990:	2200      	movhi	r2, #0
 8007992:	4413      	add	r3, r2
 8007994:	1a18      	subs	r0, r3, r0
 8007996:	b003      	add	sp, #12
 8007998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800799a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800799e:	f801 5f01 	strb.w	r5, [r1, #1]!
 80079a2:	e7ed      	b.n	8007980 <__exponent+0x4a>
 80079a4:	2330      	movs	r3, #48	; 0x30
 80079a6:	3130      	adds	r1, #48	; 0x30
 80079a8:	7083      	strb	r3, [r0, #2]
 80079aa:	70c1      	strb	r1, [r0, #3]
 80079ac:	1d03      	adds	r3, r0, #4
 80079ae:	e7f1      	b.n	8007994 <__exponent+0x5e>

080079b0 <_printf_float>:
 80079b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b4:	b091      	sub	sp, #68	; 0x44
 80079b6:	460c      	mov	r4, r1
 80079b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80079bc:	4616      	mov	r6, r2
 80079be:	461f      	mov	r7, r3
 80079c0:	4605      	mov	r5, r0
 80079c2:	f000 fe19 	bl	80085f8 <_localeconv_r>
 80079c6:	6803      	ldr	r3, [r0, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	9309      	str	r3, [sp, #36]	; 0x24
 80079cc:	f7f8 fbc0 	bl	8000150 <strlen>
 80079d0:	2300      	movs	r3, #0
 80079d2:	930e      	str	r3, [sp, #56]	; 0x38
 80079d4:	f8d8 3000 	ldr.w	r3, [r8]
 80079d8:	900a      	str	r0, [sp, #40]	; 0x28
 80079da:	3307      	adds	r3, #7
 80079dc:	f023 0307 	bic.w	r3, r3, #7
 80079e0:	f103 0208 	add.w	r2, r3, #8
 80079e4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80079e8:	f8d4 b000 	ldr.w	fp, [r4]
 80079ec:	f8c8 2000 	str.w	r2, [r8]
 80079f0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80079f4:	4652      	mov	r2, sl
 80079f6:	4643      	mov	r3, r8
 80079f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079fc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a02:	f04f 32ff 	mov.w	r2, #4294967295
 8007a06:	4650      	mov	r0, sl
 8007a08:	4b9c      	ldr	r3, [pc, #624]	; (8007c7c <_printf_float+0x2cc>)
 8007a0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a0c:	f7f8 fffe 	bl	8000a0c <__aeabi_dcmpun>
 8007a10:	bb70      	cbnz	r0, 8007a70 <_printf_float+0xc0>
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	4650      	mov	r0, sl
 8007a18:	4b98      	ldr	r3, [pc, #608]	; (8007c7c <_printf_float+0x2cc>)
 8007a1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a1c:	f7f8 ffd8 	bl	80009d0 <__aeabi_dcmple>
 8007a20:	bb30      	cbnz	r0, 8007a70 <_printf_float+0xc0>
 8007a22:	2200      	movs	r2, #0
 8007a24:	2300      	movs	r3, #0
 8007a26:	4650      	mov	r0, sl
 8007a28:	4641      	mov	r1, r8
 8007a2a:	f7f8 ffc7 	bl	80009bc <__aeabi_dcmplt>
 8007a2e:	b110      	cbz	r0, 8007a36 <_printf_float+0x86>
 8007a30:	232d      	movs	r3, #45	; 0x2d
 8007a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a36:	4a92      	ldr	r2, [pc, #584]	; (8007c80 <_printf_float+0x2d0>)
 8007a38:	4b92      	ldr	r3, [pc, #584]	; (8007c84 <_printf_float+0x2d4>)
 8007a3a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007a3e:	bf94      	ite	ls
 8007a40:	4690      	movls	r8, r2
 8007a42:	4698      	movhi	r8, r3
 8007a44:	2303      	movs	r3, #3
 8007a46:	f04f 0a00 	mov.w	sl, #0
 8007a4a:	6123      	str	r3, [r4, #16]
 8007a4c:	f02b 0304 	bic.w	r3, fp, #4
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	4633      	mov	r3, r6
 8007a54:	4621      	mov	r1, r4
 8007a56:	4628      	mov	r0, r5
 8007a58:	9700      	str	r7, [sp, #0]
 8007a5a:	aa0f      	add	r2, sp, #60	; 0x3c
 8007a5c:	f000 f9d6 	bl	8007e0c <_printf_common>
 8007a60:	3001      	adds	r0, #1
 8007a62:	f040 8090 	bne.w	8007b86 <_printf_float+0x1d6>
 8007a66:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6a:	b011      	add	sp, #68	; 0x44
 8007a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a70:	4652      	mov	r2, sl
 8007a72:	4643      	mov	r3, r8
 8007a74:	4650      	mov	r0, sl
 8007a76:	4641      	mov	r1, r8
 8007a78:	f7f8 ffc8 	bl	8000a0c <__aeabi_dcmpun>
 8007a7c:	b148      	cbz	r0, 8007a92 <_printf_float+0xe2>
 8007a7e:	f1b8 0f00 	cmp.w	r8, #0
 8007a82:	bfb8      	it	lt
 8007a84:	232d      	movlt	r3, #45	; 0x2d
 8007a86:	4a80      	ldr	r2, [pc, #512]	; (8007c88 <_printf_float+0x2d8>)
 8007a88:	bfb8      	it	lt
 8007a8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a8e:	4b7f      	ldr	r3, [pc, #508]	; (8007c8c <_printf_float+0x2dc>)
 8007a90:	e7d3      	b.n	8007a3a <_printf_float+0x8a>
 8007a92:	6863      	ldr	r3, [r4, #4]
 8007a94:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	d142      	bne.n	8007b22 <_printf_float+0x172>
 8007a9c:	2306      	movs	r3, #6
 8007a9e:	6063      	str	r3, [r4, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	9206      	str	r2, [sp, #24]
 8007aa4:	aa0e      	add	r2, sp, #56	; 0x38
 8007aa6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007aaa:	aa0d      	add	r2, sp, #52	; 0x34
 8007aac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007ab0:	9203      	str	r2, [sp, #12]
 8007ab2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007ab6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007aba:	6023      	str	r3, [r4, #0]
 8007abc:	6863      	ldr	r3, [r4, #4]
 8007abe:	4652      	mov	r2, sl
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	4643      	mov	r3, r8
 8007ac6:	910b      	str	r1, [sp, #44]	; 0x2c
 8007ac8:	f7ff fed6 	bl	8007878 <__cvt>
 8007acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ace:	4680      	mov	r8, r0
 8007ad0:	2947      	cmp	r1, #71	; 0x47
 8007ad2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007ad4:	d108      	bne.n	8007ae8 <_printf_float+0x138>
 8007ad6:	1cc8      	adds	r0, r1, #3
 8007ad8:	db02      	blt.n	8007ae0 <_printf_float+0x130>
 8007ada:	6863      	ldr	r3, [r4, #4]
 8007adc:	4299      	cmp	r1, r3
 8007ade:	dd40      	ble.n	8007b62 <_printf_float+0x1b2>
 8007ae0:	f1a9 0902 	sub.w	r9, r9, #2
 8007ae4:	fa5f f989 	uxtb.w	r9, r9
 8007ae8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007aec:	d81f      	bhi.n	8007b2e <_printf_float+0x17e>
 8007aee:	464a      	mov	r2, r9
 8007af0:	3901      	subs	r1, #1
 8007af2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007af6:	910d      	str	r1, [sp, #52]	; 0x34
 8007af8:	f7ff ff1d 	bl	8007936 <__exponent>
 8007afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007afe:	4682      	mov	sl, r0
 8007b00:	1813      	adds	r3, r2, r0
 8007b02:	2a01      	cmp	r2, #1
 8007b04:	6123      	str	r3, [r4, #16]
 8007b06:	dc02      	bgt.n	8007b0e <_printf_float+0x15e>
 8007b08:	6822      	ldr	r2, [r4, #0]
 8007b0a:	07d2      	lsls	r2, r2, #31
 8007b0c:	d501      	bpl.n	8007b12 <_printf_float+0x162>
 8007b0e:	3301      	adds	r3, #1
 8007b10:	6123      	str	r3, [r4, #16]
 8007b12:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d09b      	beq.n	8007a52 <_printf_float+0xa2>
 8007b1a:	232d      	movs	r3, #45	; 0x2d
 8007b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b20:	e797      	b.n	8007a52 <_printf_float+0xa2>
 8007b22:	2947      	cmp	r1, #71	; 0x47
 8007b24:	d1bc      	bne.n	8007aa0 <_printf_float+0xf0>
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1ba      	bne.n	8007aa0 <_printf_float+0xf0>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e7b7      	b.n	8007a9e <_printf_float+0xee>
 8007b2e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007b32:	d118      	bne.n	8007b66 <_printf_float+0x1b6>
 8007b34:	2900      	cmp	r1, #0
 8007b36:	6863      	ldr	r3, [r4, #4]
 8007b38:	dd0b      	ble.n	8007b52 <_printf_float+0x1a2>
 8007b3a:	6121      	str	r1, [r4, #16]
 8007b3c:	b913      	cbnz	r3, 8007b44 <_printf_float+0x194>
 8007b3e:	6822      	ldr	r2, [r4, #0]
 8007b40:	07d0      	lsls	r0, r2, #31
 8007b42:	d502      	bpl.n	8007b4a <_printf_float+0x19a>
 8007b44:	3301      	adds	r3, #1
 8007b46:	440b      	add	r3, r1
 8007b48:	6123      	str	r3, [r4, #16]
 8007b4a:	f04f 0a00 	mov.w	sl, #0
 8007b4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b50:	e7df      	b.n	8007b12 <_printf_float+0x162>
 8007b52:	b913      	cbnz	r3, 8007b5a <_printf_float+0x1aa>
 8007b54:	6822      	ldr	r2, [r4, #0]
 8007b56:	07d2      	lsls	r2, r2, #31
 8007b58:	d501      	bpl.n	8007b5e <_printf_float+0x1ae>
 8007b5a:	3302      	adds	r3, #2
 8007b5c:	e7f4      	b.n	8007b48 <_printf_float+0x198>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e7f2      	b.n	8007b48 <_printf_float+0x198>
 8007b62:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b68:	4299      	cmp	r1, r3
 8007b6a:	db05      	blt.n	8007b78 <_printf_float+0x1c8>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	6121      	str	r1, [r4, #16]
 8007b70:	07d8      	lsls	r0, r3, #31
 8007b72:	d5ea      	bpl.n	8007b4a <_printf_float+0x19a>
 8007b74:	1c4b      	adds	r3, r1, #1
 8007b76:	e7e7      	b.n	8007b48 <_printf_float+0x198>
 8007b78:	2900      	cmp	r1, #0
 8007b7a:	bfcc      	ite	gt
 8007b7c:	2201      	movgt	r2, #1
 8007b7e:	f1c1 0202 	rsble	r2, r1, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	e7e0      	b.n	8007b48 <_printf_float+0x198>
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	055a      	lsls	r2, r3, #21
 8007b8a:	d407      	bmi.n	8007b9c <_printf_float+0x1ec>
 8007b8c:	6923      	ldr	r3, [r4, #16]
 8007b8e:	4642      	mov	r2, r8
 8007b90:	4631      	mov	r1, r6
 8007b92:	4628      	mov	r0, r5
 8007b94:	47b8      	blx	r7
 8007b96:	3001      	adds	r0, #1
 8007b98:	d12b      	bne.n	8007bf2 <_printf_float+0x242>
 8007b9a:	e764      	b.n	8007a66 <_printf_float+0xb6>
 8007b9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007ba0:	f240 80dd 	bls.w	8007d5e <_printf_float+0x3ae>
 8007ba4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2300      	movs	r3, #0
 8007bac:	f7f8 fefc 	bl	80009a8 <__aeabi_dcmpeq>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d033      	beq.n	8007c1c <_printf_float+0x26c>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4628      	mov	r0, r5
 8007bba:	4a35      	ldr	r2, [pc, #212]	; (8007c90 <_printf_float+0x2e0>)
 8007bbc:	47b8      	blx	r7
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	f43f af51 	beq.w	8007a66 <_printf_float+0xb6>
 8007bc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	db02      	blt.n	8007bd2 <_printf_float+0x222>
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	07d8      	lsls	r0, r3, #31
 8007bd0:	d50f      	bpl.n	8007bf2 <_printf_float+0x242>
 8007bd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	4628      	mov	r0, r5
 8007bda:	47b8      	blx	r7
 8007bdc:	3001      	adds	r0, #1
 8007bde:	f43f af42 	beq.w	8007a66 <_printf_float+0xb6>
 8007be2:	f04f 0800 	mov.w	r8, #0
 8007be6:	f104 091a 	add.w	r9, r4, #26
 8007bea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bec:	3b01      	subs	r3, #1
 8007bee:	4543      	cmp	r3, r8
 8007bf0:	dc09      	bgt.n	8007c06 <_printf_float+0x256>
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	079b      	lsls	r3, r3, #30
 8007bf6:	f100 8104 	bmi.w	8007e02 <_printf_float+0x452>
 8007bfa:	68e0      	ldr	r0, [r4, #12]
 8007bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bfe:	4298      	cmp	r0, r3
 8007c00:	bfb8      	it	lt
 8007c02:	4618      	movlt	r0, r3
 8007c04:	e731      	b.n	8007a6a <_printf_float+0xba>
 8007c06:	2301      	movs	r3, #1
 8007c08:	464a      	mov	r2, r9
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	47b8      	blx	r7
 8007c10:	3001      	adds	r0, #1
 8007c12:	f43f af28 	beq.w	8007a66 <_printf_float+0xb6>
 8007c16:	f108 0801 	add.w	r8, r8, #1
 8007c1a:	e7e6      	b.n	8007bea <_printf_float+0x23a>
 8007c1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	dc38      	bgt.n	8007c94 <_printf_float+0x2e4>
 8007c22:	2301      	movs	r3, #1
 8007c24:	4631      	mov	r1, r6
 8007c26:	4628      	mov	r0, r5
 8007c28:	4a19      	ldr	r2, [pc, #100]	; (8007c90 <_printf_float+0x2e0>)
 8007c2a:	47b8      	blx	r7
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	f43f af1a 	beq.w	8007a66 <_printf_float+0xb6>
 8007c32:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007c36:	4313      	orrs	r3, r2
 8007c38:	d102      	bne.n	8007c40 <_printf_float+0x290>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	07d9      	lsls	r1, r3, #31
 8007c3e:	d5d8      	bpl.n	8007bf2 <_printf_float+0x242>
 8007c40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c44:	4631      	mov	r1, r6
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b8      	blx	r7
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	f43f af0b 	beq.w	8007a66 <_printf_float+0xb6>
 8007c50:	f04f 0900 	mov.w	r9, #0
 8007c54:	f104 0a1a 	add.w	sl, r4, #26
 8007c58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c5a:	425b      	negs	r3, r3
 8007c5c:	454b      	cmp	r3, r9
 8007c5e:	dc01      	bgt.n	8007c64 <_printf_float+0x2b4>
 8007c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c62:	e794      	b.n	8007b8e <_printf_float+0x1de>
 8007c64:	2301      	movs	r3, #1
 8007c66:	4652      	mov	r2, sl
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f aef9 	beq.w	8007a66 <_printf_float+0xb6>
 8007c74:	f109 0901 	add.w	r9, r9, #1
 8007c78:	e7ee      	b.n	8007c58 <_printf_float+0x2a8>
 8007c7a:	bf00      	nop
 8007c7c:	7fefffff 	.word	0x7fefffff
 8007c80:	0800a923 	.word	0x0800a923
 8007c84:	0800a927 	.word	0x0800a927
 8007c88:	0800a92b 	.word	0x0800a92b
 8007c8c:	0800a92f 	.word	0x0800a92f
 8007c90:	0800a933 	.word	0x0800a933
 8007c94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	bfa8      	it	ge
 8007c9c:	461a      	movge	r2, r3
 8007c9e:	2a00      	cmp	r2, #0
 8007ca0:	4691      	mov	r9, r2
 8007ca2:	dc37      	bgt.n	8007d14 <_printf_float+0x364>
 8007ca4:	f04f 0b00 	mov.w	fp, #0
 8007ca8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cac:	f104 021a 	add.w	r2, r4, #26
 8007cb0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007cb4:	ebaa 0309 	sub.w	r3, sl, r9
 8007cb8:	455b      	cmp	r3, fp
 8007cba:	dc33      	bgt.n	8007d24 <_printf_float+0x374>
 8007cbc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	db3b      	blt.n	8007d3c <_printf_float+0x38c>
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	07da      	lsls	r2, r3, #31
 8007cc8:	d438      	bmi.n	8007d3c <_printf_float+0x38c>
 8007cca:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007cce:	eba2 0903 	sub.w	r9, r2, r3
 8007cd2:	eba2 020a 	sub.w	r2, r2, sl
 8007cd6:	4591      	cmp	r9, r2
 8007cd8:	bfa8      	it	ge
 8007cda:	4691      	movge	r9, r2
 8007cdc:	f1b9 0f00 	cmp.w	r9, #0
 8007ce0:	dc34      	bgt.n	8007d4c <_printf_float+0x39c>
 8007ce2:	f04f 0800 	mov.w	r8, #0
 8007ce6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cea:	f104 0a1a 	add.w	sl, r4, #26
 8007cee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007cf2:	1a9b      	subs	r3, r3, r2
 8007cf4:	eba3 0309 	sub.w	r3, r3, r9
 8007cf8:	4543      	cmp	r3, r8
 8007cfa:	f77f af7a 	ble.w	8007bf2 <_printf_float+0x242>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4652      	mov	r2, sl
 8007d02:	4631      	mov	r1, r6
 8007d04:	4628      	mov	r0, r5
 8007d06:	47b8      	blx	r7
 8007d08:	3001      	adds	r0, #1
 8007d0a:	f43f aeac 	beq.w	8007a66 <_printf_float+0xb6>
 8007d0e:	f108 0801 	add.w	r8, r8, #1
 8007d12:	e7ec      	b.n	8007cee <_printf_float+0x33e>
 8007d14:	4613      	mov	r3, r2
 8007d16:	4631      	mov	r1, r6
 8007d18:	4642      	mov	r2, r8
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	47b8      	blx	r7
 8007d1e:	3001      	adds	r0, #1
 8007d20:	d1c0      	bne.n	8007ca4 <_printf_float+0x2f4>
 8007d22:	e6a0      	b.n	8007a66 <_printf_float+0xb6>
 8007d24:	2301      	movs	r3, #1
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	920b      	str	r2, [sp, #44]	; 0x2c
 8007d2c:	47b8      	blx	r7
 8007d2e:	3001      	adds	r0, #1
 8007d30:	f43f ae99 	beq.w	8007a66 <_printf_float+0xb6>
 8007d34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d36:	f10b 0b01 	add.w	fp, fp, #1
 8007d3a:	e7b9      	b.n	8007cb0 <_printf_float+0x300>
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d42:	4628      	mov	r0, r5
 8007d44:	47b8      	blx	r7
 8007d46:	3001      	adds	r0, #1
 8007d48:	d1bf      	bne.n	8007cca <_printf_float+0x31a>
 8007d4a:	e68c      	b.n	8007a66 <_printf_float+0xb6>
 8007d4c:	464b      	mov	r3, r9
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4628      	mov	r0, r5
 8007d52:	eb08 020a 	add.w	r2, r8, sl
 8007d56:	47b8      	blx	r7
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d1c2      	bne.n	8007ce2 <_printf_float+0x332>
 8007d5c:	e683      	b.n	8007a66 <_printf_float+0xb6>
 8007d5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d60:	2a01      	cmp	r2, #1
 8007d62:	dc01      	bgt.n	8007d68 <_printf_float+0x3b8>
 8007d64:	07db      	lsls	r3, r3, #31
 8007d66:	d539      	bpl.n	8007ddc <_printf_float+0x42c>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4642      	mov	r2, r8
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4628      	mov	r0, r5
 8007d70:	47b8      	blx	r7
 8007d72:	3001      	adds	r0, #1
 8007d74:	f43f ae77 	beq.w	8007a66 <_printf_float+0xb6>
 8007d78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4628      	mov	r0, r5
 8007d80:	47b8      	blx	r7
 8007d82:	3001      	adds	r0, #1
 8007d84:	f43f ae6f 	beq.w	8007a66 <_printf_float+0xb6>
 8007d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007d94:	f7f8 fe08 	bl	80009a8 <__aeabi_dcmpeq>
 8007d98:	b9d8      	cbnz	r0, 8007dd2 <_printf_float+0x422>
 8007d9a:	f109 33ff 	add.w	r3, r9, #4294967295
 8007d9e:	f108 0201 	add.w	r2, r8, #1
 8007da2:	4631      	mov	r1, r6
 8007da4:	4628      	mov	r0, r5
 8007da6:	47b8      	blx	r7
 8007da8:	3001      	adds	r0, #1
 8007daa:	d10e      	bne.n	8007dca <_printf_float+0x41a>
 8007dac:	e65b      	b.n	8007a66 <_printf_float+0xb6>
 8007dae:	2301      	movs	r3, #1
 8007db0:	464a      	mov	r2, r9
 8007db2:	4631      	mov	r1, r6
 8007db4:	4628      	mov	r0, r5
 8007db6:	47b8      	blx	r7
 8007db8:	3001      	adds	r0, #1
 8007dba:	f43f ae54 	beq.w	8007a66 <_printf_float+0xb6>
 8007dbe:	f108 0801 	add.w	r8, r8, #1
 8007dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	4543      	cmp	r3, r8
 8007dc8:	dcf1      	bgt.n	8007dae <_printf_float+0x3fe>
 8007dca:	4653      	mov	r3, sl
 8007dcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007dd0:	e6de      	b.n	8007b90 <_printf_float+0x1e0>
 8007dd2:	f04f 0800 	mov.w	r8, #0
 8007dd6:	f104 091a 	add.w	r9, r4, #26
 8007dda:	e7f2      	b.n	8007dc2 <_printf_float+0x412>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	4642      	mov	r2, r8
 8007de0:	e7df      	b.n	8007da2 <_printf_float+0x3f2>
 8007de2:	2301      	movs	r3, #1
 8007de4:	464a      	mov	r2, r9
 8007de6:	4631      	mov	r1, r6
 8007de8:	4628      	mov	r0, r5
 8007dea:	47b8      	blx	r7
 8007dec:	3001      	adds	r0, #1
 8007dee:	f43f ae3a 	beq.w	8007a66 <_printf_float+0xb6>
 8007df2:	f108 0801 	add.w	r8, r8, #1
 8007df6:	68e3      	ldr	r3, [r4, #12]
 8007df8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007dfa:	1a5b      	subs	r3, r3, r1
 8007dfc:	4543      	cmp	r3, r8
 8007dfe:	dcf0      	bgt.n	8007de2 <_printf_float+0x432>
 8007e00:	e6fb      	b.n	8007bfa <_printf_float+0x24a>
 8007e02:	f04f 0800 	mov.w	r8, #0
 8007e06:	f104 0919 	add.w	r9, r4, #25
 8007e0a:	e7f4      	b.n	8007df6 <_printf_float+0x446>

08007e0c <_printf_common>:
 8007e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e10:	4616      	mov	r6, r2
 8007e12:	4699      	mov	r9, r3
 8007e14:	688a      	ldr	r2, [r1, #8]
 8007e16:	690b      	ldr	r3, [r1, #16]
 8007e18:	4607      	mov	r7, r0
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	bfb8      	it	lt
 8007e1e:	4613      	movlt	r3, r2
 8007e20:	6033      	str	r3, [r6, #0]
 8007e22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e26:	460c      	mov	r4, r1
 8007e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e2c:	b10a      	cbz	r2, 8007e32 <_printf_common+0x26>
 8007e2e:	3301      	adds	r3, #1
 8007e30:	6033      	str	r3, [r6, #0]
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	0699      	lsls	r1, r3, #26
 8007e36:	bf42      	ittt	mi
 8007e38:	6833      	ldrmi	r3, [r6, #0]
 8007e3a:	3302      	addmi	r3, #2
 8007e3c:	6033      	strmi	r3, [r6, #0]
 8007e3e:	6825      	ldr	r5, [r4, #0]
 8007e40:	f015 0506 	ands.w	r5, r5, #6
 8007e44:	d106      	bne.n	8007e54 <_printf_common+0x48>
 8007e46:	f104 0a19 	add.w	sl, r4, #25
 8007e4a:	68e3      	ldr	r3, [r4, #12]
 8007e4c:	6832      	ldr	r2, [r6, #0]
 8007e4e:	1a9b      	subs	r3, r3, r2
 8007e50:	42ab      	cmp	r3, r5
 8007e52:	dc2b      	bgt.n	8007eac <_printf_common+0xa0>
 8007e54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e58:	1e13      	subs	r3, r2, #0
 8007e5a:	6822      	ldr	r2, [r4, #0]
 8007e5c:	bf18      	it	ne
 8007e5e:	2301      	movne	r3, #1
 8007e60:	0692      	lsls	r2, r2, #26
 8007e62:	d430      	bmi.n	8007ec6 <_printf_common+0xba>
 8007e64:	4649      	mov	r1, r9
 8007e66:	4638      	mov	r0, r7
 8007e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e6c:	47c0      	blx	r8
 8007e6e:	3001      	adds	r0, #1
 8007e70:	d023      	beq.n	8007eba <_printf_common+0xae>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	6922      	ldr	r2, [r4, #16]
 8007e76:	f003 0306 	and.w	r3, r3, #6
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	bf14      	ite	ne
 8007e7e:	2500      	movne	r5, #0
 8007e80:	6833      	ldreq	r3, [r6, #0]
 8007e82:	f04f 0600 	mov.w	r6, #0
 8007e86:	bf08      	it	eq
 8007e88:	68e5      	ldreq	r5, [r4, #12]
 8007e8a:	f104 041a 	add.w	r4, r4, #26
 8007e8e:	bf08      	it	eq
 8007e90:	1aed      	subeq	r5, r5, r3
 8007e92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007e96:	bf08      	it	eq
 8007e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	bfc4      	itt	gt
 8007ea0:	1a9b      	subgt	r3, r3, r2
 8007ea2:	18ed      	addgt	r5, r5, r3
 8007ea4:	42b5      	cmp	r5, r6
 8007ea6:	d11a      	bne.n	8007ede <_printf_common+0xd2>
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	e008      	b.n	8007ebe <_printf_common+0xb2>
 8007eac:	2301      	movs	r3, #1
 8007eae:	4652      	mov	r2, sl
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	47c0      	blx	r8
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	d103      	bne.n	8007ec2 <_printf_common+0xb6>
 8007eba:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec2:	3501      	adds	r5, #1
 8007ec4:	e7c1      	b.n	8007e4a <_printf_common+0x3e>
 8007ec6:	2030      	movs	r0, #48	; 0x30
 8007ec8:	18e1      	adds	r1, r4, r3
 8007eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ed4:	4422      	add	r2, r4
 8007ed6:	3302      	adds	r3, #2
 8007ed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007edc:	e7c2      	b.n	8007e64 <_printf_common+0x58>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4622      	mov	r2, r4
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	47c0      	blx	r8
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d0e6      	beq.n	8007eba <_printf_common+0xae>
 8007eec:	3601      	adds	r6, #1
 8007eee:	e7d9      	b.n	8007ea4 <_printf_common+0x98>

08007ef0 <_printf_i>:
 8007ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef4:	7e0f      	ldrb	r7, [r1, #24]
 8007ef6:	4691      	mov	r9, r2
 8007ef8:	2f78      	cmp	r7, #120	; 0x78
 8007efa:	4680      	mov	r8, r0
 8007efc:	460c      	mov	r4, r1
 8007efe:	469a      	mov	sl, r3
 8007f00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f06:	d807      	bhi.n	8007f18 <_printf_i+0x28>
 8007f08:	2f62      	cmp	r7, #98	; 0x62
 8007f0a:	d80a      	bhi.n	8007f22 <_printf_i+0x32>
 8007f0c:	2f00      	cmp	r7, #0
 8007f0e:	f000 80d5 	beq.w	80080bc <_printf_i+0x1cc>
 8007f12:	2f58      	cmp	r7, #88	; 0x58
 8007f14:	f000 80c1 	beq.w	800809a <_printf_i+0x1aa>
 8007f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f20:	e03a      	b.n	8007f98 <_printf_i+0xa8>
 8007f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f26:	2b15      	cmp	r3, #21
 8007f28:	d8f6      	bhi.n	8007f18 <_printf_i+0x28>
 8007f2a:	a101      	add	r1, pc, #4	; (adr r1, 8007f30 <_printf_i+0x40>)
 8007f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f30:	08007f89 	.word	0x08007f89
 8007f34:	08007f9d 	.word	0x08007f9d
 8007f38:	08007f19 	.word	0x08007f19
 8007f3c:	08007f19 	.word	0x08007f19
 8007f40:	08007f19 	.word	0x08007f19
 8007f44:	08007f19 	.word	0x08007f19
 8007f48:	08007f9d 	.word	0x08007f9d
 8007f4c:	08007f19 	.word	0x08007f19
 8007f50:	08007f19 	.word	0x08007f19
 8007f54:	08007f19 	.word	0x08007f19
 8007f58:	08007f19 	.word	0x08007f19
 8007f5c:	080080a3 	.word	0x080080a3
 8007f60:	08007fc9 	.word	0x08007fc9
 8007f64:	0800805d 	.word	0x0800805d
 8007f68:	08007f19 	.word	0x08007f19
 8007f6c:	08007f19 	.word	0x08007f19
 8007f70:	080080c5 	.word	0x080080c5
 8007f74:	08007f19 	.word	0x08007f19
 8007f78:	08007fc9 	.word	0x08007fc9
 8007f7c:	08007f19 	.word	0x08007f19
 8007f80:	08007f19 	.word	0x08007f19
 8007f84:	08008065 	.word	0x08008065
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	1d1a      	adds	r2, r3, #4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	602a      	str	r2, [r5, #0]
 8007f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e0a0      	b.n	80080de <_printf_i+0x1ee>
 8007f9c:	6820      	ldr	r0, [r4, #0]
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	0607      	lsls	r7, r0, #24
 8007fa2:	f103 0104 	add.w	r1, r3, #4
 8007fa6:	6029      	str	r1, [r5, #0]
 8007fa8:	d501      	bpl.n	8007fae <_printf_i+0xbe>
 8007faa:	681e      	ldr	r6, [r3, #0]
 8007fac:	e003      	b.n	8007fb6 <_printf_i+0xc6>
 8007fae:	0646      	lsls	r6, r0, #25
 8007fb0:	d5fb      	bpl.n	8007faa <_printf_i+0xba>
 8007fb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fb6:	2e00      	cmp	r6, #0
 8007fb8:	da03      	bge.n	8007fc2 <_printf_i+0xd2>
 8007fba:	232d      	movs	r3, #45	; 0x2d
 8007fbc:	4276      	negs	r6, r6
 8007fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc2:	230a      	movs	r3, #10
 8007fc4:	4859      	ldr	r0, [pc, #356]	; (800812c <_printf_i+0x23c>)
 8007fc6:	e012      	b.n	8007fee <_printf_i+0xfe>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	6820      	ldr	r0, [r4, #0]
 8007fcc:	1d19      	adds	r1, r3, #4
 8007fce:	6029      	str	r1, [r5, #0]
 8007fd0:	0605      	lsls	r5, r0, #24
 8007fd2:	d501      	bpl.n	8007fd8 <_printf_i+0xe8>
 8007fd4:	681e      	ldr	r6, [r3, #0]
 8007fd6:	e002      	b.n	8007fde <_printf_i+0xee>
 8007fd8:	0641      	lsls	r1, r0, #25
 8007fda:	d5fb      	bpl.n	8007fd4 <_printf_i+0xe4>
 8007fdc:	881e      	ldrh	r6, [r3, #0]
 8007fde:	2f6f      	cmp	r7, #111	; 0x6f
 8007fe0:	bf0c      	ite	eq
 8007fe2:	2308      	moveq	r3, #8
 8007fe4:	230a      	movne	r3, #10
 8007fe6:	4851      	ldr	r0, [pc, #324]	; (800812c <_printf_i+0x23c>)
 8007fe8:	2100      	movs	r1, #0
 8007fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fee:	6865      	ldr	r5, [r4, #4]
 8007ff0:	2d00      	cmp	r5, #0
 8007ff2:	bfa8      	it	ge
 8007ff4:	6821      	ldrge	r1, [r4, #0]
 8007ff6:	60a5      	str	r5, [r4, #8]
 8007ff8:	bfa4      	itt	ge
 8007ffa:	f021 0104 	bicge.w	r1, r1, #4
 8007ffe:	6021      	strge	r1, [r4, #0]
 8008000:	b90e      	cbnz	r6, 8008006 <_printf_i+0x116>
 8008002:	2d00      	cmp	r5, #0
 8008004:	d04b      	beq.n	800809e <_printf_i+0x1ae>
 8008006:	4615      	mov	r5, r2
 8008008:	fbb6 f1f3 	udiv	r1, r6, r3
 800800c:	fb03 6711 	mls	r7, r3, r1, r6
 8008010:	5dc7      	ldrb	r7, [r0, r7]
 8008012:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008016:	4637      	mov	r7, r6
 8008018:	42bb      	cmp	r3, r7
 800801a:	460e      	mov	r6, r1
 800801c:	d9f4      	bls.n	8008008 <_printf_i+0x118>
 800801e:	2b08      	cmp	r3, #8
 8008020:	d10b      	bne.n	800803a <_printf_i+0x14a>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	07de      	lsls	r6, r3, #31
 8008026:	d508      	bpl.n	800803a <_printf_i+0x14a>
 8008028:	6923      	ldr	r3, [r4, #16]
 800802a:	6861      	ldr	r1, [r4, #4]
 800802c:	4299      	cmp	r1, r3
 800802e:	bfde      	ittt	le
 8008030:	2330      	movle	r3, #48	; 0x30
 8008032:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008036:	f105 35ff 	addle.w	r5, r5, #4294967295
 800803a:	1b52      	subs	r2, r2, r5
 800803c:	6122      	str	r2, [r4, #16]
 800803e:	464b      	mov	r3, r9
 8008040:	4621      	mov	r1, r4
 8008042:	4640      	mov	r0, r8
 8008044:	f8cd a000 	str.w	sl, [sp]
 8008048:	aa03      	add	r2, sp, #12
 800804a:	f7ff fedf 	bl	8007e0c <_printf_common>
 800804e:	3001      	adds	r0, #1
 8008050:	d14a      	bne.n	80080e8 <_printf_i+0x1f8>
 8008052:	f04f 30ff 	mov.w	r0, #4294967295
 8008056:	b004      	add	sp, #16
 8008058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	f043 0320 	orr.w	r3, r3, #32
 8008062:	6023      	str	r3, [r4, #0]
 8008064:	2778      	movs	r7, #120	; 0x78
 8008066:	4832      	ldr	r0, [pc, #200]	; (8008130 <_printf_i+0x240>)
 8008068:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	6829      	ldr	r1, [r5, #0]
 8008070:	061f      	lsls	r7, r3, #24
 8008072:	f851 6b04 	ldr.w	r6, [r1], #4
 8008076:	d402      	bmi.n	800807e <_printf_i+0x18e>
 8008078:	065f      	lsls	r7, r3, #25
 800807a:	bf48      	it	mi
 800807c:	b2b6      	uxthmi	r6, r6
 800807e:	07df      	lsls	r7, r3, #31
 8008080:	bf48      	it	mi
 8008082:	f043 0320 	orrmi.w	r3, r3, #32
 8008086:	6029      	str	r1, [r5, #0]
 8008088:	bf48      	it	mi
 800808a:	6023      	strmi	r3, [r4, #0]
 800808c:	b91e      	cbnz	r6, 8008096 <_printf_i+0x1a6>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	f023 0320 	bic.w	r3, r3, #32
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	2310      	movs	r3, #16
 8008098:	e7a6      	b.n	8007fe8 <_printf_i+0xf8>
 800809a:	4824      	ldr	r0, [pc, #144]	; (800812c <_printf_i+0x23c>)
 800809c:	e7e4      	b.n	8008068 <_printf_i+0x178>
 800809e:	4615      	mov	r5, r2
 80080a0:	e7bd      	b.n	800801e <_printf_i+0x12e>
 80080a2:	682b      	ldr	r3, [r5, #0]
 80080a4:	6826      	ldr	r6, [r4, #0]
 80080a6:	1d18      	adds	r0, r3, #4
 80080a8:	6961      	ldr	r1, [r4, #20]
 80080aa:	6028      	str	r0, [r5, #0]
 80080ac:	0635      	lsls	r5, r6, #24
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	d501      	bpl.n	80080b6 <_printf_i+0x1c6>
 80080b2:	6019      	str	r1, [r3, #0]
 80080b4:	e002      	b.n	80080bc <_printf_i+0x1cc>
 80080b6:	0670      	lsls	r0, r6, #25
 80080b8:	d5fb      	bpl.n	80080b2 <_printf_i+0x1c2>
 80080ba:	8019      	strh	r1, [r3, #0]
 80080bc:	2300      	movs	r3, #0
 80080be:	4615      	mov	r5, r2
 80080c0:	6123      	str	r3, [r4, #16]
 80080c2:	e7bc      	b.n	800803e <_printf_i+0x14e>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	2100      	movs	r1, #0
 80080c8:	1d1a      	adds	r2, r3, #4
 80080ca:	602a      	str	r2, [r5, #0]
 80080cc:	681d      	ldr	r5, [r3, #0]
 80080ce:	6862      	ldr	r2, [r4, #4]
 80080d0:	4628      	mov	r0, r5
 80080d2:	f000 fb20 	bl	8008716 <memchr>
 80080d6:	b108      	cbz	r0, 80080dc <_printf_i+0x1ec>
 80080d8:	1b40      	subs	r0, r0, r5
 80080da:	6060      	str	r0, [r4, #4]
 80080dc:	6863      	ldr	r3, [r4, #4]
 80080de:	6123      	str	r3, [r4, #16]
 80080e0:	2300      	movs	r3, #0
 80080e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080e6:	e7aa      	b.n	800803e <_printf_i+0x14e>
 80080e8:	462a      	mov	r2, r5
 80080ea:	4649      	mov	r1, r9
 80080ec:	4640      	mov	r0, r8
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	47d0      	blx	sl
 80080f2:	3001      	adds	r0, #1
 80080f4:	d0ad      	beq.n	8008052 <_printf_i+0x162>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	079b      	lsls	r3, r3, #30
 80080fa:	d413      	bmi.n	8008124 <_printf_i+0x234>
 80080fc:	68e0      	ldr	r0, [r4, #12]
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	4298      	cmp	r0, r3
 8008102:	bfb8      	it	lt
 8008104:	4618      	movlt	r0, r3
 8008106:	e7a6      	b.n	8008056 <_printf_i+0x166>
 8008108:	2301      	movs	r3, #1
 800810a:	4632      	mov	r2, r6
 800810c:	4649      	mov	r1, r9
 800810e:	4640      	mov	r0, r8
 8008110:	47d0      	blx	sl
 8008112:	3001      	adds	r0, #1
 8008114:	d09d      	beq.n	8008052 <_printf_i+0x162>
 8008116:	3501      	adds	r5, #1
 8008118:	68e3      	ldr	r3, [r4, #12]
 800811a:	9903      	ldr	r1, [sp, #12]
 800811c:	1a5b      	subs	r3, r3, r1
 800811e:	42ab      	cmp	r3, r5
 8008120:	dcf2      	bgt.n	8008108 <_printf_i+0x218>
 8008122:	e7eb      	b.n	80080fc <_printf_i+0x20c>
 8008124:	2500      	movs	r5, #0
 8008126:	f104 0619 	add.w	r6, r4, #25
 800812a:	e7f5      	b.n	8008118 <_printf_i+0x228>
 800812c:	0800a935 	.word	0x0800a935
 8008130:	0800a946 	.word	0x0800a946

08008134 <std>:
 8008134:	2300      	movs	r3, #0
 8008136:	b510      	push	{r4, lr}
 8008138:	4604      	mov	r4, r0
 800813a:	e9c0 3300 	strd	r3, r3, [r0]
 800813e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008142:	6083      	str	r3, [r0, #8]
 8008144:	8181      	strh	r1, [r0, #12]
 8008146:	6643      	str	r3, [r0, #100]	; 0x64
 8008148:	81c2      	strh	r2, [r0, #14]
 800814a:	6183      	str	r3, [r0, #24]
 800814c:	4619      	mov	r1, r3
 800814e:	2208      	movs	r2, #8
 8008150:	305c      	adds	r0, #92	; 0x5c
 8008152:	f000 fa17 	bl	8008584 <memset>
 8008156:	4b0d      	ldr	r3, [pc, #52]	; (800818c <std+0x58>)
 8008158:	6224      	str	r4, [r4, #32]
 800815a:	6263      	str	r3, [r4, #36]	; 0x24
 800815c:	4b0c      	ldr	r3, [pc, #48]	; (8008190 <std+0x5c>)
 800815e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008160:	4b0c      	ldr	r3, [pc, #48]	; (8008194 <std+0x60>)
 8008162:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008164:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <std+0x64>)
 8008166:	6323      	str	r3, [r4, #48]	; 0x30
 8008168:	4b0c      	ldr	r3, [pc, #48]	; (800819c <std+0x68>)
 800816a:	429c      	cmp	r4, r3
 800816c:	d006      	beq.n	800817c <std+0x48>
 800816e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008172:	4294      	cmp	r4, r2
 8008174:	d002      	beq.n	800817c <std+0x48>
 8008176:	33d0      	adds	r3, #208	; 0xd0
 8008178:	429c      	cmp	r4, r3
 800817a:	d105      	bne.n	8008188 <std+0x54>
 800817c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008184:	f000 babc 	b.w	8008700 <__retarget_lock_init_recursive>
 8008188:	bd10      	pop	{r4, pc}
 800818a:	bf00      	nop
 800818c:	080083d5 	.word	0x080083d5
 8008190:	080083f7 	.word	0x080083f7
 8008194:	0800842f 	.word	0x0800842f
 8008198:	08008453 	.word	0x08008453
 800819c:	20000a9c 	.word	0x20000a9c

080081a0 <stdio_exit_handler>:
 80081a0:	4a02      	ldr	r2, [pc, #8]	; (80081ac <stdio_exit_handler+0xc>)
 80081a2:	4903      	ldr	r1, [pc, #12]	; (80081b0 <stdio_exit_handler+0x10>)
 80081a4:	4803      	ldr	r0, [pc, #12]	; (80081b4 <stdio_exit_handler+0x14>)
 80081a6:	f000 b869 	b.w	800827c <_fwalk_sglue>
 80081aa:	bf00      	nop
 80081ac:	2000007c 	.word	0x2000007c
 80081b0:	0800a221 	.word	0x0800a221
 80081b4:	20000088 	.word	0x20000088

080081b8 <cleanup_stdio>:
 80081b8:	6841      	ldr	r1, [r0, #4]
 80081ba:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <cleanup_stdio+0x34>)
 80081bc:	b510      	push	{r4, lr}
 80081be:	4299      	cmp	r1, r3
 80081c0:	4604      	mov	r4, r0
 80081c2:	d001      	beq.n	80081c8 <cleanup_stdio+0x10>
 80081c4:	f002 f82c 	bl	800a220 <_fflush_r>
 80081c8:	68a1      	ldr	r1, [r4, #8]
 80081ca:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <cleanup_stdio+0x38>)
 80081cc:	4299      	cmp	r1, r3
 80081ce:	d002      	beq.n	80081d6 <cleanup_stdio+0x1e>
 80081d0:	4620      	mov	r0, r4
 80081d2:	f002 f825 	bl	800a220 <_fflush_r>
 80081d6:	68e1      	ldr	r1, [r4, #12]
 80081d8:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <cleanup_stdio+0x3c>)
 80081da:	4299      	cmp	r1, r3
 80081dc:	d004      	beq.n	80081e8 <cleanup_stdio+0x30>
 80081de:	4620      	mov	r0, r4
 80081e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e4:	f002 b81c 	b.w	800a220 <_fflush_r>
 80081e8:	bd10      	pop	{r4, pc}
 80081ea:	bf00      	nop
 80081ec:	20000a9c 	.word	0x20000a9c
 80081f0:	20000b04 	.word	0x20000b04
 80081f4:	20000b6c 	.word	0x20000b6c

080081f8 <global_stdio_init.part.0>:
 80081f8:	b510      	push	{r4, lr}
 80081fa:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <global_stdio_init.part.0+0x30>)
 80081fc:	4c0b      	ldr	r4, [pc, #44]	; (800822c <global_stdio_init.part.0+0x34>)
 80081fe:	4a0c      	ldr	r2, [pc, #48]	; (8008230 <global_stdio_init.part.0+0x38>)
 8008200:	4620      	mov	r0, r4
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	2104      	movs	r1, #4
 8008206:	2200      	movs	r2, #0
 8008208:	f7ff ff94 	bl	8008134 <std>
 800820c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008210:	2201      	movs	r2, #1
 8008212:	2109      	movs	r1, #9
 8008214:	f7ff ff8e 	bl	8008134 <std>
 8008218:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800821c:	2202      	movs	r2, #2
 800821e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008222:	2112      	movs	r1, #18
 8008224:	f7ff bf86 	b.w	8008134 <std>
 8008228:	20000bd4 	.word	0x20000bd4
 800822c:	20000a9c 	.word	0x20000a9c
 8008230:	080081a1 	.word	0x080081a1

08008234 <__sfp_lock_acquire>:
 8008234:	4801      	ldr	r0, [pc, #4]	; (800823c <__sfp_lock_acquire+0x8>)
 8008236:	f000 ba64 	b.w	8008702 <__retarget_lock_acquire_recursive>
 800823a:	bf00      	nop
 800823c:	20000bdd 	.word	0x20000bdd

08008240 <__sfp_lock_release>:
 8008240:	4801      	ldr	r0, [pc, #4]	; (8008248 <__sfp_lock_release+0x8>)
 8008242:	f000 ba5f 	b.w	8008704 <__retarget_lock_release_recursive>
 8008246:	bf00      	nop
 8008248:	20000bdd 	.word	0x20000bdd

0800824c <__sinit>:
 800824c:	b510      	push	{r4, lr}
 800824e:	4604      	mov	r4, r0
 8008250:	f7ff fff0 	bl	8008234 <__sfp_lock_acquire>
 8008254:	6a23      	ldr	r3, [r4, #32]
 8008256:	b11b      	cbz	r3, 8008260 <__sinit+0x14>
 8008258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800825c:	f7ff bff0 	b.w	8008240 <__sfp_lock_release>
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <__sinit+0x28>)
 8008262:	6223      	str	r3, [r4, #32]
 8008264:	4b04      	ldr	r3, [pc, #16]	; (8008278 <__sinit+0x2c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1f5      	bne.n	8008258 <__sinit+0xc>
 800826c:	f7ff ffc4 	bl	80081f8 <global_stdio_init.part.0>
 8008270:	e7f2      	b.n	8008258 <__sinit+0xc>
 8008272:	bf00      	nop
 8008274:	080081b9 	.word	0x080081b9
 8008278:	20000bd4 	.word	0x20000bd4

0800827c <_fwalk_sglue>:
 800827c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008280:	4607      	mov	r7, r0
 8008282:	4688      	mov	r8, r1
 8008284:	4614      	mov	r4, r2
 8008286:	2600      	movs	r6, #0
 8008288:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800828c:	f1b9 0901 	subs.w	r9, r9, #1
 8008290:	d505      	bpl.n	800829e <_fwalk_sglue+0x22>
 8008292:	6824      	ldr	r4, [r4, #0]
 8008294:	2c00      	cmp	r4, #0
 8008296:	d1f7      	bne.n	8008288 <_fwalk_sglue+0xc>
 8008298:	4630      	mov	r0, r6
 800829a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800829e:	89ab      	ldrh	r3, [r5, #12]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d907      	bls.n	80082b4 <_fwalk_sglue+0x38>
 80082a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082a8:	3301      	adds	r3, #1
 80082aa:	d003      	beq.n	80082b4 <_fwalk_sglue+0x38>
 80082ac:	4629      	mov	r1, r5
 80082ae:	4638      	mov	r0, r7
 80082b0:	47c0      	blx	r8
 80082b2:	4306      	orrs	r6, r0
 80082b4:	3568      	adds	r5, #104	; 0x68
 80082b6:	e7e9      	b.n	800828c <_fwalk_sglue+0x10>

080082b8 <iprintf>:
 80082b8:	b40f      	push	{r0, r1, r2, r3}
 80082ba:	b507      	push	{r0, r1, r2, lr}
 80082bc:	4906      	ldr	r1, [pc, #24]	; (80082d8 <iprintf+0x20>)
 80082be:	ab04      	add	r3, sp, #16
 80082c0:	6808      	ldr	r0, [r1, #0]
 80082c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082c6:	6881      	ldr	r1, [r0, #8]
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	f001 fe0d 	bl	8009ee8 <_vfiprintf_r>
 80082ce:	b003      	add	sp, #12
 80082d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082d4:	b004      	add	sp, #16
 80082d6:	4770      	bx	lr
 80082d8:	200000d4 	.word	0x200000d4

080082dc <_puts_r>:
 80082dc:	6a03      	ldr	r3, [r0, #32]
 80082de:	b570      	push	{r4, r5, r6, lr}
 80082e0:	4605      	mov	r5, r0
 80082e2:	460e      	mov	r6, r1
 80082e4:	6884      	ldr	r4, [r0, #8]
 80082e6:	b90b      	cbnz	r3, 80082ec <_puts_r+0x10>
 80082e8:	f7ff ffb0 	bl	800824c <__sinit>
 80082ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082ee:	07db      	lsls	r3, r3, #31
 80082f0:	d405      	bmi.n	80082fe <_puts_r+0x22>
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	0598      	lsls	r0, r3, #22
 80082f6:	d402      	bmi.n	80082fe <_puts_r+0x22>
 80082f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082fa:	f000 fa02 	bl	8008702 <__retarget_lock_acquire_recursive>
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	0719      	lsls	r1, r3, #28
 8008302:	d513      	bpl.n	800832c <_puts_r+0x50>
 8008304:	6923      	ldr	r3, [r4, #16]
 8008306:	b18b      	cbz	r3, 800832c <_puts_r+0x50>
 8008308:	3e01      	subs	r6, #1
 800830a:	68a3      	ldr	r3, [r4, #8]
 800830c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008310:	3b01      	subs	r3, #1
 8008312:	60a3      	str	r3, [r4, #8]
 8008314:	b9e9      	cbnz	r1, 8008352 <_puts_r+0x76>
 8008316:	2b00      	cmp	r3, #0
 8008318:	da2e      	bge.n	8008378 <_puts_r+0x9c>
 800831a:	4622      	mov	r2, r4
 800831c:	210a      	movs	r1, #10
 800831e:	4628      	mov	r0, r5
 8008320:	f000 f89b 	bl	800845a <__swbuf_r>
 8008324:	3001      	adds	r0, #1
 8008326:	d007      	beq.n	8008338 <_puts_r+0x5c>
 8008328:	250a      	movs	r5, #10
 800832a:	e007      	b.n	800833c <_puts_r+0x60>
 800832c:	4621      	mov	r1, r4
 800832e:	4628      	mov	r0, r5
 8008330:	f000 f8d0 	bl	80084d4 <__swsetup_r>
 8008334:	2800      	cmp	r0, #0
 8008336:	d0e7      	beq.n	8008308 <_puts_r+0x2c>
 8008338:	f04f 35ff 	mov.w	r5, #4294967295
 800833c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800833e:	07da      	lsls	r2, r3, #31
 8008340:	d405      	bmi.n	800834e <_puts_r+0x72>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	059b      	lsls	r3, r3, #22
 8008346:	d402      	bmi.n	800834e <_puts_r+0x72>
 8008348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800834a:	f000 f9db 	bl	8008704 <__retarget_lock_release_recursive>
 800834e:	4628      	mov	r0, r5
 8008350:	bd70      	pop	{r4, r5, r6, pc}
 8008352:	2b00      	cmp	r3, #0
 8008354:	da04      	bge.n	8008360 <_puts_r+0x84>
 8008356:	69a2      	ldr	r2, [r4, #24]
 8008358:	429a      	cmp	r2, r3
 800835a:	dc06      	bgt.n	800836a <_puts_r+0x8e>
 800835c:	290a      	cmp	r1, #10
 800835e:	d004      	beq.n	800836a <_puts_r+0x8e>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	6022      	str	r2, [r4, #0]
 8008366:	7019      	strb	r1, [r3, #0]
 8008368:	e7cf      	b.n	800830a <_puts_r+0x2e>
 800836a:	4622      	mov	r2, r4
 800836c:	4628      	mov	r0, r5
 800836e:	f000 f874 	bl	800845a <__swbuf_r>
 8008372:	3001      	adds	r0, #1
 8008374:	d1c9      	bne.n	800830a <_puts_r+0x2e>
 8008376:	e7df      	b.n	8008338 <_puts_r+0x5c>
 8008378:	250a      	movs	r5, #10
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	6022      	str	r2, [r4, #0]
 8008380:	701d      	strb	r5, [r3, #0]
 8008382:	e7db      	b.n	800833c <_puts_r+0x60>

08008384 <puts>:
 8008384:	4b02      	ldr	r3, [pc, #8]	; (8008390 <puts+0xc>)
 8008386:	4601      	mov	r1, r0
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	f7ff bfa7 	b.w	80082dc <_puts_r>
 800838e:	bf00      	nop
 8008390:	200000d4 	.word	0x200000d4

08008394 <siprintf>:
 8008394:	b40e      	push	{r1, r2, r3}
 8008396:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800839a:	b500      	push	{lr}
 800839c:	b09c      	sub	sp, #112	; 0x70
 800839e:	ab1d      	add	r3, sp, #116	; 0x74
 80083a0:	9002      	str	r0, [sp, #8]
 80083a2:	9006      	str	r0, [sp, #24]
 80083a4:	9107      	str	r1, [sp, #28]
 80083a6:	9104      	str	r1, [sp, #16]
 80083a8:	4808      	ldr	r0, [pc, #32]	; (80083cc <siprintf+0x38>)
 80083aa:	4909      	ldr	r1, [pc, #36]	; (80083d0 <siprintf+0x3c>)
 80083ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80083b0:	9105      	str	r1, [sp, #20]
 80083b2:	6800      	ldr	r0, [r0, #0]
 80083b4:	a902      	add	r1, sp, #8
 80083b6:	9301      	str	r3, [sp, #4]
 80083b8:	f001 fc70 	bl	8009c9c <_svfiprintf_r>
 80083bc:	2200      	movs	r2, #0
 80083be:	9b02      	ldr	r3, [sp, #8]
 80083c0:	701a      	strb	r2, [r3, #0]
 80083c2:	b01c      	add	sp, #112	; 0x70
 80083c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083c8:	b003      	add	sp, #12
 80083ca:	4770      	bx	lr
 80083cc:	200000d4 	.word	0x200000d4
 80083d0:	ffff0208 	.word	0xffff0208

080083d4 <__sread>:
 80083d4:	b510      	push	{r4, lr}
 80083d6:	460c      	mov	r4, r1
 80083d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083dc:	f000 f932 	bl	8008644 <_read_r>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	bfab      	itete	ge
 80083e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083e6:	89a3      	ldrhlt	r3, [r4, #12]
 80083e8:	181b      	addge	r3, r3, r0
 80083ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083ee:	bfac      	ite	ge
 80083f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80083f2:	81a3      	strhlt	r3, [r4, #12]
 80083f4:	bd10      	pop	{r4, pc}

080083f6 <__swrite>:
 80083f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fa:	461f      	mov	r7, r3
 80083fc:	898b      	ldrh	r3, [r1, #12]
 80083fe:	4605      	mov	r5, r0
 8008400:	05db      	lsls	r3, r3, #23
 8008402:	460c      	mov	r4, r1
 8008404:	4616      	mov	r6, r2
 8008406:	d505      	bpl.n	8008414 <__swrite+0x1e>
 8008408:	2302      	movs	r3, #2
 800840a:	2200      	movs	r2, #0
 800840c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008410:	f000 f906 	bl	8008620 <_lseek_r>
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	4632      	mov	r2, r6
 8008418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800841c:	81a3      	strh	r3, [r4, #12]
 800841e:	4628      	mov	r0, r5
 8008420:	463b      	mov	r3, r7
 8008422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800842a:	f000 b92d 	b.w	8008688 <_write_r>

0800842e <__sseek>:
 800842e:	b510      	push	{r4, lr}
 8008430:	460c      	mov	r4, r1
 8008432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008436:	f000 f8f3 	bl	8008620 <_lseek_r>
 800843a:	1c43      	adds	r3, r0, #1
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	bf15      	itete	ne
 8008440:	6560      	strne	r0, [r4, #84]	; 0x54
 8008442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800844a:	81a3      	strheq	r3, [r4, #12]
 800844c:	bf18      	it	ne
 800844e:	81a3      	strhne	r3, [r4, #12]
 8008450:	bd10      	pop	{r4, pc}

08008452 <__sclose>:
 8008452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008456:	f000 b8d3 	b.w	8008600 <_close_r>

0800845a <__swbuf_r>:
 800845a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845c:	460e      	mov	r6, r1
 800845e:	4614      	mov	r4, r2
 8008460:	4605      	mov	r5, r0
 8008462:	b118      	cbz	r0, 800846c <__swbuf_r+0x12>
 8008464:	6a03      	ldr	r3, [r0, #32]
 8008466:	b90b      	cbnz	r3, 800846c <__swbuf_r+0x12>
 8008468:	f7ff fef0 	bl	800824c <__sinit>
 800846c:	69a3      	ldr	r3, [r4, #24]
 800846e:	60a3      	str	r3, [r4, #8]
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	071a      	lsls	r2, r3, #28
 8008474:	d525      	bpl.n	80084c2 <__swbuf_r+0x68>
 8008476:	6923      	ldr	r3, [r4, #16]
 8008478:	b31b      	cbz	r3, 80084c2 <__swbuf_r+0x68>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	6922      	ldr	r2, [r4, #16]
 800847e:	b2f6      	uxtb	r6, r6
 8008480:	1a98      	subs	r0, r3, r2
 8008482:	6963      	ldr	r3, [r4, #20]
 8008484:	4637      	mov	r7, r6
 8008486:	4283      	cmp	r3, r0
 8008488:	dc04      	bgt.n	8008494 <__swbuf_r+0x3a>
 800848a:	4621      	mov	r1, r4
 800848c:	4628      	mov	r0, r5
 800848e:	f001 fec7 	bl	800a220 <_fflush_r>
 8008492:	b9e0      	cbnz	r0, 80084ce <__swbuf_r+0x74>
 8008494:	68a3      	ldr	r3, [r4, #8]
 8008496:	3b01      	subs	r3, #1
 8008498:	60a3      	str	r3, [r4, #8]
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	1c5a      	adds	r2, r3, #1
 800849e:	6022      	str	r2, [r4, #0]
 80084a0:	701e      	strb	r6, [r3, #0]
 80084a2:	6962      	ldr	r2, [r4, #20]
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d004      	beq.n	80084b4 <__swbuf_r+0x5a>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	07db      	lsls	r3, r3, #31
 80084ae:	d506      	bpl.n	80084be <__swbuf_r+0x64>
 80084b0:	2e0a      	cmp	r6, #10
 80084b2:	d104      	bne.n	80084be <__swbuf_r+0x64>
 80084b4:	4621      	mov	r1, r4
 80084b6:	4628      	mov	r0, r5
 80084b8:	f001 feb2 	bl	800a220 <_fflush_r>
 80084bc:	b938      	cbnz	r0, 80084ce <__swbuf_r+0x74>
 80084be:	4638      	mov	r0, r7
 80084c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c2:	4621      	mov	r1, r4
 80084c4:	4628      	mov	r0, r5
 80084c6:	f000 f805 	bl	80084d4 <__swsetup_r>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d0d5      	beq.n	800847a <__swbuf_r+0x20>
 80084ce:	f04f 37ff 	mov.w	r7, #4294967295
 80084d2:	e7f4      	b.n	80084be <__swbuf_r+0x64>

080084d4 <__swsetup_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4b2a      	ldr	r3, [pc, #168]	; (8008580 <__swsetup_r+0xac>)
 80084d8:	4605      	mov	r5, r0
 80084da:	6818      	ldr	r0, [r3, #0]
 80084dc:	460c      	mov	r4, r1
 80084de:	b118      	cbz	r0, 80084e8 <__swsetup_r+0x14>
 80084e0:	6a03      	ldr	r3, [r0, #32]
 80084e2:	b90b      	cbnz	r3, 80084e8 <__swsetup_r+0x14>
 80084e4:	f7ff feb2 	bl	800824c <__sinit>
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084ee:	0718      	lsls	r0, r3, #28
 80084f0:	d422      	bmi.n	8008538 <__swsetup_r+0x64>
 80084f2:	06d9      	lsls	r1, r3, #27
 80084f4:	d407      	bmi.n	8008506 <__swsetup_r+0x32>
 80084f6:	2309      	movs	r3, #9
 80084f8:	602b      	str	r3, [r5, #0]
 80084fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008502:	81a3      	strh	r3, [r4, #12]
 8008504:	e034      	b.n	8008570 <__swsetup_r+0x9c>
 8008506:	0758      	lsls	r0, r3, #29
 8008508:	d512      	bpl.n	8008530 <__swsetup_r+0x5c>
 800850a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800850c:	b141      	cbz	r1, 8008520 <__swsetup_r+0x4c>
 800850e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008512:	4299      	cmp	r1, r3
 8008514:	d002      	beq.n	800851c <__swsetup_r+0x48>
 8008516:	4628      	mov	r0, r5
 8008518:	f000 ffa6 	bl	8009468 <_free_r>
 800851c:	2300      	movs	r3, #0
 800851e:	6363      	str	r3, [r4, #52]	; 0x34
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008526:	81a3      	strh	r3, [r4, #12]
 8008528:	2300      	movs	r3, #0
 800852a:	6063      	str	r3, [r4, #4]
 800852c:	6923      	ldr	r3, [r4, #16]
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f043 0308 	orr.w	r3, r3, #8
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	6923      	ldr	r3, [r4, #16]
 800853a:	b94b      	cbnz	r3, 8008550 <__swsetup_r+0x7c>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008546:	d003      	beq.n	8008550 <__swsetup_r+0x7c>
 8008548:	4621      	mov	r1, r4
 800854a:	4628      	mov	r0, r5
 800854c:	f001 fec7 	bl	800a2de <__smakebuf_r>
 8008550:	89a0      	ldrh	r0, [r4, #12]
 8008552:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008556:	f010 0301 	ands.w	r3, r0, #1
 800855a:	d00a      	beq.n	8008572 <__swsetup_r+0x9e>
 800855c:	2300      	movs	r3, #0
 800855e:	60a3      	str	r3, [r4, #8]
 8008560:	6963      	ldr	r3, [r4, #20]
 8008562:	425b      	negs	r3, r3
 8008564:	61a3      	str	r3, [r4, #24]
 8008566:	6923      	ldr	r3, [r4, #16]
 8008568:	b943      	cbnz	r3, 800857c <__swsetup_r+0xa8>
 800856a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800856e:	d1c4      	bne.n	80084fa <__swsetup_r+0x26>
 8008570:	bd38      	pop	{r3, r4, r5, pc}
 8008572:	0781      	lsls	r1, r0, #30
 8008574:	bf58      	it	pl
 8008576:	6963      	ldrpl	r3, [r4, #20]
 8008578:	60a3      	str	r3, [r4, #8]
 800857a:	e7f4      	b.n	8008566 <__swsetup_r+0x92>
 800857c:	2000      	movs	r0, #0
 800857e:	e7f7      	b.n	8008570 <__swsetup_r+0x9c>
 8008580:	200000d4 	.word	0x200000d4

08008584 <memset>:
 8008584:	4603      	mov	r3, r0
 8008586:	4402      	add	r2, r0
 8008588:	4293      	cmp	r3, r2
 800858a:	d100      	bne.n	800858e <memset+0xa>
 800858c:	4770      	bx	lr
 800858e:	f803 1b01 	strb.w	r1, [r3], #1
 8008592:	e7f9      	b.n	8008588 <memset+0x4>

08008594 <strchr>:
 8008594:	4603      	mov	r3, r0
 8008596:	b2c9      	uxtb	r1, r1
 8008598:	4618      	mov	r0, r3
 800859a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800859e:	b112      	cbz	r2, 80085a6 <strchr+0x12>
 80085a0:	428a      	cmp	r2, r1
 80085a2:	d1f9      	bne.n	8008598 <strchr+0x4>
 80085a4:	4770      	bx	lr
 80085a6:	2900      	cmp	r1, #0
 80085a8:	bf18      	it	ne
 80085aa:	2000      	movne	r0, #0
 80085ac:	4770      	bx	lr

080085ae <strncmp>:
 80085ae:	b510      	push	{r4, lr}
 80085b0:	b16a      	cbz	r2, 80085ce <strncmp+0x20>
 80085b2:	3901      	subs	r1, #1
 80085b4:	1884      	adds	r4, r0, r2
 80085b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80085be:	429a      	cmp	r2, r3
 80085c0:	d103      	bne.n	80085ca <strncmp+0x1c>
 80085c2:	42a0      	cmp	r0, r4
 80085c4:	d001      	beq.n	80085ca <strncmp+0x1c>
 80085c6:	2a00      	cmp	r2, #0
 80085c8:	d1f5      	bne.n	80085b6 <strncmp+0x8>
 80085ca:	1ad0      	subs	r0, r2, r3
 80085cc:	bd10      	pop	{r4, pc}
 80085ce:	4610      	mov	r0, r2
 80085d0:	e7fc      	b.n	80085cc <strncmp+0x1e>

080085d2 <strncpy>:
 80085d2:	4603      	mov	r3, r0
 80085d4:	b510      	push	{r4, lr}
 80085d6:	3901      	subs	r1, #1
 80085d8:	b132      	cbz	r2, 80085e8 <strncpy+0x16>
 80085da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80085de:	3a01      	subs	r2, #1
 80085e0:	f803 4b01 	strb.w	r4, [r3], #1
 80085e4:	2c00      	cmp	r4, #0
 80085e6:	d1f7      	bne.n	80085d8 <strncpy+0x6>
 80085e8:	2100      	movs	r1, #0
 80085ea:	441a      	add	r2, r3
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d100      	bne.n	80085f2 <strncpy+0x20>
 80085f0:	bd10      	pop	{r4, pc}
 80085f2:	f803 1b01 	strb.w	r1, [r3], #1
 80085f6:	e7f9      	b.n	80085ec <strncpy+0x1a>

080085f8 <_localeconv_r>:
 80085f8:	4800      	ldr	r0, [pc, #0]	; (80085fc <_localeconv_r+0x4>)
 80085fa:	4770      	bx	lr
 80085fc:	200001c8 	.word	0x200001c8

08008600 <_close_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	2300      	movs	r3, #0
 8008604:	4d05      	ldr	r5, [pc, #20]	; (800861c <_close_r+0x1c>)
 8008606:	4604      	mov	r4, r0
 8008608:	4608      	mov	r0, r1
 800860a:	602b      	str	r3, [r5, #0]
 800860c:	f7f8 fe7e 	bl	800130c <_close>
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	d102      	bne.n	800861a <_close_r+0x1a>
 8008614:	682b      	ldr	r3, [r5, #0]
 8008616:	b103      	cbz	r3, 800861a <_close_r+0x1a>
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	bd38      	pop	{r3, r4, r5, pc}
 800861c:	20000bd8 	.word	0x20000bd8

08008620 <_lseek_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4604      	mov	r4, r0
 8008624:	4608      	mov	r0, r1
 8008626:	4611      	mov	r1, r2
 8008628:	2200      	movs	r2, #0
 800862a:	4d05      	ldr	r5, [pc, #20]	; (8008640 <_lseek_r+0x20>)
 800862c:	602a      	str	r2, [r5, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	f7f8 fe90 	bl	8001354 <_lseek>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d102      	bne.n	800863e <_lseek_r+0x1e>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	b103      	cbz	r3, 800863e <_lseek_r+0x1e>
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	20000bd8 	.word	0x20000bd8

08008644 <_read_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4604      	mov	r4, r0
 8008648:	4608      	mov	r0, r1
 800864a:	4611      	mov	r1, r2
 800864c:	2200      	movs	r2, #0
 800864e:	4d05      	ldr	r5, [pc, #20]	; (8008664 <_read_r+0x20>)
 8008650:	602a      	str	r2, [r5, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	f7f8 fe21 	bl	800129a <_read>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	d102      	bne.n	8008662 <_read_r+0x1e>
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	b103      	cbz	r3, 8008662 <_read_r+0x1e>
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	20000bd8 	.word	0x20000bd8

08008668 <_sbrk_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	2300      	movs	r3, #0
 800866c:	4d05      	ldr	r5, [pc, #20]	; (8008684 <_sbrk_r+0x1c>)
 800866e:	4604      	mov	r4, r0
 8008670:	4608      	mov	r0, r1
 8008672:	602b      	str	r3, [r5, #0]
 8008674:	f7f8 fe7a 	bl	800136c <_sbrk>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_sbrk_r+0x1a>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b103      	cbz	r3, 8008682 <_sbrk_r+0x1a>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	20000bd8 	.word	0x20000bd8

08008688 <_write_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4604      	mov	r4, r0
 800868c:	4608      	mov	r0, r1
 800868e:	4611      	mov	r1, r2
 8008690:	2200      	movs	r2, #0
 8008692:	4d05      	ldr	r5, [pc, #20]	; (80086a8 <_write_r+0x20>)
 8008694:	602a      	str	r2, [r5, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	f7f8 fe1c 	bl	80012d4 <_write>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d102      	bne.n	80086a6 <_write_r+0x1e>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	b103      	cbz	r3, 80086a6 <_write_r+0x1e>
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	20000bd8 	.word	0x20000bd8

080086ac <__errno>:
 80086ac:	4b01      	ldr	r3, [pc, #4]	; (80086b4 <__errno+0x8>)
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	200000d4 	.word	0x200000d4

080086b8 <__libc_init_array>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	2600      	movs	r6, #0
 80086bc:	4d0c      	ldr	r5, [pc, #48]	; (80086f0 <__libc_init_array+0x38>)
 80086be:	4c0d      	ldr	r4, [pc, #52]	; (80086f4 <__libc_init_array+0x3c>)
 80086c0:	1b64      	subs	r4, r4, r5
 80086c2:	10a4      	asrs	r4, r4, #2
 80086c4:	42a6      	cmp	r6, r4
 80086c6:	d109      	bne.n	80086dc <__libc_init_array+0x24>
 80086c8:	f001 ff38 	bl	800a53c <_init>
 80086cc:	2600      	movs	r6, #0
 80086ce:	4d0a      	ldr	r5, [pc, #40]	; (80086f8 <__libc_init_array+0x40>)
 80086d0:	4c0a      	ldr	r4, [pc, #40]	; (80086fc <__libc_init_array+0x44>)
 80086d2:	1b64      	subs	r4, r4, r5
 80086d4:	10a4      	asrs	r4, r4, #2
 80086d6:	42a6      	cmp	r6, r4
 80086d8:	d105      	bne.n	80086e6 <__libc_init_array+0x2e>
 80086da:	bd70      	pop	{r4, r5, r6, pc}
 80086dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e0:	4798      	blx	r3
 80086e2:	3601      	adds	r6, #1
 80086e4:	e7ee      	b.n	80086c4 <__libc_init_array+0xc>
 80086e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ea:	4798      	blx	r3
 80086ec:	3601      	adds	r6, #1
 80086ee:	e7f2      	b.n	80086d6 <__libc_init_array+0x1e>
 80086f0:	0800ab98 	.word	0x0800ab98
 80086f4:	0800ab98 	.word	0x0800ab98
 80086f8:	0800ab98 	.word	0x0800ab98
 80086fc:	0800ab9c 	.word	0x0800ab9c

08008700 <__retarget_lock_init_recursive>:
 8008700:	4770      	bx	lr

08008702 <__retarget_lock_acquire_recursive>:
 8008702:	4770      	bx	lr

08008704 <__retarget_lock_release_recursive>:
 8008704:	4770      	bx	lr

08008706 <strcpy>:
 8008706:	4603      	mov	r3, r0
 8008708:	f811 2b01 	ldrb.w	r2, [r1], #1
 800870c:	f803 2b01 	strb.w	r2, [r3], #1
 8008710:	2a00      	cmp	r2, #0
 8008712:	d1f9      	bne.n	8008708 <strcpy+0x2>
 8008714:	4770      	bx	lr

08008716 <memchr>:
 8008716:	4603      	mov	r3, r0
 8008718:	b510      	push	{r4, lr}
 800871a:	b2c9      	uxtb	r1, r1
 800871c:	4402      	add	r2, r0
 800871e:	4293      	cmp	r3, r2
 8008720:	4618      	mov	r0, r3
 8008722:	d101      	bne.n	8008728 <memchr+0x12>
 8008724:	2000      	movs	r0, #0
 8008726:	e003      	b.n	8008730 <memchr+0x1a>
 8008728:	7804      	ldrb	r4, [r0, #0]
 800872a:	3301      	adds	r3, #1
 800872c:	428c      	cmp	r4, r1
 800872e:	d1f6      	bne.n	800871e <memchr+0x8>
 8008730:	bd10      	pop	{r4, pc}

08008732 <memcpy>:
 8008732:	440a      	add	r2, r1
 8008734:	4291      	cmp	r1, r2
 8008736:	f100 33ff 	add.w	r3, r0, #4294967295
 800873a:	d100      	bne.n	800873e <memcpy+0xc>
 800873c:	4770      	bx	lr
 800873e:	b510      	push	{r4, lr}
 8008740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008744:	4291      	cmp	r1, r2
 8008746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800874a:	d1f9      	bne.n	8008740 <memcpy+0xe>
 800874c:	bd10      	pop	{r4, pc}
	...

08008750 <__assert_func>:
 8008750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008752:	4614      	mov	r4, r2
 8008754:	461a      	mov	r2, r3
 8008756:	4b09      	ldr	r3, [pc, #36]	; (800877c <__assert_func+0x2c>)
 8008758:	4605      	mov	r5, r0
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68d8      	ldr	r0, [r3, #12]
 800875e:	b14c      	cbz	r4, 8008774 <__assert_func+0x24>
 8008760:	4b07      	ldr	r3, [pc, #28]	; (8008780 <__assert_func+0x30>)
 8008762:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008766:	9100      	str	r1, [sp, #0]
 8008768:	462b      	mov	r3, r5
 800876a:	4906      	ldr	r1, [pc, #24]	; (8008784 <__assert_func+0x34>)
 800876c:	f001 fd80 	bl	800a270 <fiprintf>
 8008770:	f001 fe2e 	bl	800a3d0 <abort>
 8008774:	4b04      	ldr	r3, [pc, #16]	; (8008788 <__assert_func+0x38>)
 8008776:	461c      	mov	r4, r3
 8008778:	e7f3      	b.n	8008762 <__assert_func+0x12>
 800877a:	bf00      	nop
 800877c:	200000d4 	.word	0x200000d4
 8008780:	0800a957 	.word	0x0800a957
 8008784:	0800a964 	.word	0x0800a964
 8008788:	0800a992 	.word	0x0800a992

0800878c <quorem>:
 800878c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008790:	6903      	ldr	r3, [r0, #16]
 8008792:	690c      	ldr	r4, [r1, #16]
 8008794:	4607      	mov	r7, r0
 8008796:	42a3      	cmp	r3, r4
 8008798:	db7f      	blt.n	800889a <quorem+0x10e>
 800879a:	3c01      	subs	r4, #1
 800879c:	f100 0514 	add.w	r5, r0, #20
 80087a0:	f101 0814 	add.w	r8, r1, #20
 80087a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087b2:	3301      	adds	r3, #1
 80087b4:	429a      	cmp	r2, r3
 80087b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80087ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087c2:	d331      	bcc.n	8008828 <quorem+0x9c>
 80087c4:	f04f 0e00 	mov.w	lr, #0
 80087c8:	4640      	mov	r0, r8
 80087ca:	46ac      	mov	ip, r5
 80087cc:	46f2      	mov	sl, lr
 80087ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80087d2:	b293      	uxth	r3, r2
 80087d4:	fb06 e303 	mla	r3, r6, r3, lr
 80087d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087dc:	0c1a      	lsrs	r2, r3, #16
 80087de:	b29b      	uxth	r3, r3
 80087e0:	fb06 220e 	mla	r2, r6, lr, r2
 80087e4:	ebaa 0303 	sub.w	r3, sl, r3
 80087e8:	f8dc a000 	ldr.w	sl, [ip]
 80087ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087f0:	fa1f fa8a 	uxth.w	sl, sl
 80087f4:	4453      	add	r3, sl
 80087f6:	f8dc a000 	ldr.w	sl, [ip]
 80087fa:	b292      	uxth	r2, r2
 80087fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008800:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008804:	b29b      	uxth	r3, r3
 8008806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800880a:	4581      	cmp	r9, r0
 800880c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008810:	f84c 3b04 	str.w	r3, [ip], #4
 8008814:	d2db      	bcs.n	80087ce <quorem+0x42>
 8008816:	f855 300b 	ldr.w	r3, [r5, fp]
 800881a:	b92b      	cbnz	r3, 8008828 <quorem+0x9c>
 800881c:	9b01      	ldr	r3, [sp, #4]
 800881e:	3b04      	subs	r3, #4
 8008820:	429d      	cmp	r5, r3
 8008822:	461a      	mov	r2, r3
 8008824:	d32d      	bcc.n	8008882 <quorem+0xf6>
 8008826:	613c      	str	r4, [r7, #16]
 8008828:	4638      	mov	r0, r7
 800882a:	f001 f8df 	bl	80099ec <__mcmp>
 800882e:	2800      	cmp	r0, #0
 8008830:	db23      	blt.n	800887a <quorem+0xee>
 8008832:	4629      	mov	r1, r5
 8008834:	2000      	movs	r0, #0
 8008836:	3601      	adds	r6, #1
 8008838:	f858 2b04 	ldr.w	r2, [r8], #4
 800883c:	f8d1 c000 	ldr.w	ip, [r1]
 8008840:	b293      	uxth	r3, r2
 8008842:	1ac3      	subs	r3, r0, r3
 8008844:	0c12      	lsrs	r2, r2, #16
 8008846:	fa1f f08c 	uxth.w	r0, ip
 800884a:	4403      	add	r3, r0
 800884c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008850:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008854:	b29b      	uxth	r3, r3
 8008856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800885a:	45c1      	cmp	r9, r8
 800885c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008860:	f841 3b04 	str.w	r3, [r1], #4
 8008864:	d2e8      	bcs.n	8008838 <quorem+0xac>
 8008866:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800886a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800886e:	b922      	cbnz	r2, 800887a <quorem+0xee>
 8008870:	3b04      	subs	r3, #4
 8008872:	429d      	cmp	r5, r3
 8008874:	461a      	mov	r2, r3
 8008876:	d30a      	bcc.n	800888e <quorem+0x102>
 8008878:	613c      	str	r4, [r7, #16]
 800887a:	4630      	mov	r0, r6
 800887c:	b003      	add	sp, #12
 800887e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008882:	6812      	ldr	r2, [r2, #0]
 8008884:	3b04      	subs	r3, #4
 8008886:	2a00      	cmp	r2, #0
 8008888:	d1cd      	bne.n	8008826 <quorem+0x9a>
 800888a:	3c01      	subs	r4, #1
 800888c:	e7c8      	b.n	8008820 <quorem+0x94>
 800888e:	6812      	ldr	r2, [r2, #0]
 8008890:	3b04      	subs	r3, #4
 8008892:	2a00      	cmp	r2, #0
 8008894:	d1f0      	bne.n	8008878 <quorem+0xec>
 8008896:	3c01      	subs	r4, #1
 8008898:	e7eb      	b.n	8008872 <quorem+0xe6>
 800889a:	2000      	movs	r0, #0
 800889c:	e7ee      	b.n	800887c <quorem+0xf0>
	...

080088a0 <_dtoa_r>:
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	4616      	mov	r6, r2
 80088a6:	461f      	mov	r7, r3
 80088a8:	69c4      	ldr	r4, [r0, #28]
 80088aa:	b099      	sub	sp, #100	; 0x64
 80088ac:	4605      	mov	r5, r0
 80088ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80088b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80088b6:	b974      	cbnz	r4, 80088d6 <_dtoa_r+0x36>
 80088b8:	2010      	movs	r0, #16
 80088ba:	f7fe ff29 	bl	8007710 <malloc>
 80088be:	4602      	mov	r2, r0
 80088c0:	61e8      	str	r0, [r5, #28]
 80088c2:	b920      	cbnz	r0, 80088ce <_dtoa_r+0x2e>
 80088c4:	21ef      	movs	r1, #239	; 0xef
 80088c6:	4bac      	ldr	r3, [pc, #688]	; (8008b78 <_dtoa_r+0x2d8>)
 80088c8:	48ac      	ldr	r0, [pc, #688]	; (8008b7c <_dtoa_r+0x2dc>)
 80088ca:	f7ff ff41 	bl	8008750 <__assert_func>
 80088ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088d2:	6004      	str	r4, [r0, #0]
 80088d4:	60c4      	str	r4, [r0, #12]
 80088d6:	69eb      	ldr	r3, [r5, #28]
 80088d8:	6819      	ldr	r1, [r3, #0]
 80088da:	b151      	cbz	r1, 80088f2 <_dtoa_r+0x52>
 80088dc:	685a      	ldr	r2, [r3, #4]
 80088de:	2301      	movs	r3, #1
 80088e0:	4093      	lsls	r3, r2
 80088e2:	604a      	str	r2, [r1, #4]
 80088e4:	608b      	str	r3, [r1, #8]
 80088e6:	4628      	mov	r0, r5
 80088e8:	f000 fe46 	bl	8009578 <_Bfree>
 80088ec:	2200      	movs	r2, #0
 80088ee:	69eb      	ldr	r3, [r5, #28]
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	1e3b      	subs	r3, r7, #0
 80088f4:	bfaf      	iteee	ge
 80088f6:	2300      	movge	r3, #0
 80088f8:	2201      	movlt	r2, #1
 80088fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088fe:	9305      	strlt	r3, [sp, #20]
 8008900:	bfa8      	it	ge
 8008902:	f8c8 3000 	strge.w	r3, [r8]
 8008906:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800890a:	4b9d      	ldr	r3, [pc, #628]	; (8008b80 <_dtoa_r+0x2e0>)
 800890c:	bfb8      	it	lt
 800890e:	f8c8 2000 	strlt.w	r2, [r8]
 8008912:	ea33 0309 	bics.w	r3, r3, r9
 8008916:	d119      	bne.n	800894c <_dtoa_r+0xac>
 8008918:	f242 730f 	movw	r3, #9999	; 0x270f
 800891c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008924:	4333      	orrs	r3, r6
 8008926:	f000 8589 	beq.w	800943c <_dtoa_r+0xb9c>
 800892a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800892c:	b953      	cbnz	r3, 8008944 <_dtoa_r+0xa4>
 800892e:	4b95      	ldr	r3, [pc, #596]	; (8008b84 <_dtoa_r+0x2e4>)
 8008930:	e023      	b.n	800897a <_dtoa_r+0xda>
 8008932:	4b95      	ldr	r3, [pc, #596]	; (8008b88 <_dtoa_r+0x2e8>)
 8008934:	9303      	str	r3, [sp, #12]
 8008936:	3308      	adds	r3, #8
 8008938:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800893a:	6013      	str	r3, [r2, #0]
 800893c:	9803      	ldr	r0, [sp, #12]
 800893e:	b019      	add	sp, #100	; 0x64
 8008940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008944:	4b8f      	ldr	r3, [pc, #572]	; (8008b84 <_dtoa_r+0x2e4>)
 8008946:	9303      	str	r3, [sp, #12]
 8008948:	3303      	adds	r3, #3
 800894a:	e7f5      	b.n	8008938 <_dtoa_r+0x98>
 800894c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008950:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008958:	2200      	movs	r2, #0
 800895a:	2300      	movs	r3, #0
 800895c:	f7f8 f824 	bl	80009a8 <__aeabi_dcmpeq>
 8008960:	4680      	mov	r8, r0
 8008962:	b160      	cbz	r0, 800897e <_dtoa_r+0xde>
 8008964:	2301      	movs	r3, #1
 8008966:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 8562 	beq.w	8009436 <_dtoa_r+0xb96>
 8008972:	4b86      	ldr	r3, [pc, #536]	; (8008b8c <_dtoa_r+0x2ec>)
 8008974:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	3b01      	subs	r3, #1
 800897a:	9303      	str	r3, [sp, #12]
 800897c:	e7de      	b.n	800893c <_dtoa_r+0x9c>
 800897e:	ab16      	add	r3, sp, #88	; 0x58
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	ab17      	add	r3, sp, #92	; 0x5c
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	4628      	mov	r0, r5
 8008988:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800898c:	f001 f8d6 	bl	8009b3c <__d2b>
 8008990:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008994:	4682      	mov	sl, r0
 8008996:	2c00      	cmp	r4, #0
 8008998:	d07e      	beq.n	8008a98 <_dtoa_r+0x1f8>
 800899a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800899e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80089a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80089ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80089b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80089b4:	4619      	mov	r1, r3
 80089b6:	2200      	movs	r2, #0
 80089b8:	4b75      	ldr	r3, [pc, #468]	; (8008b90 <_dtoa_r+0x2f0>)
 80089ba:	f7f7 fbd5 	bl	8000168 <__aeabi_dsub>
 80089be:	a368      	add	r3, pc, #416	; (adr r3, 8008b60 <_dtoa_r+0x2c0>)
 80089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c4:	f7f7 fd88 	bl	80004d8 <__aeabi_dmul>
 80089c8:	a367      	add	r3, pc, #412	; (adr r3, 8008b68 <_dtoa_r+0x2c8>)
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	f7f7 fbcd 	bl	800016c <__adddf3>
 80089d2:	4606      	mov	r6, r0
 80089d4:	4620      	mov	r0, r4
 80089d6:	460f      	mov	r7, r1
 80089d8:	f7f7 fd14 	bl	8000404 <__aeabi_i2d>
 80089dc:	a364      	add	r3, pc, #400	; (adr r3, 8008b70 <_dtoa_r+0x2d0>)
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	f7f7 fd79 	bl	80004d8 <__aeabi_dmul>
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	4630      	mov	r0, r6
 80089ec:	4639      	mov	r1, r7
 80089ee:	f7f7 fbbd 	bl	800016c <__adddf3>
 80089f2:	4606      	mov	r6, r0
 80089f4:	460f      	mov	r7, r1
 80089f6:	f7f8 f81f 	bl	8000a38 <__aeabi_d2iz>
 80089fa:	2200      	movs	r2, #0
 80089fc:	4683      	mov	fp, r0
 80089fe:	2300      	movs	r3, #0
 8008a00:	4630      	mov	r0, r6
 8008a02:	4639      	mov	r1, r7
 8008a04:	f7f7 ffda 	bl	80009bc <__aeabi_dcmplt>
 8008a08:	b148      	cbz	r0, 8008a1e <_dtoa_r+0x17e>
 8008a0a:	4658      	mov	r0, fp
 8008a0c:	f7f7 fcfa 	bl	8000404 <__aeabi_i2d>
 8008a10:	4632      	mov	r2, r6
 8008a12:	463b      	mov	r3, r7
 8008a14:	f7f7 ffc8 	bl	80009a8 <__aeabi_dcmpeq>
 8008a18:	b908      	cbnz	r0, 8008a1e <_dtoa_r+0x17e>
 8008a1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a1e:	f1bb 0f16 	cmp.w	fp, #22
 8008a22:	d857      	bhi.n	8008ad4 <_dtoa_r+0x234>
 8008a24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a28:	4b5a      	ldr	r3, [pc, #360]	; (8008b94 <_dtoa_r+0x2f4>)
 8008a2a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a32:	f7f7 ffc3 	bl	80009bc <__aeabi_dcmplt>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d04e      	beq.n	8008ad8 <_dtoa_r+0x238>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a40:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a44:	1b1b      	subs	r3, r3, r4
 8008a46:	1e5a      	subs	r2, r3, #1
 8008a48:	bf46      	itte	mi
 8008a4a:	f1c3 0901 	rsbmi	r9, r3, #1
 8008a4e:	2300      	movmi	r3, #0
 8008a50:	f04f 0900 	movpl.w	r9, #0
 8008a54:	9209      	str	r2, [sp, #36]	; 0x24
 8008a56:	bf48      	it	mi
 8008a58:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008a5a:	f1bb 0f00 	cmp.w	fp, #0
 8008a5e:	db3d      	blt.n	8008adc <_dtoa_r+0x23c>
 8008a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a62:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008a66:	445b      	add	r3, fp
 8008a68:	9309      	str	r3, [sp, #36]	; 0x24
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	930a      	str	r3, [sp, #40]	; 0x28
 8008a6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a70:	2b09      	cmp	r3, #9
 8008a72:	d867      	bhi.n	8008b44 <_dtoa_r+0x2a4>
 8008a74:	2b05      	cmp	r3, #5
 8008a76:	bfc4      	itt	gt
 8008a78:	3b04      	subgt	r3, #4
 8008a7a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008a7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a7e:	bfc8      	it	gt
 8008a80:	2400      	movgt	r4, #0
 8008a82:	f1a3 0302 	sub.w	r3, r3, #2
 8008a86:	bfd8      	it	le
 8008a88:	2401      	movle	r4, #1
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	f200 8086 	bhi.w	8008b9c <_dtoa_r+0x2fc>
 8008a90:	e8df f003 	tbb	[pc, r3]
 8008a94:	5637392c 	.word	0x5637392c
 8008a98:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008a9c:	441c      	add	r4, r3
 8008a9e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008aa2:	2b20      	cmp	r3, #32
 8008aa4:	bfc1      	itttt	gt
 8008aa6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008aaa:	fa09 f903 	lslgt.w	r9, r9, r3
 8008aae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008ab2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008ab6:	bfd6      	itet	le
 8008ab8:	f1c3 0320 	rsble	r3, r3, #32
 8008abc:	ea49 0003 	orrgt.w	r0, r9, r3
 8008ac0:	fa06 f003 	lslle.w	r0, r6, r3
 8008ac4:	f7f7 fc8e 	bl	80003e4 <__aeabi_ui2d>
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008ace:	3c01      	subs	r4, #1
 8008ad0:	9213      	str	r2, [sp, #76]	; 0x4c
 8008ad2:	e76f      	b.n	80089b4 <_dtoa_r+0x114>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e7b3      	b.n	8008a40 <_dtoa_r+0x1a0>
 8008ad8:	900f      	str	r0, [sp, #60]	; 0x3c
 8008ada:	e7b2      	b.n	8008a42 <_dtoa_r+0x1a2>
 8008adc:	f1cb 0300 	rsb	r3, fp, #0
 8008ae0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	eba9 090b 	sub.w	r9, r9, fp
 8008ae8:	930e      	str	r3, [sp, #56]	; 0x38
 8008aea:	e7c0      	b.n	8008a6e <_dtoa_r+0x1ce>
 8008aec:	2300      	movs	r3, #0
 8008aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	dc55      	bgt.n	8008ba2 <_dtoa_r+0x302>
 8008af6:	2301      	movs	r3, #1
 8008af8:	461a      	mov	r2, r3
 8008afa:	9306      	str	r3, [sp, #24]
 8008afc:	9308      	str	r3, [sp, #32]
 8008afe:	9223      	str	r2, [sp, #140]	; 0x8c
 8008b00:	e00b      	b.n	8008b1a <_dtoa_r+0x27a>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e7f3      	b.n	8008aee <_dtoa_r+0x24e>
 8008b06:	2300      	movs	r3, #0
 8008b08:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b0c:	445b      	add	r3, fp
 8008b0e:	9306      	str	r3, [sp, #24]
 8008b10:	3301      	adds	r3, #1
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	9308      	str	r3, [sp, #32]
 8008b16:	bfb8      	it	lt
 8008b18:	2301      	movlt	r3, #1
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	2204      	movs	r2, #4
 8008b1e:	69e8      	ldr	r0, [r5, #28]
 8008b20:	f102 0614 	add.w	r6, r2, #20
 8008b24:	429e      	cmp	r6, r3
 8008b26:	d940      	bls.n	8008baa <_dtoa_r+0x30a>
 8008b28:	6041      	str	r1, [r0, #4]
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f000 fce4 	bl	80094f8 <_Balloc>
 8008b30:	9003      	str	r0, [sp, #12]
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d13c      	bne.n	8008bb0 <_dtoa_r+0x310>
 8008b36:	4602      	mov	r2, r0
 8008b38:	f240 11af 	movw	r1, #431	; 0x1af
 8008b3c:	4b16      	ldr	r3, [pc, #88]	; (8008b98 <_dtoa_r+0x2f8>)
 8008b3e:	e6c3      	b.n	80088c8 <_dtoa_r+0x28>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e7e1      	b.n	8008b08 <_dtoa_r+0x268>
 8008b44:	2401      	movs	r4, #1
 8008b46:	2300      	movs	r3, #0
 8008b48:	940b      	str	r4, [sp, #44]	; 0x2c
 8008b4a:	9322      	str	r3, [sp, #136]	; 0x88
 8008b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b50:	2200      	movs	r2, #0
 8008b52:	9306      	str	r3, [sp, #24]
 8008b54:	9308      	str	r3, [sp, #32]
 8008b56:	2312      	movs	r3, #18
 8008b58:	e7d1      	b.n	8008afe <_dtoa_r+0x25e>
 8008b5a:	bf00      	nop
 8008b5c:	f3af 8000 	nop.w
 8008b60:	636f4361 	.word	0x636f4361
 8008b64:	3fd287a7 	.word	0x3fd287a7
 8008b68:	8b60c8b3 	.word	0x8b60c8b3
 8008b6c:	3fc68a28 	.word	0x3fc68a28
 8008b70:	509f79fb 	.word	0x509f79fb
 8008b74:	3fd34413 	.word	0x3fd34413
 8008b78:	0800a9a0 	.word	0x0800a9a0
 8008b7c:	0800a9b7 	.word	0x0800a9b7
 8008b80:	7ff00000 	.word	0x7ff00000
 8008b84:	0800a99c 	.word	0x0800a99c
 8008b88:	0800a993 	.word	0x0800a993
 8008b8c:	0800a934 	.word	0x0800a934
 8008b90:	3ff80000 	.word	0x3ff80000
 8008b94:	0800aaa8 	.word	0x0800aaa8
 8008b98:	0800aa0f 	.word	0x0800aa0f
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ba0:	e7d4      	b.n	8008b4c <_dtoa_r+0x2ac>
 8008ba2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ba4:	9306      	str	r3, [sp, #24]
 8008ba6:	9308      	str	r3, [sp, #32]
 8008ba8:	e7b7      	b.n	8008b1a <_dtoa_r+0x27a>
 8008baa:	3101      	adds	r1, #1
 8008bac:	0052      	lsls	r2, r2, #1
 8008bae:	e7b7      	b.n	8008b20 <_dtoa_r+0x280>
 8008bb0:	69eb      	ldr	r3, [r5, #28]
 8008bb2:	9a03      	ldr	r2, [sp, #12]
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	9b08      	ldr	r3, [sp, #32]
 8008bb8:	2b0e      	cmp	r3, #14
 8008bba:	f200 80a8 	bhi.w	8008d0e <_dtoa_r+0x46e>
 8008bbe:	2c00      	cmp	r4, #0
 8008bc0:	f000 80a5 	beq.w	8008d0e <_dtoa_r+0x46e>
 8008bc4:	f1bb 0f00 	cmp.w	fp, #0
 8008bc8:	dd34      	ble.n	8008c34 <_dtoa_r+0x394>
 8008bca:	4b9a      	ldr	r3, [pc, #616]	; (8008e34 <_dtoa_r+0x594>)
 8008bcc:	f00b 020f 	and.w	r2, fp, #15
 8008bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008bd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008bdc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008be0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008be4:	d016      	beq.n	8008c14 <_dtoa_r+0x374>
 8008be6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bea:	4b93      	ldr	r3, [pc, #588]	; (8008e38 <_dtoa_r+0x598>)
 8008bec:	2703      	movs	r7, #3
 8008bee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bf2:	f7f7 fd9b 	bl	800072c <__aeabi_ddiv>
 8008bf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bfa:	f004 040f 	and.w	r4, r4, #15
 8008bfe:	4e8e      	ldr	r6, [pc, #568]	; (8008e38 <_dtoa_r+0x598>)
 8008c00:	b954      	cbnz	r4, 8008c18 <_dtoa_r+0x378>
 8008c02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c0a:	f7f7 fd8f 	bl	800072c <__aeabi_ddiv>
 8008c0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c12:	e029      	b.n	8008c68 <_dtoa_r+0x3c8>
 8008c14:	2702      	movs	r7, #2
 8008c16:	e7f2      	b.n	8008bfe <_dtoa_r+0x35e>
 8008c18:	07e1      	lsls	r1, r4, #31
 8008c1a:	d508      	bpl.n	8008c2e <_dtoa_r+0x38e>
 8008c1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c24:	f7f7 fc58 	bl	80004d8 <__aeabi_dmul>
 8008c28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c2c:	3701      	adds	r7, #1
 8008c2e:	1064      	asrs	r4, r4, #1
 8008c30:	3608      	adds	r6, #8
 8008c32:	e7e5      	b.n	8008c00 <_dtoa_r+0x360>
 8008c34:	f000 80a5 	beq.w	8008d82 <_dtoa_r+0x4e2>
 8008c38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c3c:	f1cb 0400 	rsb	r4, fp, #0
 8008c40:	4b7c      	ldr	r3, [pc, #496]	; (8008e34 <_dtoa_r+0x594>)
 8008c42:	f004 020f 	and.w	r2, r4, #15
 8008c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fc43 	bl	80004d8 <__aeabi_dmul>
 8008c52:	2702      	movs	r7, #2
 8008c54:	2300      	movs	r3, #0
 8008c56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c5a:	4e77      	ldr	r6, [pc, #476]	; (8008e38 <_dtoa_r+0x598>)
 8008c5c:	1124      	asrs	r4, r4, #4
 8008c5e:	2c00      	cmp	r4, #0
 8008c60:	f040 8084 	bne.w	8008d6c <_dtoa_r+0x4cc>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1d2      	bne.n	8008c0e <_dtoa_r+0x36e>
 8008c68:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008c6c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 8087 	beq.w	8008d86 <_dtoa_r+0x4e6>
 8008c78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	4b6f      	ldr	r3, [pc, #444]	; (8008e3c <_dtoa_r+0x59c>)
 8008c80:	f7f7 fe9c 	bl	80009bc <__aeabi_dcmplt>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d07e      	beq.n	8008d86 <_dtoa_r+0x4e6>
 8008c88:	9b08      	ldr	r3, [sp, #32]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d07b      	beq.n	8008d86 <_dtoa_r+0x4e6>
 8008c8e:	9b06      	ldr	r3, [sp, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	dd38      	ble.n	8008d06 <_dtoa_r+0x466>
 8008c94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4b69      	ldr	r3, [pc, #420]	; (8008e40 <_dtoa_r+0x5a0>)
 8008c9c:	f7f7 fc1c 	bl	80004d8 <__aeabi_dmul>
 8008ca0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ca4:	9c06      	ldr	r4, [sp, #24]
 8008ca6:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008caa:	3701      	adds	r7, #1
 8008cac:	4638      	mov	r0, r7
 8008cae:	f7f7 fba9 	bl	8000404 <__aeabi_i2d>
 8008cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cb6:	f7f7 fc0f 	bl	80004d8 <__aeabi_dmul>
 8008cba:	2200      	movs	r2, #0
 8008cbc:	4b61      	ldr	r3, [pc, #388]	; (8008e44 <_dtoa_r+0x5a4>)
 8008cbe:	f7f7 fa55 	bl	800016c <__adddf3>
 8008cc2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008cc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008cca:	9611      	str	r6, [sp, #68]	; 0x44
 8008ccc:	2c00      	cmp	r4, #0
 8008cce:	d15d      	bne.n	8008d8c <_dtoa_r+0x4ec>
 8008cd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4b5c      	ldr	r3, [pc, #368]	; (8008e48 <_dtoa_r+0x5a8>)
 8008cd8:	f7f7 fa46 	bl	8000168 <__aeabi_dsub>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ce4:	4633      	mov	r3, r6
 8008ce6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ce8:	f7f7 fe86 	bl	80009f8 <__aeabi_dcmpgt>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	f040 8295 	bne.w	800921c <_dtoa_r+0x97c>
 8008cf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008cf8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008cfc:	f7f7 fe5e 	bl	80009bc <__aeabi_dcmplt>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	f040 8289 	bne.w	8009218 <_dtoa_r+0x978>
 8008d06:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008d0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008d0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f2c0 8151 	blt.w	8008fb8 <_dtoa_r+0x718>
 8008d16:	f1bb 0f0e 	cmp.w	fp, #14
 8008d1a:	f300 814d 	bgt.w	8008fb8 <_dtoa_r+0x718>
 8008d1e:	4b45      	ldr	r3, [pc, #276]	; (8008e34 <_dtoa_r+0x594>)
 8008d20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d28:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008d2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f280 80da 	bge.w	8008ee8 <_dtoa_r+0x648>
 8008d34:	9b08      	ldr	r3, [sp, #32]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f300 80d6 	bgt.w	8008ee8 <_dtoa_r+0x648>
 8008d3c:	f040 826b 	bne.w	8009216 <_dtoa_r+0x976>
 8008d40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d44:	2200      	movs	r2, #0
 8008d46:	4b40      	ldr	r3, [pc, #256]	; (8008e48 <_dtoa_r+0x5a8>)
 8008d48:	f7f7 fbc6 	bl	80004d8 <__aeabi_dmul>
 8008d4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d50:	f7f7 fe48 	bl	80009e4 <__aeabi_dcmpge>
 8008d54:	9c08      	ldr	r4, [sp, #32]
 8008d56:	4626      	mov	r6, r4
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	f040 8241 	bne.w	80091e0 <_dtoa_r+0x940>
 8008d5e:	2331      	movs	r3, #49	; 0x31
 8008d60:	9f03      	ldr	r7, [sp, #12]
 8008d62:	f10b 0b01 	add.w	fp, fp, #1
 8008d66:	f807 3b01 	strb.w	r3, [r7], #1
 8008d6a:	e23d      	b.n	80091e8 <_dtoa_r+0x948>
 8008d6c:	07e2      	lsls	r2, r4, #31
 8008d6e:	d505      	bpl.n	8008d7c <_dtoa_r+0x4dc>
 8008d70:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d74:	f7f7 fbb0 	bl	80004d8 <__aeabi_dmul>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	3701      	adds	r7, #1
 8008d7c:	1064      	asrs	r4, r4, #1
 8008d7e:	3608      	adds	r6, #8
 8008d80:	e76d      	b.n	8008c5e <_dtoa_r+0x3be>
 8008d82:	2702      	movs	r7, #2
 8008d84:	e770      	b.n	8008c68 <_dtoa_r+0x3c8>
 8008d86:	46d8      	mov	r8, fp
 8008d88:	9c08      	ldr	r4, [sp, #32]
 8008d8a:	e78f      	b.n	8008cac <_dtoa_r+0x40c>
 8008d8c:	9903      	ldr	r1, [sp, #12]
 8008d8e:	4b29      	ldr	r3, [pc, #164]	; (8008e34 <_dtoa_r+0x594>)
 8008d90:	4421      	add	r1, r4
 8008d92:	9112      	str	r1, [sp, #72]	; 0x48
 8008d94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d9a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008d9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008da2:	2900      	cmp	r1, #0
 8008da4:	d054      	beq.n	8008e50 <_dtoa_r+0x5b0>
 8008da6:	2000      	movs	r0, #0
 8008da8:	4928      	ldr	r1, [pc, #160]	; (8008e4c <_dtoa_r+0x5ac>)
 8008daa:	f7f7 fcbf 	bl	800072c <__aeabi_ddiv>
 8008dae:	463b      	mov	r3, r7
 8008db0:	4632      	mov	r2, r6
 8008db2:	f7f7 f9d9 	bl	8000168 <__aeabi_dsub>
 8008db6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008dba:	9f03      	ldr	r7, [sp, #12]
 8008dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dc0:	f7f7 fe3a 	bl	8000a38 <__aeabi_d2iz>
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	f7f7 fb1d 	bl	8000404 <__aeabi_i2d>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dd2:	f7f7 f9c9 	bl	8000168 <__aeabi_dsub>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	3430      	adds	r4, #48	; 0x30
 8008ddc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008de0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008de4:	f807 4b01 	strb.w	r4, [r7], #1
 8008de8:	f7f7 fde8 	bl	80009bc <__aeabi_dcmplt>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d173      	bne.n	8008ed8 <_dtoa_r+0x638>
 8008df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008df4:	2000      	movs	r0, #0
 8008df6:	4911      	ldr	r1, [pc, #68]	; (8008e3c <_dtoa_r+0x59c>)
 8008df8:	f7f7 f9b6 	bl	8000168 <__aeabi_dsub>
 8008dfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e00:	f7f7 fddc 	bl	80009bc <__aeabi_dcmplt>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	f040 80b6 	bne.w	8008f76 <_dtoa_r+0x6d6>
 8008e0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e0c:	429f      	cmp	r7, r3
 8008e0e:	f43f af7a 	beq.w	8008d06 <_dtoa_r+0x466>
 8008e12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e16:	2200      	movs	r2, #0
 8008e18:	4b09      	ldr	r3, [pc, #36]	; (8008e40 <_dtoa_r+0x5a0>)
 8008e1a:	f7f7 fb5d 	bl	80004d8 <__aeabi_dmul>
 8008e1e:	2200      	movs	r2, #0
 8008e20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e28:	4b05      	ldr	r3, [pc, #20]	; (8008e40 <_dtoa_r+0x5a0>)
 8008e2a:	f7f7 fb55 	bl	80004d8 <__aeabi_dmul>
 8008e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e32:	e7c3      	b.n	8008dbc <_dtoa_r+0x51c>
 8008e34:	0800aaa8 	.word	0x0800aaa8
 8008e38:	0800aa80 	.word	0x0800aa80
 8008e3c:	3ff00000 	.word	0x3ff00000
 8008e40:	40240000 	.word	0x40240000
 8008e44:	401c0000 	.word	0x401c0000
 8008e48:	40140000 	.word	0x40140000
 8008e4c:	3fe00000 	.word	0x3fe00000
 8008e50:	4630      	mov	r0, r6
 8008e52:	4639      	mov	r1, r7
 8008e54:	f7f7 fb40 	bl	80004d8 <__aeabi_dmul>
 8008e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e5e:	9c03      	ldr	r4, [sp, #12]
 8008e60:	9314      	str	r3, [sp, #80]	; 0x50
 8008e62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e66:	f7f7 fde7 	bl	8000a38 <__aeabi_d2iz>
 8008e6a:	9015      	str	r0, [sp, #84]	; 0x54
 8008e6c:	f7f7 faca 	bl	8000404 <__aeabi_i2d>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e78:	f7f7 f976 	bl	8000168 <__aeabi_dsub>
 8008e7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e7e:	4606      	mov	r6, r0
 8008e80:	3330      	adds	r3, #48	; 0x30
 8008e82:	f804 3b01 	strb.w	r3, [r4], #1
 8008e86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e88:	460f      	mov	r7, r1
 8008e8a:	429c      	cmp	r4, r3
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	d124      	bne.n	8008edc <_dtoa_r+0x63c>
 8008e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e96:	4baf      	ldr	r3, [pc, #700]	; (8009154 <_dtoa_r+0x8b4>)
 8008e98:	f7f7 f968 	bl	800016c <__adddf3>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	f7f7 fda8 	bl	80009f8 <__aeabi_dcmpgt>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d163      	bne.n	8008f74 <_dtoa_r+0x6d4>
 8008eac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	49a8      	ldr	r1, [pc, #672]	; (8009154 <_dtoa_r+0x8b4>)
 8008eb4:	f7f7 f958 	bl	8000168 <__aeabi_dsub>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	4639      	mov	r1, r7
 8008ec0:	f7f7 fd7c 	bl	80009bc <__aeabi_dcmplt>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	f43f af1e 	beq.w	8008d06 <_dtoa_r+0x466>
 8008eca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008ecc:	1e7b      	subs	r3, r7, #1
 8008ece:	9314      	str	r3, [sp, #80]	; 0x50
 8008ed0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008ed4:	2b30      	cmp	r3, #48	; 0x30
 8008ed6:	d0f8      	beq.n	8008eca <_dtoa_r+0x62a>
 8008ed8:	46c3      	mov	fp, r8
 8008eda:	e03b      	b.n	8008f54 <_dtoa_r+0x6b4>
 8008edc:	4b9e      	ldr	r3, [pc, #632]	; (8009158 <_dtoa_r+0x8b8>)
 8008ede:	f7f7 fafb 	bl	80004d8 <__aeabi_dmul>
 8008ee2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ee6:	e7bc      	b.n	8008e62 <_dtoa_r+0x5c2>
 8008ee8:	9f03      	ldr	r7, [sp, #12]
 8008eea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008eee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	f7f7 fc19 	bl	800072c <__aeabi_ddiv>
 8008efa:	f7f7 fd9d 	bl	8000a38 <__aeabi_d2iz>
 8008efe:	4604      	mov	r4, r0
 8008f00:	f7f7 fa80 	bl	8000404 <__aeabi_i2d>
 8008f04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f08:	f7f7 fae6 	bl	80004d8 <__aeabi_dmul>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4640      	mov	r0, r8
 8008f12:	4649      	mov	r1, r9
 8008f14:	f7f7 f928 	bl	8000168 <__aeabi_dsub>
 8008f18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008f1c:	f807 6b01 	strb.w	r6, [r7], #1
 8008f20:	9e03      	ldr	r6, [sp, #12]
 8008f22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008f26:	1bbe      	subs	r6, r7, r6
 8008f28:	45b4      	cmp	ip, r6
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	d136      	bne.n	8008f9e <_dtoa_r+0x6fe>
 8008f30:	f7f7 f91c 	bl	800016c <__adddf3>
 8008f34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f38:	4680      	mov	r8, r0
 8008f3a:	4689      	mov	r9, r1
 8008f3c:	f7f7 fd5c 	bl	80009f8 <__aeabi_dcmpgt>
 8008f40:	bb58      	cbnz	r0, 8008f9a <_dtoa_r+0x6fa>
 8008f42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f46:	4640      	mov	r0, r8
 8008f48:	4649      	mov	r1, r9
 8008f4a:	f7f7 fd2d 	bl	80009a8 <__aeabi_dcmpeq>
 8008f4e:	b108      	cbz	r0, 8008f54 <_dtoa_r+0x6b4>
 8008f50:	07e3      	lsls	r3, r4, #31
 8008f52:	d422      	bmi.n	8008f9a <_dtoa_r+0x6fa>
 8008f54:	4651      	mov	r1, sl
 8008f56:	4628      	mov	r0, r5
 8008f58:	f000 fb0e 	bl	8009578 <_Bfree>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f60:	703b      	strb	r3, [r7, #0]
 8008f62:	f10b 0301 	add.w	r3, fp, #1
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f43f ace6 	beq.w	800893c <_dtoa_r+0x9c>
 8008f70:	601f      	str	r7, [r3, #0]
 8008f72:	e4e3      	b.n	800893c <_dtoa_r+0x9c>
 8008f74:	4627      	mov	r7, r4
 8008f76:	463b      	mov	r3, r7
 8008f78:	461f      	mov	r7, r3
 8008f7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f7e:	2a39      	cmp	r2, #57	; 0x39
 8008f80:	d107      	bne.n	8008f92 <_dtoa_r+0x6f2>
 8008f82:	9a03      	ldr	r2, [sp, #12]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d1f7      	bne.n	8008f78 <_dtoa_r+0x6d8>
 8008f88:	2230      	movs	r2, #48	; 0x30
 8008f8a:	9903      	ldr	r1, [sp, #12]
 8008f8c:	f108 0801 	add.w	r8, r8, #1
 8008f90:	700a      	strb	r2, [r1, #0]
 8008f92:	781a      	ldrb	r2, [r3, #0]
 8008f94:	3201      	adds	r2, #1
 8008f96:	701a      	strb	r2, [r3, #0]
 8008f98:	e79e      	b.n	8008ed8 <_dtoa_r+0x638>
 8008f9a:	46d8      	mov	r8, fp
 8008f9c:	e7eb      	b.n	8008f76 <_dtoa_r+0x6d6>
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	4b6d      	ldr	r3, [pc, #436]	; (8009158 <_dtoa_r+0x8b8>)
 8008fa2:	f7f7 fa99 	bl	80004d8 <__aeabi_dmul>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2300      	movs	r3, #0
 8008faa:	4680      	mov	r8, r0
 8008fac:	4689      	mov	r9, r1
 8008fae:	f7f7 fcfb 	bl	80009a8 <__aeabi_dcmpeq>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d09b      	beq.n	8008eee <_dtoa_r+0x64e>
 8008fb6:	e7cd      	b.n	8008f54 <_dtoa_r+0x6b4>
 8008fb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fba:	2a00      	cmp	r2, #0
 8008fbc:	f000 80c4 	beq.w	8009148 <_dtoa_r+0x8a8>
 8008fc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008fc2:	2a01      	cmp	r2, #1
 8008fc4:	f300 80a8 	bgt.w	8009118 <_dtoa_r+0x878>
 8008fc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008fca:	2a00      	cmp	r2, #0
 8008fcc:	f000 80a0 	beq.w	8009110 <_dtoa_r+0x870>
 8008fd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fd4:	464f      	mov	r7, r9
 8008fd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fda:	2101      	movs	r1, #1
 8008fdc:	441a      	add	r2, r3
 8008fde:	4628      	mov	r0, r5
 8008fe0:	4499      	add	r9, r3
 8008fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fe4:	f000 fb7e 	bl	80096e4 <__i2b>
 8008fe8:	4606      	mov	r6, r0
 8008fea:	b15f      	cbz	r7, 8009004 <_dtoa_r+0x764>
 8008fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	dd08      	ble.n	8009004 <_dtoa_r+0x764>
 8008ff2:	42bb      	cmp	r3, r7
 8008ff4:	bfa8      	it	ge
 8008ff6:	463b      	movge	r3, r7
 8008ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ffa:	eba9 0903 	sub.w	r9, r9, r3
 8008ffe:	1aff      	subs	r7, r7, r3
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	9309      	str	r3, [sp, #36]	; 0x24
 8009004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009006:	b1f3      	cbz	r3, 8009046 <_dtoa_r+0x7a6>
 8009008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 80a0 	beq.w	8009150 <_dtoa_r+0x8b0>
 8009010:	2c00      	cmp	r4, #0
 8009012:	dd10      	ble.n	8009036 <_dtoa_r+0x796>
 8009014:	4631      	mov	r1, r6
 8009016:	4622      	mov	r2, r4
 8009018:	4628      	mov	r0, r5
 800901a:	f000 fc21 	bl	8009860 <__pow5mult>
 800901e:	4652      	mov	r2, sl
 8009020:	4601      	mov	r1, r0
 8009022:	4606      	mov	r6, r0
 8009024:	4628      	mov	r0, r5
 8009026:	f000 fb73 	bl	8009710 <__multiply>
 800902a:	4680      	mov	r8, r0
 800902c:	4651      	mov	r1, sl
 800902e:	4628      	mov	r0, r5
 8009030:	f000 faa2 	bl	8009578 <_Bfree>
 8009034:	46c2      	mov	sl, r8
 8009036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009038:	1b1a      	subs	r2, r3, r4
 800903a:	d004      	beq.n	8009046 <_dtoa_r+0x7a6>
 800903c:	4651      	mov	r1, sl
 800903e:	4628      	mov	r0, r5
 8009040:	f000 fc0e 	bl	8009860 <__pow5mult>
 8009044:	4682      	mov	sl, r0
 8009046:	2101      	movs	r1, #1
 8009048:	4628      	mov	r0, r5
 800904a:	f000 fb4b 	bl	80096e4 <__i2b>
 800904e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009050:	4604      	mov	r4, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	f340 8082 	ble.w	800915c <_dtoa_r+0x8bc>
 8009058:	461a      	mov	r2, r3
 800905a:	4601      	mov	r1, r0
 800905c:	4628      	mov	r0, r5
 800905e:	f000 fbff 	bl	8009860 <__pow5mult>
 8009062:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009064:	4604      	mov	r4, r0
 8009066:	2b01      	cmp	r3, #1
 8009068:	dd7b      	ble.n	8009162 <_dtoa_r+0x8c2>
 800906a:	f04f 0800 	mov.w	r8, #0
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009074:	6918      	ldr	r0, [r3, #16]
 8009076:	f000 fae7 	bl	8009648 <__hi0bits>
 800907a:	f1c0 0020 	rsb	r0, r0, #32
 800907e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009080:	4418      	add	r0, r3
 8009082:	f010 001f 	ands.w	r0, r0, #31
 8009086:	f000 8092 	beq.w	80091ae <_dtoa_r+0x90e>
 800908a:	f1c0 0320 	rsb	r3, r0, #32
 800908e:	2b04      	cmp	r3, #4
 8009090:	f340 8085 	ble.w	800919e <_dtoa_r+0x8fe>
 8009094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009096:	f1c0 001c 	rsb	r0, r0, #28
 800909a:	4403      	add	r3, r0
 800909c:	4481      	add	r9, r0
 800909e:	4407      	add	r7, r0
 80090a0:	9309      	str	r3, [sp, #36]	; 0x24
 80090a2:	f1b9 0f00 	cmp.w	r9, #0
 80090a6:	dd05      	ble.n	80090b4 <_dtoa_r+0x814>
 80090a8:	4651      	mov	r1, sl
 80090aa:	464a      	mov	r2, r9
 80090ac:	4628      	mov	r0, r5
 80090ae:	f000 fc31 	bl	8009914 <__lshift>
 80090b2:	4682      	mov	sl, r0
 80090b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	dd05      	ble.n	80090c6 <_dtoa_r+0x826>
 80090ba:	4621      	mov	r1, r4
 80090bc:	461a      	mov	r2, r3
 80090be:	4628      	mov	r0, r5
 80090c0:	f000 fc28 	bl	8009914 <__lshift>
 80090c4:	4604      	mov	r4, r0
 80090c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d072      	beq.n	80091b2 <_dtoa_r+0x912>
 80090cc:	4621      	mov	r1, r4
 80090ce:	4650      	mov	r0, sl
 80090d0:	f000 fc8c 	bl	80099ec <__mcmp>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	da6c      	bge.n	80091b2 <_dtoa_r+0x912>
 80090d8:	2300      	movs	r3, #0
 80090da:	4651      	mov	r1, sl
 80090dc:	220a      	movs	r2, #10
 80090de:	4628      	mov	r0, r5
 80090e0:	f000 fa6c 	bl	80095bc <__multadd>
 80090e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090e6:	4682      	mov	sl, r0
 80090e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 81ac 	beq.w	800944a <_dtoa_r+0xbaa>
 80090f2:	2300      	movs	r3, #0
 80090f4:	4631      	mov	r1, r6
 80090f6:	220a      	movs	r2, #10
 80090f8:	4628      	mov	r0, r5
 80090fa:	f000 fa5f 	bl	80095bc <__multadd>
 80090fe:	9b06      	ldr	r3, [sp, #24]
 8009100:	4606      	mov	r6, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	f300 8093 	bgt.w	800922e <_dtoa_r+0x98e>
 8009108:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800910a:	2b02      	cmp	r3, #2
 800910c:	dc59      	bgt.n	80091c2 <_dtoa_r+0x922>
 800910e:	e08e      	b.n	800922e <_dtoa_r+0x98e>
 8009110:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009112:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009116:	e75d      	b.n	8008fd4 <_dtoa_r+0x734>
 8009118:	9b08      	ldr	r3, [sp, #32]
 800911a:	1e5c      	subs	r4, r3, #1
 800911c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800911e:	42a3      	cmp	r3, r4
 8009120:	bfbf      	itttt	lt
 8009122:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009124:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009126:	1ae3      	sublt	r3, r4, r3
 8009128:	18d2      	addlt	r2, r2, r3
 800912a:	bfa8      	it	ge
 800912c:	1b1c      	subge	r4, r3, r4
 800912e:	9b08      	ldr	r3, [sp, #32]
 8009130:	bfbe      	ittt	lt
 8009132:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009134:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009136:	2400      	movlt	r4, #0
 8009138:	2b00      	cmp	r3, #0
 800913a:	bfb5      	itete	lt
 800913c:	eba9 0703 	sublt.w	r7, r9, r3
 8009140:	464f      	movge	r7, r9
 8009142:	2300      	movlt	r3, #0
 8009144:	9b08      	ldrge	r3, [sp, #32]
 8009146:	e747      	b.n	8008fd8 <_dtoa_r+0x738>
 8009148:	464f      	mov	r7, r9
 800914a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800914c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800914e:	e74c      	b.n	8008fea <_dtoa_r+0x74a>
 8009150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009152:	e773      	b.n	800903c <_dtoa_r+0x79c>
 8009154:	3fe00000 	.word	0x3fe00000
 8009158:	40240000 	.word	0x40240000
 800915c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800915e:	2b01      	cmp	r3, #1
 8009160:	dc18      	bgt.n	8009194 <_dtoa_r+0x8f4>
 8009162:	9b04      	ldr	r3, [sp, #16]
 8009164:	b9b3      	cbnz	r3, 8009194 <_dtoa_r+0x8f4>
 8009166:	9b05      	ldr	r3, [sp, #20]
 8009168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800916c:	b993      	cbnz	r3, 8009194 <_dtoa_r+0x8f4>
 800916e:	9b05      	ldr	r3, [sp, #20]
 8009170:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009174:	0d1b      	lsrs	r3, r3, #20
 8009176:	051b      	lsls	r3, r3, #20
 8009178:	b17b      	cbz	r3, 800919a <_dtoa_r+0x8fa>
 800917a:	f04f 0801 	mov.w	r8, #1
 800917e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009180:	f109 0901 	add.w	r9, r9, #1
 8009184:	3301      	adds	r3, #1
 8009186:	9309      	str	r3, [sp, #36]	; 0x24
 8009188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800918a:	2b00      	cmp	r3, #0
 800918c:	f47f af6f 	bne.w	800906e <_dtoa_r+0x7ce>
 8009190:	2001      	movs	r0, #1
 8009192:	e774      	b.n	800907e <_dtoa_r+0x7de>
 8009194:	f04f 0800 	mov.w	r8, #0
 8009198:	e7f6      	b.n	8009188 <_dtoa_r+0x8e8>
 800919a:	4698      	mov	r8, r3
 800919c:	e7f4      	b.n	8009188 <_dtoa_r+0x8e8>
 800919e:	d080      	beq.n	80090a2 <_dtoa_r+0x802>
 80091a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091a2:	331c      	adds	r3, #28
 80091a4:	441a      	add	r2, r3
 80091a6:	4499      	add	r9, r3
 80091a8:	441f      	add	r7, r3
 80091aa:	9209      	str	r2, [sp, #36]	; 0x24
 80091ac:	e779      	b.n	80090a2 <_dtoa_r+0x802>
 80091ae:	4603      	mov	r3, r0
 80091b0:	e7f6      	b.n	80091a0 <_dtoa_r+0x900>
 80091b2:	9b08      	ldr	r3, [sp, #32]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	dc34      	bgt.n	8009222 <_dtoa_r+0x982>
 80091b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	dd31      	ble.n	8009222 <_dtoa_r+0x982>
 80091be:	9b08      	ldr	r3, [sp, #32]
 80091c0:	9306      	str	r3, [sp, #24]
 80091c2:	9b06      	ldr	r3, [sp, #24]
 80091c4:	b963      	cbnz	r3, 80091e0 <_dtoa_r+0x940>
 80091c6:	4621      	mov	r1, r4
 80091c8:	2205      	movs	r2, #5
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 f9f6 	bl	80095bc <__multadd>
 80091d0:	4601      	mov	r1, r0
 80091d2:	4604      	mov	r4, r0
 80091d4:	4650      	mov	r0, sl
 80091d6:	f000 fc09 	bl	80099ec <__mcmp>
 80091da:	2800      	cmp	r0, #0
 80091dc:	f73f adbf 	bgt.w	8008d5e <_dtoa_r+0x4be>
 80091e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091e2:	9f03      	ldr	r7, [sp, #12]
 80091e4:	ea6f 0b03 	mvn.w	fp, r3
 80091e8:	f04f 0800 	mov.w	r8, #0
 80091ec:	4621      	mov	r1, r4
 80091ee:	4628      	mov	r0, r5
 80091f0:	f000 f9c2 	bl	8009578 <_Bfree>
 80091f4:	2e00      	cmp	r6, #0
 80091f6:	f43f aead 	beq.w	8008f54 <_dtoa_r+0x6b4>
 80091fa:	f1b8 0f00 	cmp.w	r8, #0
 80091fe:	d005      	beq.n	800920c <_dtoa_r+0x96c>
 8009200:	45b0      	cmp	r8, r6
 8009202:	d003      	beq.n	800920c <_dtoa_r+0x96c>
 8009204:	4641      	mov	r1, r8
 8009206:	4628      	mov	r0, r5
 8009208:	f000 f9b6 	bl	8009578 <_Bfree>
 800920c:	4631      	mov	r1, r6
 800920e:	4628      	mov	r0, r5
 8009210:	f000 f9b2 	bl	8009578 <_Bfree>
 8009214:	e69e      	b.n	8008f54 <_dtoa_r+0x6b4>
 8009216:	2400      	movs	r4, #0
 8009218:	4626      	mov	r6, r4
 800921a:	e7e1      	b.n	80091e0 <_dtoa_r+0x940>
 800921c:	46c3      	mov	fp, r8
 800921e:	4626      	mov	r6, r4
 8009220:	e59d      	b.n	8008d5e <_dtoa_r+0x4be>
 8009222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 80c8 	beq.w	80093ba <_dtoa_r+0xb1a>
 800922a:	9b08      	ldr	r3, [sp, #32]
 800922c:	9306      	str	r3, [sp, #24]
 800922e:	2f00      	cmp	r7, #0
 8009230:	dd05      	ble.n	800923e <_dtoa_r+0x99e>
 8009232:	4631      	mov	r1, r6
 8009234:	463a      	mov	r2, r7
 8009236:	4628      	mov	r0, r5
 8009238:	f000 fb6c 	bl	8009914 <__lshift>
 800923c:	4606      	mov	r6, r0
 800923e:	f1b8 0f00 	cmp.w	r8, #0
 8009242:	d05b      	beq.n	80092fc <_dtoa_r+0xa5c>
 8009244:	4628      	mov	r0, r5
 8009246:	6871      	ldr	r1, [r6, #4]
 8009248:	f000 f956 	bl	80094f8 <_Balloc>
 800924c:	4607      	mov	r7, r0
 800924e:	b928      	cbnz	r0, 800925c <_dtoa_r+0x9bc>
 8009250:	4602      	mov	r2, r0
 8009252:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009256:	4b81      	ldr	r3, [pc, #516]	; (800945c <_dtoa_r+0xbbc>)
 8009258:	f7ff bb36 	b.w	80088c8 <_dtoa_r+0x28>
 800925c:	6932      	ldr	r2, [r6, #16]
 800925e:	f106 010c 	add.w	r1, r6, #12
 8009262:	3202      	adds	r2, #2
 8009264:	0092      	lsls	r2, r2, #2
 8009266:	300c      	adds	r0, #12
 8009268:	f7ff fa63 	bl	8008732 <memcpy>
 800926c:	2201      	movs	r2, #1
 800926e:	4639      	mov	r1, r7
 8009270:	4628      	mov	r0, r5
 8009272:	f000 fb4f 	bl	8009914 <__lshift>
 8009276:	46b0      	mov	r8, r6
 8009278:	4606      	mov	r6, r0
 800927a:	9b03      	ldr	r3, [sp, #12]
 800927c:	9a03      	ldr	r2, [sp, #12]
 800927e:	3301      	adds	r3, #1
 8009280:	9308      	str	r3, [sp, #32]
 8009282:	9b06      	ldr	r3, [sp, #24]
 8009284:	4413      	add	r3, r2
 8009286:	930b      	str	r3, [sp, #44]	; 0x2c
 8009288:	9b04      	ldr	r3, [sp, #16]
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	930a      	str	r3, [sp, #40]	; 0x28
 8009290:	9b08      	ldr	r3, [sp, #32]
 8009292:	4621      	mov	r1, r4
 8009294:	3b01      	subs	r3, #1
 8009296:	4650      	mov	r0, sl
 8009298:	9304      	str	r3, [sp, #16]
 800929a:	f7ff fa77 	bl	800878c <quorem>
 800929e:	4641      	mov	r1, r8
 80092a0:	9006      	str	r0, [sp, #24]
 80092a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80092a6:	4650      	mov	r0, sl
 80092a8:	f000 fba0 	bl	80099ec <__mcmp>
 80092ac:	4632      	mov	r2, r6
 80092ae:	9009      	str	r0, [sp, #36]	; 0x24
 80092b0:	4621      	mov	r1, r4
 80092b2:	4628      	mov	r0, r5
 80092b4:	f000 fbb6 	bl	8009a24 <__mdiff>
 80092b8:	68c2      	ldr	r2, [r0, #12]
 80092ba:	4607      	mov	r7, r0
 80092bc:	bb02      	cbnz	r2, 8009300 <_dtoa_r+0xa60>
 80092be:	4601      	mov	r1, r0
 80092c0:	4650      	mov	r0, sl
 80092c2:	f000 fb93 	bl	80099ec <__mcmp>
 80092c6:	4602      	mov	r2, r0
 80092c8:	4639      	mov	r1, r7
 80092ca:	4628      	mov	r0, r5
 80092cc:	920c      	str	r2, [sp, #48]	; 0x30
 80092ce:	f000 f953 	bl	8009578 <_Bfree>
 80092d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092d6:	9f08      	ldr	r7, [sp, #32]
 80092d8:	ea43 0102 	orr.w	r1, r3, r2
 80092dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092de:	4319      	orrs	r1, r3
 80092e0:	d110      	bne.n	8009304 <_dtoa_r+0xa64>
 80092e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092e6:	d029      	beq.n	800933c <_dtoa_r+0xa9c>
 80092e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	dd02      	ble.n	80092f4 <_dtoa_r+0xa54>
 80092ee:	9b06      	ldr	r3, [sp, #24]
 80092f0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80092f4:	9b04      	ldr	r3, [sp, #16]
 80092f6:	f883 9000 	strb.w	r9, [r3]
 80092fa:	e777      	b.n	80091ec <_dtoa_r+0x94c>
 80092fc:	4630      	mov	r0, r6
 80092fe:	e7ba      	b.n	8009276 <_dtoa_r+0x9d6>
 8009300:	2201      	movs	r2, #1
 8009302:	e7e1      	b.n	80092c8 <_dtoa_r+0xa28>
 8009304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009306:	2b00      	cmp	r3, #0
 8009308:	db04      	blt.n	8009314 <_dtoa_r+0xa74>
 800930a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800930c:	430b      	orrs	r3, r1
 800930e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009310:	430b      	orrs	r3, r1
 8009312:	d120      	bne.n	8009356 <_dtoa_r+0xab6>
 8009314:	2a00      	cmp	r2, #0
 8009316:	dded      	ble.n	80092f4 <_dtoa_r+0xa54>
 8009318:	4651      	mov	r1, sl
 800931a:	2201      	movs	r2, #1
 800931c:	4628      	mov	r0, r5
 800931e:	f000 faf9 	bl	8009914 <__lshift>
 8009322:	4621      	mov	r1, r4
 8009324:	4682      	mov	sl, r0
 8009326:	f000 fb61 	bl	80099ec <__mcmp>
 800932a:	2800      	cmp	r0, #0
 800932c:	dc03      	bgt.n	8009336 <_dtoa_r+0xa96>
 800932e:	d1e1      	bne.n	80092f4 <_dtoa_r+0xa54>
 8009330:	f019 0f01 	tst.w	r9, #1
 8009334:	d0de      	beq.n	80092f4 <_dtoa_r+0xa54>
 8009336:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800933a:	d1d8      	bne.n	80092ee <_dtoa_r+0xa4e>
 800933c:	2339      	movs	r3, #57	; 0x39
 800933e:	9a04      	ldr	r2, [sp, #16]
 8009340:	7013      	strb	r3, [r2, #0]
 8009342:	463b      	mov	r3, r7
 8009344:	461f      	mov	r7, r3
 8009346:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800934a:	3b01      	subs	r3, #1
 800934c:	2a39      	cmp	r2, #57	; 0x39
 800934e:	d06b      	beq.n	8009428 <_dtoa_r+0xb88>
 8009350:	3201      	adds	r2, #1
 8009352:	701a      	strb	r2, [r3, #0]
 8009354:	e74a      	b.n	80091ec <_dtoa_r+0x94c>
 8009356:	2a00      	cmp	r2, #0
 8009358:	dd07      	ble.n	800936a <_dtoa_r+0xaca>
 800935a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800935e:	d0ed      	beq.n	800933c <_dtoa_r+0xa9c>
 8009360:	9a04      	ldr	r2, [sp, #16]
 8009362:	f109 0301 	add.w	r3, r9, #1
 8009366:	7013      	strb	r3, [r2, #0]
 8009368:	e740      	b.n	80091ec <_dtoa_r+0x94c>
 800936a:	9b08      	ldr	r3, [sp, #32]
 800936c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800936e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009372:	4293      	cmp	r3, r2
 8009374:	d042      	beq.n	80093fc <_dtoa_r+0xb5c>
 8009376:	4651      	mov	r1, sl
 8009378:	2300      	movs	r3, #0
 800937a:	220a      	movs	r2, #10
 800937c:	4628      	mov	r0, r5
 800937e:	f000 f91d 	bl	80095bc <__multadd>
 8009382:	45b0      	cmp	r8, r6
 8009384:	4682      	mov	sl, r0
 8009386:	f04f 0300 	mov.w	r3, #0
 800938a:	f04f 020a 	mov.w	r2, #10
 800938e:	4641      	mov	r1, r8
 8009390:	4628      	mov	r0, r5
 8009392:	d107      	bne.n	80093a4 <_dtoa_r+0xb04>
 8009394:	f000 f912 	bl	80095bc <__multadd>
 8009398:	4680      	mov	r8, r0
 800939a:	4606      	mov	r6, r0
 800939c:	9b08      	ldr	r3, [sp, #32]
 800939e:	3301      	adds	r3, #1
 80093a0:	9308      	str	r3, [sp, #32]
 80093a2:	e775      	b.n	8009290 <_dtoa_r+0x9f0>
 80093a4:	f000 f90a 	bl	80095bc <__multadd>
 80093a8:	4631      	mov	r1, r6
 80093aa:	4680      	mov	r8, r0
 80093ac:	2300      	movs	r3, #0
 80093ae:	220a      	movs	r2, #10
 80093b0:	4628      	mov	r0, r5
 80093b2:	f000 f903 	bl	80095bc <__multadd>
 80093b6:	4606      	mov	r6, r0
 80093b8:	e7f0      	b.n	800939c <_dtoa_r+0xafc>
 80093ba:	9b08      	ldr	r3, [sp, #32]
 80093bc:	9306      	str	r3, [sp, #24]
 80093be:	9f03      	ldr	r7, [sp, #12]
 80093c0:	4621      	mov	r1, r4
 80093c2:	4650      	mov	r0, sl
 80093c4:	f7ff f9e2 	bl	800878c <quorem>
 80093c8:	9b03      	ldr	r3, [sp, #12]
 80093ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80093ce:	f807 9b01 	strb.w	r9, [r7], #1
 80093d2:	1afa      	subs	r2, r7, r3
 80093d4:	9b06      	ldr	r3, [sp, #24]
 80093d6:	4293      	cmp	r3, r2
 80093d8:	dd07      	ble.n	80093ea <_dtoa_r+0xb4a>
 80093da:	4651      	mov	r1, sl
 80093dc:	2300      	movs	r3, #0
 80093de:	220a      	movs	r2, #10
 80093e0:	4628      	mov	r0, r5
 80093e2:	f000 f8eb 	bl	80095bc <__multadd>
 80093e6:	4682      	mov	sl, r0
 80093e8:	e7ea      	b.n	80093c0 <_dtoa_r+0xb20>
 80093ea:	9b06      	ldr	r3, [sp, #24]
 80093ec:	f04f 0800 	mov.w	r8, #0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	bfcc      	ite	gt
 80093f4:	461f      	movgt	r7, r3
 80093f6:	2701      	movle	r7, #1
 80093f8:	9b03      	ldr	r3, [sp, #12]
 80093fa:	441f      	add	r7, r3
 80093fc:	4651      	mov	r1, sl
 80093fe:	2201      	movs	r2, #1
 8009400:	4628      	mov	r0, r5
 8009402:	f000 fa87 	bl	8009914 <__lshift>
 8009406:	4621      	mov	r1, r4
 8009408:	4682      	mov	sl, r0
 800940a:	f000 faef 	bl	80099ec <__mcmp>
 800940e:	2800      	cmp	r0, #0
 8009410:	dc97      	bgt.n	8009342 <_dtoa_r+0xaa2>
 8009412:	d102      	bne.n	800941a <_dtoa_r+0xb7a>
 8009414:	f019 0f01 	tst.w	r9, #1
 8009418:	d193      	bne.n	8009342 <_dtoa_r+0xaa2>
 800941a:	463b      	mov	r3, r7
 800941c:	461f      	mov	r7, r3
 800941e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009422:	2a30      	cmp	r2, #48	; 0x30
 8009424:	d0fa      	beq.n	800941c <_dtoa_r+0xb7c>
 8009426:	e6e1      	b.n	80091ec <_dtoa_r+0x94c>
 8009428:	9a03      	ldr	r2, [sp, #12]
 800942a:	429a      	cmp	r2, r3
 800942c:	d18a      	bne.n	8009344 <_dtoa_r+0xaa4>
 800942e:	2331      	movs	r3, #49	; 0x31
 8009430:	f10b 0b01 	add.w	fp, fp, #1
 8009434:	e797      	b.n	8009366 <_dtoa_r+0xac6>
 8009436:	4b0a      	ldr	r3, [pc, #40]	; (8009460 <_dtoa_r+0xbc0>)
 8009438:	f7ff ba9f 	b.w	800897a <_dtoa_r+0xda>
 800943c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800943e:	2b00      	cmp	r3, #0
 8009440:	f47f aa77 	bne.w	8008932 <_dtoa_r+0x92>
 8009444:	4b07      	ldr	r3, [pc, #28]	; (8009464 <_dtoa_r+0xbc4>)
 8009446:	f7ff ba98 	b.w	800897a <_dtoa_r+0xda>
 800944a:	9b06      	ldr	r3, [sp, #24]
 800944c:	2b00      	cmp	r3, #0
 800944e:	dcb6      	bgt.n	80093be <_dtoa_r+0xb1e>
 8009450:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009452:	2b02      	cmp	r3, #2
 8009454:	f73f aeb5 	bgt.w	80091c2 <_dtoa_r+0x922>
 8009458:	e7b1      	b.n	80093be <_dtoa_r+0xb1e>
 800945a:	bf00      	nop
 800945c:	0800aa0f 	.word	0x0800aa0f
 8009460:	0800a933 	.word	0x0800a933
 8009464:	0800a993 	.word	0x0800a993

08009468 <_free_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4605      	mov	r5, r0
 800946c:	2900      	cmp	r1, #0
 800946e:	d040      	beq.n	80094f2 <_free_r+0x8a>
 8009470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009474:	1f0c      	subs	r4, r1, #4
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfb8      	it	lt
 800947a:	18e4      	addlt	r4, r4, r3
 800947c:	f7fe f9f0 	bl	8007860 <__malloc_lock>
 8009480:	4a1c      	ldr	r2, [pc, #112]	; (80094f4 <_free_r+0x8c>)
 8009482:	6813      	ldr	r3, [r2, #0]
 8009484:	b933      	cbnz	r3, 8009494 <_free_r+0x2c>
 8009486:	6063      	str	r3, [r4, #4]
 8009488:	6014      	str	r4, [r2, #0]
 800948a:	4628      	mov	r0, r5
 800948c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009490:	f7fe b9ec 	b.w	800786c <__malloc_unlock>
 8009494:	42a3      	cmp	r3, r4
 8009496:	d908      	bls.n	80094aa <_free_r+0x42>
 8009498:	6820      	ldr	r0, [r4, #0]
 800949a:	1821      	adds	r1, r4, r0
 800949c:	428b      	cmp	r3, r1
 800949e:	bf01      	itttt	eq
 80094a0:	6819      	ldreq	r1, [r3, #0]
 80094a2:	685b      	ldreq	r3, [r3, #4]
 80094a4:	1809      	addeq	r1, r1, r0
 80094a6:	6021      	streq	r1, [r4, #0]
 80094a8:	e7ed      	b.n	8009486 <_free_r+0x1e>
 80094aa:	461a      	mov	r2, r3
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	b10b      	cbz	r3, 80094b4 <_free_r+0x4c>
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	d9fa      	bls.n	80094aa <_free_r+0x42>
 80094b4:	6811      	ldr	r1, [r2, #0]
 80094b6:	1850      	adds	r0, r2, r1
 80094b8:	42a0      	cmp	r0, r4
 80094ba:	d10b      	bne.n	80094d4 <_free_r+0x6c>
 80094bc:	6820      	ldr	r0, [r4, #0]
 80094be:	4401      	add	r1, r0
 80094c0:	1850      	adds	r0, r2, r1
 80094c2:	4283      	cmp	r3, r0
 80094c4:	6011      	str	r1, [r2, #0]
 80094c6:	d1e0      	bne.n	800948a <_free_r+0x22>
 80094c8:	6818      	ldr	r0, [r3, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	4408      	add	r0, r1
 80094ce:	6010      	str	r0, [r2, #0]
 80094d0:	6053      	str	r3, [r2, #4]
 80094d2:	e7da      	b.n	800948a <_free_r+0x22>
 80094d4:	d902      	bls.n	80094dc <_free_r+0x74>
 80094d6:	230c      	movs	r3, #12
 80094d8:	602b      	str	r3, [r5, #0]
 80094da:	e7d6      	b.n	800948a <_free_r+0x22>
 80094dc:	6820      	ldr	r0, [r4, #0]
 80094de:	1821      	adds	r1, r4, r0
 80094e0:	428b      	cmp	r3, r1
 80094e2:	bf01      	itttt	eq
 80094e4:	6819      	ldreq	r1, [r3, #0]
 80094e6:	685b      	ldreq	r3, [r3, #4]
 80094e8:	1809      	addeq	r1, r1, r0
 80094ea:	6021      	streq	r1, [r4, #0]
 80094ec:	6063      	str	r3, [r4, #4]
 80094ee:	6054      	str	r4, [r2, #4]
 80094f0:	e7cb      	b.n	800948a <_free_r+0x22>
 80094f2:	bd38      	pop	{r3, r4, r5, pc}
 80094f4:	20000a94 	.word	0x20000a94

080094f8 <_Balloc>:
 80094f8:	b570      	push	{r4, r5, r6, lr}
 80094fa:	69c6      	ldr	r6, [r0, #28]
 80094fc:	4604      	mov	r4, r0
 80094fe:	460d      	mov	r5, r1
 8009500:	b976      	cbnz	r6, 8009520 <_Balloc+0x28>
 8009502:	2010      	movs	r0, #16
 8009504:	f7fe f904 	bl	8007710 <malloc>
 8009508:	4602      	mov	r2, r0
 800950a:	61e0      	str	r0, [r4, #28]
 800950c:	b920      	cbnz	r0, 8009518 <_Balloc+0x20>
 800950e:	216b      	movs	r1, #107	; 0x6b
 8009510:	4b17      	ldr	r3, [pc, #92]	; (8009570 <_Balloc+0x78>)
 8009512:	4818      	ldr	r0, [pc, #96]	; (8009574 <_Balloc+0x7c>)
 8009514:	f7ff f91c 	bl	8008750 <__assert_func>
 8009518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800951c:	6006      	str	r6, [r0, #0]
 800951e:	60c6      	str	r6, [r0, #12]
 8009520:	69e6      	ldr	r6, [r4, #28]
 8009522:	68f3      	ldr	r3, [r6, #12]
 8009524:	b183      	cbz	r3, 8009548 <_Balloc+0x50>
 8009526:	69e3      	ldr	r3, [r4, #28]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800952e:	b9b8      	cbnz	r0, 8009560 <_Balloc+0x68>
 8009530:	2101      	movs	r1, #1
 8009532:	fa01 f605 	lsl.w	r6, r1, r5
 8009536:	1d72      	adds	r2, r6, #5
 8009538:	4620      	mov	r0, r4
 800953a:	0092      	lsls	r2, r2, #2
 800953c:	f000 ff4f 	bl	800a3de <_calloc_r>
 8009540:	b160      	cbz	r0, 800955c <_Balloc+0x64>
 8009542:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009546:	e00e      	b.n	8009566 <_Balloc+0x6e>
 8009548:	2221      	movs	r2, #33	; 0x21
 800954a:	2104      	movs	r1, #4
 800954c:	4620      	mov	r0, r4
 800954e:	f000 ff46 	bl	800a3de <_calloc_r>
 8009552:	69e3      	ldr	r3, [r4, #28]
 8009554:	60f0      	str	r0, [r6, #12]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1e4      	bne.n	8009526 <_Balloc+0x2e>
 800955c:	2000      	movs	r0, #0
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	6802      	ldr	r2, [r0, #0]
 8009562:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009566:	2300      	movs	r3, #0
 8009568:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800956c:	e7f7      	b.n	800955e <_Balloc+0x66>
 800956e:	bf00      	nop
 8009570:	0800a9a0 	.word	0x0800a9a0
 8009574:	0800aa20 	.word	0x0800aa20

08009578 <_Bfree>:
 8009578:	b570      	push	{r4, r5, r6, lr}
 800957a:	69c6      	ldr	r6, [r0, #28]
 800957c:	4605      	mov	r5, r0
 800957e:	460c      	mov	r4, r1
 8009580:	b976      	cbnz	r6, 80095a0 <_Bfree+0x28>
 8009582:	2010      	movs	r0, #16
 8009584:	f7fe f8c4 	bl	8007710 <malloc>
 8009588:	4602      	mov	r2, r0
 800958a:	61e8      	str	r0, [r5, #28]
 800958c:	b920      	cbnz	r0, 8009598 <_Bfree+0x20>
 800958e:	218f      	movs	r1, #143	; 0x8f
 8009590:	4b08      	ldr	r3, [pc, #32]	; (80095b4 <_Bfree+0x3c>)
 8009592:	4809      	ldr	r0, [pc, #36]	; (80095b8 <_Bfree+0x40>)
 8009594:	f7ff f8dc 	bl	8008750 <__assert_func>
 8009598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800959c:	6006      	str	r6, [r0, #0]
 800959e:	60c6      	str	r6, [r0, #12]
 80095a0:	b13c      	cbz	r4, 80095b2 <_Bfree+0x3a>
 80095a2:	69eb      	ldr	r3, [r5, #28]
 80095a4:	6862      	ldr	r2, [r4, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095ac:	6021      	str	r1, [r4, #0]
 80095ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095b2:	bd70      	pop	{r4, r5, r6, pc}
 80095b4:	0800a9a0 	.word	0x0800a9a0
 80095b8:	0800aa20 	.word	0x0800aa20

080095bc <__multadd>:
 80095bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c0:	4607      	mov	r7, r0
 80095c2:	460c      	mov	r4, r1
 80095c4:	461e      	mov	r6, r3
 80095c6:	2000      	movs	r0, #0
 80095c8:	690d      	ldr	r5, [r1, #16]
 80095ca:	f101 0c14 	add.w	ip, r1, #20
 80095ce:	f8dc 3000 	ldr.w	r3, [ip]
 80095d2:	3001      	adds	r0, #1
 80095d4:	b299      	uxth	r1, r3
 80095d6:	fb02 6101 	mla	r1, r2, r1, r6
 80095da:	0c1e      	lsrs	r6, r3, #16
 80095dc:	0c0b      	lsrs	r3, r1, #16
 80095de:	fb02 3306 	mla	r3, r2, r6, r3
 80095e2:	b289      	uxth	r1, r1
 80095e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80095e8:	4285      	cmp	r5, r0
 80095ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80095ee:	f84c 1b04 	str.w	r1, [ip], #4
 80095f2:	dcec      	bgt.n	80095ce <__multadd+0x12>
 80095f4:	b30e      	cbz	r6, 800963a <__multadd+0x7e>
 80095f6:	68a3      	ldr	r3, [r4, #8]
 80095f8:	42ab      	cmp	r3, r5
 80095fa:	dc19      	bgt.n	8009630 <__multadd+0x74>
 80095fc:	6861      	ldr	r1, [r4, #4]
 80095fe:	4638      	mov	r0, r7
 8009600:	3101      	adds	r1, #1
 8009602:	f7ff ff79 	bl	80094f8 <_Balloc>
 8009606:	4680      	mov	r8, r0
 8009608:	b928      	cbnz	r0, 8009616 <__multadd+0x5a>
 800960a:	4602      	mov	r2, r0
 800960c:	21ba      	movs	r1, #186	; 0xba
 800960e:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <__multadd+0x84>)
 8009610:	480c      	ldr	r0, [pc, #48]	; (8009644 <__multadd+0x88>)
 8009612:	f7ff f89d 	bl	8008750 <__assert_func>
 8009616:	6922      	ldr	r2, [r4, #16]
 8009618:	f104 010c 	add.w	r1, r4, #12
 800961c:	3202      	adds	r2, #2
 800961e:	0092      	lsls	r2, r2, #2
 8009620:	300c      	adds	r0, #12
 8009622:	f7ff f886 	bl	8008732 <memcpy>
 8009626:	4621      	mov	r1, r4
 8009628:	4638      	mov	r0, r7
 800962a:	f7ff ffa5 	bl	8009578 <_Bfree>
 800962e:	4644      	mov	r4, r8
 8009630:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009634:	3501      	adds	r5, #1
 8009636:	615e      	str	r6, [r3, #20]
 8009638:	6125      	str	r5, [r4, #16]
 800963a:	4620      	mov	r0, r4
 800963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009640:	0800aa0f 	.word	0x0800aa0f
 8009644:	0800aa20 	.word	0x0800aa20

08009648 <__hi0bits>:
 8009648:	0c02      	lsrs	r2, r0, #16
 800964a:	0412      	lsls	r2, r2, #16
 800964c:	4603      	mov	r3, r0
 800964e:	b9ca      	cbnz	r2, 8009684 <__hi0bits+0x3c>
 8009650:	0403      	lsls	r3, r0, #16
 8009652:	2010      	movs	r0, #16
 8009654:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009658:	bf04      	itt	eq
 800965a:	021b      	lsleq	r3, r3, #8
 800965c:	3008      	addeq	r0, #8
 800965e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009662:	bf04      	itt	eq
 8009664:	011b      	lsleq	r3, r3, #4
 8009666:	3004      	addeq	r0, #4
 8009668:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800966c:	bf04      	itt	eq
 800966e:	009b      	lsleq	r3, r3, #2
 8009670:	3002      	addeq	r0, #2
 8009672:	2b00      	cmp	r3, #0
 8009674:	db05      	blt.n	8009682 <__hi0bits+0x3a>
 8009676:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800967a:	f100 0001 	add.w	r0, r0, #1
 800967e:	bf08      	it	eq
 8009680:	2020      	moveq	r0, #32
 8009682:	4770      	bx	lr
 8009684:	2000      	movs	r0, #0
 8009686:	e7e5      	b.n	8009654 <__hi0bits+0xc>

08009688 <__lo0bits>:
 8009688:	6803      	ldr	r3, [r0, #0]
 800968a:	4602      	mov	r2, r0
 800968c:	f013 0007 	ands.w	r0, r3, #7
 8009690:	d00b      	beq.n	80096aa <__lo0bits+0x22>
 8009692:	07d9      	lsls	r1, r3, #31
 8009694:	d421      	bmi.n	80096da <__lo0bits+0x52>
 8009696:	0798      	lsls	r0, r3, #30
 8009698:	bf49      	itett	mi
 800969a:	085b      	lsrmi	r3, r3, #1
 800969c:	089b      	lsrpl	r3, r3, #2
 800969e:	2001      	movmi	r0, #1
 80096a0:	6013      	strmi	r3, [r2, #0]
 80096a2:	bf5c      	itt	pl
 80096a4:	2002      	movpl	r0, #2
 80096a6:	6013      	strpl	r3, [r2, #0]
 80096a8:	4770      	bx	lr
 80096aa:	b299      	uxth	r1, r3
 80096ac:	b909      	cbnz	r1, 80096b2 <__lo0bits+0x2a>
 80096ae:	2010      	movs	r0, #16
 80096b0:	0c1b      	lsrs	r3, r3, #16
 80096b2:	b2d9      	uxtb	r1, r3
 80096b4:	b909      	cbnz	r1, 80096ba <__lo0bits+0x32>
 80096b6:	3008      	adds	r0, #8
 80096b8:	0a1b      	lsrs	r3, r3, #8
 80096ba:	0719      	lsls	r1, r3, #28
 80096bc:	bf04      	itt	eq
 80096be:	091b      	lsreq	r3, r3, #4
 80096c0:	3004      	addeq	r0, #4
 80096c2:	0799      	lsls	r1, r3, #30
 80096c4:	bf04      	itt	eq
 80096c6:	089b      	lsreq	r3, r3, #2
 80096c8:	3002      	addeq	r0, #2
 80096ca:	07d9      	lsls	r1, r3, #31
 80096cc:	d403      	bmi.n	80096d6 <__lo0bits+0x4e>
 80096ce:	085b      	lsrs	r3, r3, #1
 80096d0:	f100 0001 	add.w	r0, r0, #1
 80096d4:	d003      	beq.n	80096de <__lo0bits+0x56>
 80096d6:	6013      	str	r3, [r2, #0]
 80096d8:	4770      	bx	lr
 80096da:	2000      	movs	r0, #0
 80096dc:	4770      	bx	lr
 80096de:	2020      	movs	r0, #32
 80096e0:	4770      	bx	lr
	...

080096e4 <__i2b>:
 80096e4:	b510      	push	{r4, lr}
 80096e6:	460c      	mov	r4, r1
 80096e8:	2101      	movs	r1, #1
 80096ea:	f7ff ff05 	bl	80094f8 <_Balloc>
 80096ee:	4602      	mov	r2, r0
 80096f0:	b928      	cbnz	r0, 80096fe <__i2b+0x1a>
 80096f2:	f240 1145 	movw	r1, #325	; 0x145
 80096f6:	4b04      	ldr	r3, [pc, #16]	; (8009708 <__i2b+0x24>)
 80096f8:	4804      	ldr	r0, [pc, #16]	; (800970c <__i2b+0x28>)
 80096fa:	f7ff f829 	bl	8008750 <__assert_func>
 80096fe:	2301      	movs	r3, #1
 8009700:	6144      	str	r4, [r0, #20]
 8009702:	6103      	str	r3, [r0, #16]
 8009704:	bd10      	pop	{r4, pc}
 8009706:	bf00      	nop
 8009708:	0800aa0f 	.word	0x0800aa0f
 800970c:	0800aa20 	.word	0x0800aa20

08009710 <__multiply>:
 8009710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009714:	4691      	mov	r9, r2
 8009716:	690a      	ldr	r2, [r1, #16]
 8009718:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800971c:	460c      	mov	r4, r1
 800971e:	429a      	cmp	r2, r3
 8009720:	bfbe      	ittt	lt
 8009722:	460b      	movlt	r3, r1
 8009724:	464c      	movlt	r4, r9
 8009726:	4699      	movlt	r9, r3
 8009728:	6927      	ldr	r7, [r4, #16]
 800972a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800972e:	68a3      	ldr	r3, [r4, #8]
 8009730:	6861      	ldr	r1, [r4, #4]
 8009732:	eb07 060a 	add.w	r6, r7, sl
 8009736:	42b3      	cmp	r3, r6
 8009738:	b085      	sub	sp, #20
 800973a:	bfb8      	it	lt
 800973c:	3101      	addlt	r1, #1
 800973e:	f7ff fedb 	bl	80094f8 <_Balloc>
 8009742:	b930      	cbnz	r0, 8009752 <__multiply+0x42>
 8009744:	4602      	mov	r2, r0
 8009746:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800974a:	4b43      	ldr	r3, [pc, #268]	; (8009858 <__multiply+0x148>)
 800974c:	4843      	ldr	r0, [pc, #268]	; (800985c <__multiply+0x14c>)
 800974e:	f7fe ffff 	bl	8008750 <__assert_func>
 8009752:	f100 0514 	add.w	r5, r0, #20
 8009756:	462b      	mov	r3, r5
 8009758:	2200      	movs	r2, #0
 800975a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800975e:	4543      	cmp	r3, r8
 8009760:	d321      	bcc.n	80097a6 <__multiply+0x96>
 8009762:	f104 0314 	add.w	r3, r4, #20
 8009766:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800976a:	f109 0314 	add.w	r3, r9, #20
 800976e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009772:	9202      	str	r2, [sp, #8]
 8009774:	1b3a      	subs	r2, r7, r4
 8009776:	3a15      	subs	r2, #21
 8009778:	f022 0203 	bic.w	r2, r2, #3
 800977c:	3204      	adds	r2, #4
 800977e:	f104 0115 	add.w	r1, r4, #21
 8009782:	428f      	cmp	r7, r1
 8009784:	bf38      	it	cc
 8009786:	2204      	movcc	r2, #4
 8009788:	9201      	str	r2, [sp, #4]
 800978a:	9a02      	ldr	r2, [sp, #8]
 800978c:	9303      	str	r3, [sp, #12]
 800978e:	429a      	cmp	r2, r3
 8009790:	d80c      	bhi.n	80097ac <__multiply+0x9c>
 8009792:	2e00      	cmp	r6, #0
 8009794:	dd03      	ble.n	800979e <__multiply+0x8e>
 8009796:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800979a:	2b00      	cmp	r3, #0
 800979c:	d05a      	beq.n	8009854 <__multiply+0x144>
 800979e:	6106      	str	r6, [r0, #16]
 80097a0:	b005      	add	sp, #20
 80097a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a6:	f843 2b04 	str.w	r2, [r3], #4
 80097aa:	e7d8      	b.n	800975e <__multiply+0x4e>
 80097ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80097b0:	f1ba 0f00 	cmp.w	sl, #0
 80097b4:	d023      	beq.n	80097fe <__multiply+0xee>
 80097b6:	46a9      	mov	r9, r5
 80097b8:	f04f 0c00 	mov.w	ip, #0
 80097bc:	f104 0e14 	add.w	lr, r4, #20
 80097c0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80097c4:	f8d9 1000 	ldr.w	r1, [r9]
 80097c8:	fa1f fb82 	uxth.w	fp, r2
 80097cc:	b289      	uxth	r1, r1
 80097ce:	fb0a 110b 	mla	r1, sl, fp, r1
 80097d2:	4461      	add	r1, ip
 80097d4:	f8d9 c000 	ldr.w	ip, [r9]
 80097d8:	0c12      	lsrs	r2, r2, #16
 80097da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80097de:	fb0a c202 	mla	r2, sl, r2, ip
 80097e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097e6:	b289      	uxth	r1, r1
 80097e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097ec:	4577      	cmp	r7, lr
 80097ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097f2:	f849 1b04 	str.w	r1, [r9], #4
 80097f6:	d8e3      	bhi.n	80097c0 <__multiply+0xb0>
 80097f8:	9a01      	ldr	r2, [sp, #4]
 80097fa:	f845 c002 	str.w	ip, [r5, r2]
 80097fe:	9a03      	ldr	r2, [sp, #12]
 8009800:	3304      	adds	r3, #4
 8009802:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009806:	f1b9 0f00 	cmp.w	r9, #0
 800980a:	d021      	beq.n	8009850 <__multiply+0x140>
 800980c:	46ae      	mov	lr, r5
 800980e:	f04f 0a00 	mov.w	sl, #0
 8009812:	6829      	ldr	r1, [r5, #0]
 8009814:	f104 0c14 	add.w	ip, r4, #20
 8009818:	f8bc b000 	ldrh.w	fp, [ip]
 800981c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009820:	b289      	uxth	r1, r1
 8009822:	fb09 220b 	mla	r2, r9, fp, r2
 8009826:	4452      	add	r2, sl
 8009828:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800982c:	f84e 1b04 	str.w	r1, [lr], #4
 8009830:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009834:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009838:	f8be 1000 	ldrh.w	r1, [lr]
 800983c:	4567      	cmp	r7, ip
 800983e:	fb09 110a 	mla	r1, r9, sl, r1
 8009842:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009846:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800984a:	d8e5      	bhi.n	8009818 <__multiply+0x108>
 800984c:	9a01      	ldr	r2, [sp, #4]
 800984e:	50a9      	str	r1, [r5, r2]
 8009850:	3504      	adds	r5, #4
 8009852:	e79a      	b.n	800978a <__multiply+0x7a>
 8009854:	3e01      	subs	r6, #1
 8009856:	e79c      	b.n	8009792 <__multiply+0x82>
 8009858:	0800aa0f 	.word	0x0800aa0f
 800985c:	0800aa20 	.word	0x0800aa20

08009860 <__pow5mult>:
 8009860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009864:	4615      	mov	r5, r2
 8009866:	f012 0203 	ands.w	r2, r2, #3
 800986a:	4606      	mov	r6, r0
 800986c:	460f      	mov	r7, r1
 800986e:	d007      	beq.n	8009880 <__pow5mult+0x20>
 8009870:	4c25      	ldr	r4, [pc, #148]	; (8009908 <__pow5mult+0xa8>)
 8009872:	3a01      	subs	r2, #1
 8009874:	2300      	movs	r3, #0
 8009876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800987a:	f7ff fe9f 	bl	80095bc <__multadd>
 800987e:	4607      	mov	r7, r0
 8009880:	10ad      	asrs	r5, r5, #2
 8009882:	d03d      	beq.n	8009900 <__pow5mult+0xa0>
 8009884:	69f4      	ldr	r4, [r6, #28]
 8009886:	b97c      	cbnz	r4, 80098a8 <__pow5mult+0x48>
 8009888:	2010      	movs	r0, #16
 800988a:	f7fd ff41 	bl	8007710 <malloc>
 800988e:	4602      	mov	r2, r0
 8009890:	61f0      	str	r0, [r6, #28]
 8009892:	b928      	cbnz	r0, 80098a0 <__pow5mult+0x40>
 8009894:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009898:	4b1c      	ldr	r3, [pc, #112]	; (800990c <__pow5mult+0xac>)
 800989a:	481d      	ldr	r0, [pc, #116]	; (8009910 <__pow5mult+0xb0>)
 800989c:	f7fe ff58 	bl	8008750 <__assert_func>
 80098a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098a4:	6004      	str	r4, [r0, #0]
 80098a6:	60c4      	str	r4, [r0, #12]
 80098a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80098ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098b0:	b94c      	cbnz	r4, 80098c6 <__pow5mult+0x66>
 80098b2:	f240 2171 	movw	r1, #625	; 0x271
 80098b6:	4630      	mov	r0, r6
 80098b8:	f7ff ff14 	bl	80096e4 <__i2b>
 80098bc:	2300      	movs	r3, #0
 80098be:	4604      	mov	r4, r0
 80098c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80098c4:	6003      	str	r3, [r0, #0]
 80098c6:	f04f 0900 	mov.w	r9, #0
 80098ca:	07eb      	lsls	r3, r5, #31
 80098cc:	d50a      	bpl.n	80098e4 <__pow5mult+0x84>
 80098ce:	4639      	mov	r1, r7
 80098d0:	4622      	mov	r2, r4
 80098d2:	4630      	mov	r0, r6
 80098d4:	f7ff ff1c 	bl	8009710 <__multiply>
 80098d8:	4680      	mov	r8, r0
 80098da:	4639      	mov	r1, r7
 80098dc:	4630      	mov	r0, r6
 80098de:	f7ff fe4b 	bl	8009578 <_Bfree>
 80098e2:	4647      	mov	r7, r8
 80098e4:	106d      	asrs	r5, r5, #1
 80098e6:	d00b      	beq.n	8009900 <__pow5mult+0xa0>
 80098e8:	6820      	ldr	r0, [r4, #0]
 80098ea:	b938      	cbnz	r0, 80098fc <__pow5mult+0x9c>
 80098ec:	4622      	mov	r2, r4
 80098ee:	4621      	mov	r1, r4
 80098f0:	4630      	mov	r0, r6
 80098f2:	f7ff ff0d 	bl	8009710 <__multiply>
 80098f6:	6020      	str	r0, [r4, #0]
 80098f8:	f8c0 9000 	str.w	r9, [r0]
 80098fc:	4604      	mov	r4, r0
 80098fe:	e7e4      	b.n	80098ca <__pow5mult+0x6a>
 8009900:	4638      	mov	r0, r7
 8009902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009906:	bf00      	nop
 8009908:	0800ab70 	.word	0x0800ab70
 800990c:	0800a9a0 	.word	0x0800a9a0
 8009910:	0800aa20 	.word	0x0800aa20

08009914 <__lshift>:
 8009914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	460c      	mov	r4, r1
 800991a:	4607      	mov	r7, r0
 800991c:	4691      	mov	r9, r2
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	6849      	ldr	r1, [r1, #4]
 8009922:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009926:	68a3      	ldr	r3, [r4, #8]
 8009928:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800992c:	f108 0601 	add.w	r6, r8, #1
 8009930:	42b3      	cmp	r3, r6
 8009932:	db0b      	blt.n	800994c <__lshift+0x38>
 8009934:	4638      	mov	r0, r7
 8009936:	f7ff fddf 	bl	80094f8 <_Balloc>
 800993a:	4605      	mov	r5, r0
 800993c:	b948      	cbnz	r0, 8009952 <__lshift+0x3e>
 800993e:	4602      	mov	r2, r0
 8009940:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009944:	4b27      	ldr	r3, [pc, #156]	; (80099e4 <__lshift+0xd0>)
 8009946:	4828      	ldr	r0, [pc, #160]	; (80099e8 <__lshift+0xd4>)
 8009948:	f7fe ff02 	bl	8008750 <__assert_func>
 800994c:	3101      	adds	r1, #1
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	e7ee      	b.n	8009930 <__lshift+0x1c>
 8009952:	2300      	movs	r3, #0
 8009954:	f100 0114 	add.w	r1, r0, #20
 8009958:	f100 0210 	add.w	r2, r0, #16
 800995c:	4618      	mov	r0, r3
 800995e:	4553      	cmp	r3, sl
 8009960:	db33      	blt.n	80099ca <__lshift+0xb6>
 8009962:	6920      	ldr	r0, [r4, #16]
 8009964:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009968:	f104 0314 	add.w	r3, r4, #20
 800996c:	f019 091f 	ands.w	r9, r9, #31
 8009970:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009974:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009978:	d02b      	beq.n	80099d2 <__lshift+0xbe>
 800997a:	468a      	mov	sl, r1
 800997c:	2200      	movs	r2, #0
 800997e:	f1c9 0e20 	rsb	lr, r9, #32
 8009982:	6818      	ldr	r0, [r3, #0]
 8009984:	fa00 f009 	lsl.w	r0, r0, r9
 8009988:	4310      	orrs	r0, r2
 800998a:	f84a 0b04 	str.w	r0, [sl], #4
 800998e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009992:	459c      	cmp	ip, r3
 8009994:	fa22 f20e 	lsr.w	r2, r2, lr
 8009998:	d8f3      	bhi.n	8009982 <__lshift+0x6e>
 800999a:	ebac 0304 	sub.w	r3, ip, r4
 800999e:	3b15      	subs	r3, #21
 80099a0:	f023 0303 	bic.w	r3, r3, #3
 80099a4:	3304      	adds	r3, #4
 80099a6:	f104 0015 	add.w	r0, r4, #21
 80099aa:	4584      	cmp	ip, r0
 80099ac:	bf38      	it	cc
 80099ae:	2304      	movcc	r3, #4
 80099b0:	50ca      	str	r2, [r1, r3]
 80099b2:	b10a      	cbz	r2, 80099b8 <__lshift+0xa4>
 80099b4:	f108 0602 	add.w	r6, r8, #2
 80099b8:	3e01      	subs	r6, #1
 80099ba:	4638      	mov	r0, r7
 80099bc:	4621      	mov	r1, r4
 80099be:	612e      	str	r6, [r5, #16]
 80099c0:	f7ff fdda 	bl	8009578 <_Bfree>
 80099c4:	4628      	mov	r0, r5
 80099c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80099ce:	3301      	adds	r3, #1
 80099d0:	e7c5      	b.n	800995e <__lshift+0x4a>
 80099d2:	3904      	subs	r1, #4
 80099d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d8:	459c      	cmp	ip, r3
 80099da:	f841 2f04 	str.w	r2, [r1, #4]!
 80099de:	d8f9      	bhi.n	80099d4 <__lshift+0xc0>
 80099e0:	e7ea      	b.n	80099b8 <__lshift+0xa4>
 80099e2:	bf00      	nop
 80099e4:	0800aa0f 	.word	0x0800aa0f
 80099e8:	0800aa20 	.word	0x0800aa20

080099ec <__mcmp>:
 80099ec:	4603      	mov	r3, r0
 80099ee:	690a      	ldr	r2, [r1, #16]
 80099f0:	6900      	ldr	r0, [r0, #16]
 80099f2:	b530      	push	{r4, r5, lr}
 80099f4:	1a80      	subs	r0, r0, r2
 80099f6:	d10d      	bne.n	8009a14 <__mcmp+0x28>
 80099f8:	3314      	adds	r3, #20
 80099fa:	3114      	adds	r1, #20
 80099fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a0c:	4295      	cmp	r5, r2
 8009a0e:	d002      	beq.n	8009a16 <__mcmp+0x2a>
 8009a10:	d304      	bcc.n	8009a1c <__mcmp+0x30>
 8009a12:	2001      	movs	r0, #1
 8009a14:	bd30      	pop	{r4, r5, pc}
 8009a16:	42a3      	cmp	r3, r4
 8009a18:	d3f4      	bcc.n	8009a04 <__mcmp+0x18>
 8009a1a:	e7fb      	b.n	8009a14 <__mcmp+0x28>
 8009a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a20:	e7f8      	b.n	8009a14 <__mcmp+0x28>
	...

08009a24 <__mdiff>:
 8009a24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a28:	460d      	mov	r5, r1
 8009a2a:	4607      	mov	r7, r0
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	4628      	mov	r0, r5
 8009a30:	4614      	mov	r4, r2
 8009a32:	f7ff ffdb 	bl	80099ec <__mcmp>
 8009a36:	1e06      	subs	r6, r0, #0
 8009a38:	d111      	bne.n	8009a5e <__mdiff+0x3a>
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	f7ff fd5b 	bl	80094f8 <_Balloc>
 8009a42:	4602      	mov	r2, r0
 8009a44:	b928      	cbnz	r0, 8009a52 <__mdiff+0x2e>
 8009a46:	f240 2137 	movw	r1, #567	; 0x237
 8009a4a:	4b3a      	ldr	r3, [pc, #232]	; (8009b34 <__mdiff+0x110>)
 8009a4c:	483a      	ldr	r0, [pc, #232]	; (8009b38 <__mdiff+0x114>)
 8009a4e:	f7fe fe7f 	bl	8008750 <__assert_func>
 8009a52:	2301      	movs	r3, #1
 8009a54:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009a58:	4610      	mov	r0, r2
 8009a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5e:	bfa4      	itt	ge
 8009a60:	4623      	movge	r3, r4
 8009a62:	462c      	movge	r4, r5
 8009a64:	4638      	mov	r0, r7
 8009a66:	6861      	ldr	r1, [r4, #4]
 8009a68:	bfa6      	itte	ge
 8009a6a:	461d      	movge	r5, r3
 8009a6c:	2600      	movge	r6, #0
 8009a6e:	2601      	movlt	r6, #1
 8009a70:	f7ff fd42 	bl	80094f8 <_Balloc>
 8009a74:	4602      	mov	r2, r0
 8009a76:	b918      	cbnz	r0, 8009a80 <__mdiff+0x5c>
 8009a78:	f240 2145 	movw	r1, #581	; 0x245
 8009a7c:	4b2d      	ldr	r3, [pc, #180]	; (8009b34 <__mdiff+0x110>)
 8009a7e:	e7e5      	b.n	8009a4c <__mdiff+0x28>
 8009a80:	f102 0814 	add.w	r8, r2, #20
 8009a84:	46c2      	mov	sl, r8
 8009a86:	f04f 0c00 	mov.w	ip, #0
 8009a8a:	6927      	ldr	r7, [r4, #16]
 8009a8c:	60c6      	str	r6, [r0, #12]
 8009a8e:	692e      	ldr	r6, [r5, #16]
 8009a90:	f104 0014 	add.w	r0, r4, #20
 8009a94:	f105 0914 	add.w	r9, r5, #20
 8009a98:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009a9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009aa0:	3410      	adds	r4, #16
 8009aa2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009aa6:	f859 3b04 	ldr.w	r3, [r9], #4
 8009aaa:	fa1f f18b 	uxth.w	r1, fp
 8009aae:	4461      	add	r1, ip
 8009ab0:	fa1f fc83 	uxth.w	ip, r3
 8009ab4:	0c1b      	lsrs	r3, r3, #16
 8009ab6:	eba1 010c 	sub.w	r1, r1, ip
 8009aba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009abe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009ac2:	b289      	uxth	r1, r1
 8009ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009ac8:	454e      	cmp	r6, r9
 8009aca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009ace:	f84a 1b04 	str.w	r1, [sl], #4
 8009ad2:	d8e6      	bhi.n	8009aa2 <__mdiff+0x7e>
 8009ad4:	1b73      	subs	r3, r6, r5
 8009ad6:	3b15      	subs	r3, #21
 8009ad8:	f023 0303 	bic.w	r3, r3, #3
 8009adc:	3515      	adds	r5, #21
 8009ade:	3304      	adds	r3, #4
 8009ae0:	42ae      	cmp	r6, r5
 8009ae2:	bf38      	it	cc
 8009ae4:	2304      	movcc	r3, #4
 8009ae6:	4418      	add	r0, r3
 8009ae8:	4443      	add	r3, r8
 8009aea:	461e      	mov	r6, r3
 8009aec:	4605      	mov	r5, r0
 8009aee:	4575      	cmp	r5, lr
 8009af0:	d30e      	bcc.n	8009b10 <__mdiff+0xec>
 8009af2:	f10e 0103 	add.w	r1, lr, #3
 8009af6:	1a09      	subs	r1, r1, r0
 8009af8:	f021 0103 	bic.w	r1, r1, #3
 8009afc:	3803      	subs	r0, #3
 8009afe:	4586      	cmp	lr, r0
 8009b00:	bf38      	it	cc
 8009b02:	2100      	movcc	r1, #0
 8009b04:	440b      	add	r3, r1
 8009b06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b0a:	b189      	cbz	r1, 8009b30 <__mdiff+0x10c>
 8009b0c:	6117      	str	r7, [r2, #16]
 8009b0e:	e7a3      	b.n	8009a58 <__mdiff+0x34>
 8009b10:	f855 8b04 	ldr.w	r8, [r5], #4
 8009b14:	fa1f f188 	uxth.w	r1, r8
 8009b18:	4461      	add	r1, ip
 8009b1a:	140c      	asrs	r4, r1, #16
 8009b1c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009b20:	b289      	uxth	r1, r1
 8009b22:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009b26:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009b2a:	f846 1b04 	str.w	r1, [r6], #4
 8009b2e:	e7de      	b.n	8009aee <__mdiff+0xca>
 8009b30:	3f01      	subs	r7, #1
 8009b32:	e7e8      	b.n	8009b06 <__mdiff+0xe2>
 8009b34:	0800aa0f 	.word	0x0800aa0f
 8009b38:	0800aa20 	.word	0x0800aa20

08009b3c <__d2b>:
 8009b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b3e:	2101      	movs	r1, #1
 8009b40:	4617      	mov	r7, r2
 8009b42:	461c      	mov	r4, r3
 8009b44:	9e08      	ldr	r6, [sp, #32]
 8009b46:	f7ff fcd7 	bl	80094f8 <_Balloc>
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	b930      	cbnz	r0, 8009b5c <__d2b+0x20>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	f240 310f 	movw	r1, #783	; 0x30f
 8009b54:	4b22      	ldr	r3, [pc, #136]	; (8009be0 <__d2b+0xa4>)
 8009b56:	4823      	ldr	r0, [pc, #140]	; (8009be4 <__d2b+0xa8>)
 8009b58:	f7fe fdfa 	bl	8008750 <__assert_func>
 8009b5c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009b60:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009b64:	bb24      	cbnz	r4, 8009bb0 <__d2b+0x74>
 8009b66:	2f00      	cmp	r7, #0
 8009b68:	9301      	str	r3, [sp, #4]
 8009b6a:	d026      	beq.n	8009bba <__d2b+0x7e>
 8009b6c:	4668      	mov	r0, sp
 8009b6e:	9700      	str	r7, [sp, #0]
 8009b70:	f7ff fd8a 	bl	8009688 <__lo0bits>
 8009b74:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b78:	b1e8      	cbz	r0, 8009bb6 <__d2b+0x7a>
 8009b7a:	f1c0 0320 	rsb	r3, r0, #32
 8009b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b82:	430b      	orrs	r3, r1
 8009b84:	40c2      	lsrs	r2, r0
 8009b86:	616b      	str	r3, [r5, #20]
 8009b88:	9201      	str	r2, [sp, #4]
 8009b8a:	9b01      	ldr	r3, [sp, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bf14      	ite	ne
 8009b90:	2102      	movne	r1, #2
 8009b92:	2101      	moveq	r1, #1
 8009b94:	61ab      	str	r3, [r5, #24]
 8009b96:	6129      	str	r1, [r5, #16]
 8009b98:	b1bc      	cbz	r4, 8009bca <__d2b+0x8e>
 8009b9a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009b9e:	4404      	add	r4, r0
 8009ba0:	6034      	str	r4, [r6, #0]
 8009ba2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba8:	6018      	str	r0, [r3, #0]
 8009baa:	4628      	mov	r0, r5
 8009bac:	b003      	add	sp, #12
 8009bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bb4:	e7d7      	b.n	8009b66 <__d2b+0x2a>
 8009bb6:	6169      	str	r1, [r5, #20]
 8009bb8:	e7e7      	b.n	8009b8a <__d2b+0x4e>
 8009bba:	a801      	add	r0, sp, #4
 8009bbc:	f7ff fd64 	bl	8009688 <__lo0bits>
 8009bc0:	9b01      	ldr	r3, [sp, #4]
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	616b      	str	r3, [r5, #20]
 8009bc6:	3020      	adds	r0, #32
 8009bc8:	e7e5      	b.n	8009b96 <__d2b+0x5a>
 8009bca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bce:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8009bd2:	6030      	str	r0, [r6, #0]
 8009bd4:	6918      	ldr	r0, [r3, #16]
 8009bd6:	f7ff fd37 	bl	8009648 <__hi0bits>
 8009bda:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009bde:	e7e2      	b.n	8009ba6 <__d2b+0x6a>
 8009be0:	0800aa0f 	.word	0x0800aa0f
 8009be4:	0800aa20 	.word	0x0800aa20

08009be8 <__ssputs_r>:
 8009be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bec:	461f      	mov	r7, r3
 8009bee:	688e      	ldr	r6, [r1, #8]
 8009bf0:	4682      	mov	sl, r0
 8009bf2:	42be      	cmp	r6, r7
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	4690      	mov	r8, r2
 8009bf8:	680b      	ldr	r3, [r1, #0]
 8009bfa:	d82c      	bhi.n	8009c56 <__ssputs_r+0x6e>
 8009bfc:	898a      	ldrh	r2, [r1, #12]
 8009bfe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c02:	d026      	beq.n	8009c52 <__ssputs_r+0x6a>
 8009c04:	6965      	ldr	r5, [r4, #20]
 8009c06:	6909      	ldr	r1, [r1, #16]
 8009c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c0c:	eba3 0901 	sub.w	r9, r3, r1
 8009c10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c14:	1c7b      	adds	r3, r7, #1
 8009c16:	444b      	add	r3, r9
 8009c18:	106d      	asrs	r5, r5, #1
 8009c1a:	429d      	cmp	r5, r3
 8009c1c:	bf38      	it	cc
 8009c1e:	461d      	movcc	r5, r3
 8009c20:	0553      	lsls	r3, r2, #21
 8009c22:	d527      	bpl.n	8009c74 <__ssputs_r+0x8c>
 8009c24:	4629      	mov	r1, r5
 8009c26:	f7fd fd9b 	bl	8007760 <_malloc_r>
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	b360      	cbz	r0, 8009c88 <__ssputs_r+0xa0>
 8009c2e:	464a      	mov	r2, r9
 8009c30:	6921      	ldr	r1, [r4, #16]
 8009c32:	f7fe fd7e 	bl	8008732 <memcpy>
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	6126      	str	r6, [r4, #16]
 8009c44:	444e      	add	r6, r9
 8009c46:	6026      	str	r6, [r4, #0]
 8009c48:	463e      	mov	r6, r7
 8009c4a:	6165      	str	r5, [r4, #20]
 8009c4c:	eba5 0509 	sub.w	r5, r5, r9
 8009c50:	60a5      	str	r5, [r4, #8]
 8009c52:	42be      	cmp	r6, r7
 8009c54:	d900      	bls.n	8009c58 <__ssputs_r+0x70>
 8009c56:	463e      	mov	r6, r7
 8009c58:	4632      	mov	r2, r6
 8009c5a:	4641      	mov	r1, r8
 8009c5c:	6820      	ldr	r0, [r4, #0]
 8009c5e:	f000 fb7a 	bl	800a356 <memmove>
 8009c62:	2000      	movs	r0, #0
 8009c64:	68a3      	ldr	r3, [r4, #8]
 8009c66:	1b9b      	subs	r3, r3, r6
 8009c68:	60a3      	str	r3, [r4, #8]
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	4433      	add	r3, r6
 8009c6e:	6023      	str	r3, [r4, #0]
 8009c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c74:	462a      	mov	r2, r5
 8009c76:	f000 fbd8 	bl	800a42a <_realloc_r>
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d1e0      	bne.n	8009c42 <__ssputs_r+0x5a>
 8009c80:	4650      	mov	r0, sl
 8009c82:	6921      	ldr	r1, [r4, #16]
 8009c84:	f7ff fbf0 	bl	8009468 <_free_r>
 8009c88:	230c      	movs	r3, #12
 8009c8a:	f8ca 3000 	str.w	r3, [sl]
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	f04f 30ff 	mov.w	r0, #4294967295
 8009c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c98:	81a3      	strh	r3, [r4, #12]
 8009c9a:	e7e9      	b.n	8009c70 <__ssputs_r+0x88>

08009c9c <_svfiprintf_r>:
 8009c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca0:	4698      	mov	r8, r3
 8009ca2:	898b      	ldrh	r3, [r1, #12]
 8009ca4:	4607      	mov	r7, r0
 8009ca6:	061b      	lsls	r3, r3, #24
 8009ca8:	460d      	mov	r5, r1
 8009caa:	4614      	mov	r4, r2
 8009cac:	b09d      	sub	sp, #116	; 0x74
 8009cae:	d50e      	bpl.n	8009cce <_svfiprintf_r+0x32>
 8009cb0:	690b      	ldr	r3, [r1, #16]
 8009cb2:	b963      	cbnz	r3, 8009cce <_svfiprintf_r+0x32>
 8009cb4:	2140      	movs	r1, #64	; 0x40
 8009cb6:	f7fd fd53 	bl	8007760 <_malloc_r>
 8009cba:	6028      	str	r0, [r5, #0]
 8009cbc:	6128      	str	r0, [r5, #16]
 8009cbe:	b920      	cbnz	r0, 8009cca <_svfiprintf_r+0x2e>
 8009cc0:	230c      	movs	r3, #12
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc8:	e0d0      	b.n	8009e6c <_svfiprintf_r+0x1d0>
 8009cca:	2340      	movs	r3, #64	; 0x40
 8009ccc:	616b      	str	r3, [r5, #20]
 8009cce:	2300      	movs	r3, #0
 8009cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd2:	2320      	movs	r3, #32
 8009cd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cd8:	2330      	movs	r3, #48	; 0x30
 8009cda:	f04f 0901 	mov.w	r9, #1
 8009cde:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ce2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009e84 <_svfiprintf_r+0x1e8>
 8009ce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cea:	4623      	mov	r3, r4
 8009cec:	469a      	mov	sl, r3
 8009cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf2:	b10a      	cbz	r2, 8009cf8 <_svfiprintf_r+0x5c>
 8009cf4:	2a25      	cmp	r2, #37	; 0x25
 8009cf6:	d1f9      	bne.n	8009cec <_svfiprintf_r+0x50>
 8009cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8009cfc:	d00b      	beq.n	8009d16 <_svfiprintf_r+0x7a>
 8009cfe:	465b      	mov	r3, fp
 8009d00:	4622      	mov	r2, r4
 8009d02:	4629      	mov	r1, r5
 8009d04:	4638      	mov	r0, r7
 8009d06:	f7ff ff6f 	bl	8009be8 <__ssputs_r>
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	f000 80a9 	beq.w	8009e62 <_svfiprintf_r+0x1c6>
 8009d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d12:	445a      	add	r2, fp
 8009d14:	9209      	str	r2, [sp, #36]	; 0x24
 8009d16:	f89a 3000 	ldrb.w	r3, [sl]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 80a1 	beq.w	8009e62 <_svfiprintf_r+0x1c6>
 8009d20:	2300      	movs	r3, #0
 8009d22:	f04f 32ff 	mov.w	r2, #4294967295
 8009d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d2a:	f10a 0a01 	add.w	sl, sl, #1
 8009d2e:	9304      	str	r3, [sp, #16]
 8009d30:	9307      	str	r3, [sp, #28]
 8009d32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d36:	931a      	str	r3, [sp, #104]	; 0x68
 8009d38:	4654      	mov	r4, sl
 8009d3a:	2205      	movs	r2, #5
 8009d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d40:	4850      	ldr	r0, [pc, #320]	; (8009e84 <_svfiprintf_r+0x1e8>)
 8009d42:	f7fe fce8 	bl	8008716 <memchr>
 8009d46:	9a04      	ldr	r2, [sp, #16]
 8009d48:	b9d8      	cbnz	r0, 8009d82 <_svfiprintf_r+0xe6>
 8009d4a:	06d0      	lsls	r0, r2, #27
 8009d4c:	bf44      	itt	mi
 8009d4e:	2320      	movmi	r3, #32
 8009d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d54:	0711      	lsls	r1, r2, #28
 8009d56:	bf44      	itt	mi
 8009d58:	232b      	movmi	r3, #43	; 0x2b
 8009d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d62:	2b2a      	cmp	r3, #42	; 0x2a
 8009d64:	d015      	beq.n	8009d92 <_svfiprintf_r+0xf6>
 8009d66:	4654      	mov	r4, sl
 8009d68:	2000      	movs	r0, #0
 8009d6a:	f04f 0c0a 	mov.w	ip, #10
 8009d6e:	9a07      	ldr	r2, [sp, #28]
 8009d70:	4621      	mov	r1, r4
 8009d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d76:	3b30      	subs	r3, #48	; 0x30
 8009d78:	2b09      	cmp	r3, #9
 8009d7a:	d94d      	bls.n	8009e18 <_svfiprintf_r+0x17c>
 8009d7c:	b1b0      	cbz	r0, 8009dac <_svfiprintf_r+0x110>
 8009d7e:	9207      	str	r2, [sp, #28]
 8009d80:	e014      	b.n	8009dac <_svfiprintf_r+0x110>
 8009d82:	eba0 0308 	sub.w	r3, r0, r8
 8009d86:	fa09 f303 	lsl.w	r3, r9, r3
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	46a2      	mov	sl, r4
 8009d8e:	9304      	str	r3, [sp, #16]
 8009d90:	e7d2      	b.n	8009d38 <_svfiprintf_r+0x9c>
 8009d92:	9b03      	ldr	r3, [sp, #12]
 8009d94:	1d19      	adds	r1, r3, #4
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	9103      	str	r1, [sp, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bfbb      	ittet	lt
 8009d9e:	425b      	neglt	r3, r3
 8009da0:	f042 0202 	orrlt.w	r2, r2, #2
 8009da4:	9307      	strge	r3, [sp, #28]
 8009da6:	9307      	strlt	r3, [sp, #28]
 8009da8:	bfb8      	it	lt
 8009daa:	9204      	strlt	r2, [sp, #16]
 8009dac:	7823      	ldrb	r3, [r4, #0]
 8009dae:	2b2e      	cmp	r3, #46	; 0x2e
 8009db0:	d10c      	bne.n	8009dcc <_svfiprintf_r+0x130>
 8009db2:	7863      	ldrb	r3, [r4, #1]
 8009db4:	2b2a      	cmp	r3, #42	; 0x2a
 8009db6:	d134      	bne.n	8009e22 <_svfiprintf_r+0x186>
 8009db8:	9b03      	ldr	r3, [sp, #12]
 8009dba:	3402      	adds	r4, #2
 8009dbc:	1d1a      	adds	r2, r3, #4
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	9203      	str	r2, [sp, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	bfb8      	it	lt
 8009dc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dca:	9305      	str	r3, [sp, #20]
 8009dcc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009e88 <_svfiprintf_r+0x1ec>
 8009dd0:	2203      	movs	r2, #3
 8009dd2:	4650      	mov	r0, sl
 8009dd4:	7821      	ldrb	r1, [r4, #0]
 8009dd6:	f7fe fc9e 	bl	8008716 <memchr>
 8009dda:	b138      	cbz	r0, 8009dec <_svfiprintf_r+0x150>
 8009ddc:	2240      	movs	r2, #64	; 0x40
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	eba0 000a 	sub.w	r0, r0, sl
 8009de4:	4082      	lsls	r2, r0
 8009de6:	4313      	orrs	r3, r2
 8009de8:	3401      	adds	r4, #1
 8009dea:	9304      	str	r3, [sp, #16]
 8009dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df0:	2206      	movs	r2, #6
 8009df2:	4826      	ldr	r0, [pc, #152]	; (8009e8c <_svfiprintf_r+0x1f0>)
 8009df4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009df8:	f7fe fc8d 	bl	8008716 <memchr>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d038      	beq.n	8009e72 <_svfiprintf_r+0x1d6>
 8009e00:	4b23      	ldr	r3, [pc, #140]	; (8009e90 <_svfiprintf_r+0x1f4>)
 8009e02:	bb1b      	cbnz	r3, 8009e4c <_svfiprintf_r+0x1b0>
 8009e04:	9b03      	ldr	r3, [sp, #12]
 8009e06:	3307      	adds	r3, #7
 8009e08:	f023 0307 	bic.w	r3, r3, #7
 8009e0c:	3308      	adds	r3, #8
 8009e0e:	9303      	str	r3, [sp, #12]
 8009e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e12:	4433      	add	r3, r6
 8009e14:	9309      	str	r3, [sp, #36]	; 0x24
 8009e16:	e768      	b.n	8009cea <_svfiprintf_r+0x4e>
 8009e18:	460c      	mov	r4, r1
 8009e1a:	2001      	movs	r0, #1
 8009e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e20:	e7a6      	b.n	8009d70 <_svfiprintf_r+0xd4>
 8009e22:	2300      	movs	r3, #0
 8009e24:	f04f 0c0a 	mov.w	ip, #10
 8009e28:	4619      	mov	r1, r3
 8009e2a:	3401      	adds	r4, #1
 8009e2c:	9305      	str	r3, [sp, #20]
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e34:	3a30      	subs	r2, #48	; 0x30
 8009e36:	2a09      	cmp	r2, #9
 8009e38:	d903      	bls.n	8009e42 <_svfiprintf_r+0x1a6>
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d0c6      	beq.n	8009dcc <_svfiprintf_r+0x130>
 8009e3e:	9105      	str	r1, [sp, #20]
 8009e40:	e7c4      	b.n	8009dcc <_svfiprintf_r+0x130>
 8009e42:	4604      	mov	r4, r0
 8009e44:	2301      	movs	r3, #1
 8009e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e4a:	e7f0      	b.n	8009e2e <_svfiprintf_r+0x192>
 8009e4c:	ab03      	add	r3, sp, #12
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	462a      	mov	r2, r5
 8009e52:	4638      	mov	r0, r7
 8009e54:	4b0f      	ldr	r3, [pc, #60]	; (8009e94 <_svfiprintf_r+0x1f8>)
 8009e56:	a904      	add	r1, sp, #16
 8009e58:	f7fd fdaa 	bl	80079b0 <_printf_float>
 8009e5c:	1c42      	adds	r2, r0, #1
 8009e5e:	4606      	mov	r6, r0
 8009e60:	d1d6      	bne.n	8009e10 <_svfiprintf_r+0x174>
 8009e62:	89ab      	ldrh	r3, [r5, #12]
 8009e64:	065b      	lsls	r3, r3, #25
 8009e66:	f53f af2d 	bmi.w	8009cc4 <_svfiprintf_r+0x28>
 8009e6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e6c:	b01d      	add	sp, #116	; 0x74
 8009e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e72:	ab03      	add	r3, sp, #12
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	462a      	mov	r2, r5
 8009e78:	4638      	mov	r0, r7
 8009e7a:	4b06      	ldr	r3, [pc, #24]	; (8009e94 <_svfiprintf_r+0x1f8>)
 8009e7c:	a904      	add	r1, sp, #16
 8009e7e:	f7fe f837 	bl	8007ef0 <_printf_i>
 8009e82:	e7eb      	b.n	8009e5c <_svfiprintf_r+0x1c0>
 8009e84:	0800ab7c 	.word	0x0800ab7c
 8009e88:	0800ab82 	.word	0x0800ab82
 8009e8c:	0800ab86 	.word	0x0800ab86
 8009e90:	080079b1 	.word	0x080079b1
 8009e94:	08009be9 	.word	0x08009be9

08009e98 <__sfputc_r>:
 8009e98:	6893      	ldr	r3, [r2, #8]
 8009e9a:	b410      	push	{r4}
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	6093      	str	r3, [r2, #8]
 8009ea2:	da07      	bge.n	8009eb4 <__sfputc_r+0x1c>
 8009ea4:	6994      	ldr	r4, [r2, #24]
 8009ea6:	42a3      	cmp	r3, r4
 8009ea8:	db01      	blt.n	8009eae <__sfputc_r+0x16>
 8009eaa:	290a      	cmp	r1, #10
 8009eac:	d102      	bne.n	8009eb4 <__sfputc_r+0x1c>
 8009eae:	bc10      	pop	{r4}
 8009eb0:	f7fe bad3 	b.w	800845a <__swbuf_r>
 8009eb4:	6813      	ldr	r3, [r2, #0]
 8009eb6:	1c58      	adds	r0, r3, #1
 8009eb8:	6010      	str	r0, [r2, #0]
 8009eba:	7019      	strb	r1, [r3, #0]
 8009ebc:	4608      	mov	r0, r1
 8009ebe:	bc10      	pop	{r4}
 8009ec0:	4770      	bx	lr

08009ec2 <__sfputs_r>:
 8009ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	460f      	mov	r7, r1
 8009ec8:	4614      	mov	r4, r2
 8009eca:	18d5      	adds	r5, r2, r3
 8009ecc:	42ac      	cmp	r4, r5
 8009ece:	d101      	bne.n	8009ed4 <__sfputs_r+0x12>
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	e007      	b.n	8009ee4 <__sfputs_r+0x22>
 8009ed4:	463a      	mov	r2, r7
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009edc:	f7ff ffdc 	bl	8009e98 <__sfputc_r>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d1f3      	bne.n	8009ecc <__sfputs_r+0xa>
 8009ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ee8 <_vfiprintf_r>:
 8009ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eec:	460d      	mov	r5, r1
 8009eee:	4614      	mov	r4, r2
 8009ef0:	4698      	mov	r8, r3
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	b09d      	sub	sp, #116	; 0x74
 8009ef6:	b118      	cbz	r0, 8009f00 <_vfiprintf_r+0x18>
 8009ef8:	6a03      	ldr	r3, [r0, #32]
 8009efa:	b90b      	cbnz	r3, 8009f00 <_vfiprintf_r+0x18>
 8009efc:	f7fe f9a6 	bl	800824c <__sinit>
 8009f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f02:	07d9      	lsls	r1, r3, #31
 8009f04:	d405      	bmi.n	8009f12 <_vfiprintf_r+0x2a>
 8009f06:	89ab      	ldrh	r3, [r5, #12]
 8009f08:	059a      	lsls	r2, r3, #22
 8009f0a:	d402      	bmi.n	8009f12 <_vfiprintf_r+0x2a>
 8009f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f0e:	f7fe fbf8 	bl	8008702 <__retarget_lock_acquire_recursive>
 8009f12:	89ab      	ldrh	r3, [r5, #12]
 8009f14:	071b      	lsls	r3, r3, #28
 8009f16:	d501      	bpl.n	8009f1c <_vfiprintf_r+0x34>
 8009f18:	692b      	ldr	r3, [r5, #16]
 8009f1a:	b99b      	cbnz	r3, 8009f44 <_vfiprintf_r+0x5c>
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	4630      	mov	r0, r6
 8009f20:	f7fe fad8 	bl	80084d4 <__swsetup_r>
 8009f24:	b170      	cbz	r0, 8009f44 <_vfiprintf_r+0x5c>
 8009f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f28:	07dc      	lsls	r4, r3, #31
 8009f2a:	d504      	bpl.n	8009f36 <_vfiprintf_r+0x4e>
 8009f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f30:	b01d      	add	sp, #116	; 0x74
 8009f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f36:	89ab      	ldrh	r3, [r5, #12]
 8009f38:	0598      	lsls	r0, r3, #22
 8009f3a:	d4f7      	bmi.n	8009f2c <_vfiprintf_r+0x44>
 8009f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f3e:	f7fe fbe1 	bl	8008704 <__retarget_lock_release_recursive>
 8009f42:	e7f3      	b.n	8009f2c <_vfiprintf_r+0x44>
 8009f44:	2300      	movs	r3, #0
 8009f46:	9309      	str	r3, [sp, #36]	; 0x24
 8009f48:	2320      	movs	r3, #32
 8009f4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f4e:	2330      	movs	r3, #48	; 0x30
 8009f50:	f04f 0901 	mov.w	r9, #1
 8009f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f58:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a108 <_vfiprintf_r+0x220>
 8009f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f60:	4623      	mov	r3, r4
 8009f62:	469a      	mov	sl, r3
 8009f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f68:	b10a      	cbz	r2, 8009f6e <_vfiprintf_r+0x86>
 8009f6a:	2a25      	cmp	r2, #37	; 0x25
 8009f6c:	d1f9      	bne.n	8009f62 <_vfiprintf_r+0x7a>
 8009f6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f72:	d00b      	beq.n	8009f8c <_vfiprintf_r+0xa4>
 8009f74:	465b      	mov	r3, fp
 8009f76:	4622      	mov	r2, r4
 8009f78:	4629      	mov	r1, r5
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	f7ff ffa1 	bl	8009ec2 <__sfputs_r>
 8009f80:	3001      	adds	r0, #1
 8009f82:	f000 80a9 	beq.w	800a0d8 <_vfiprintf_r+0x1f0>
 8009f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f88:	445a      	add	r2, fp
 8009f8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f000 80a1 	beq.w	800a0d8 <_vfiprintf_r+0x1f0>
 8009f96:	2300      	movs	r3, #0
 8009f98:	f04f 32ff 	mov.w	r2, #4294967295
 8009f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fa0:	f10a 0a01 	add.w	sl, sl, #1
 8009fa4:	9304      	str	r3, [sp, #16]
 8009fa6:	9307      	str	r3, [sp, #28]
 8009fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fac:	931a      	str	r3, [sp, #104]	; 0x68
 8009fae:	4654      	mov	r4, sl
 8009fb0:	2205      	movs	r2, #5
 8009fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb6:	4854      	ldr	r0, [pc, #336]	; (800a108 <_vfiprintf_r+0x220>)
 8009fb8:	f7fe fbad 	bl	8008716 <memchr>
 8009fbc:	9a04      	ldr	r2, [sp, #16]
 8009fbe:	b9d8      	cbnz	r0, 8009ff8 <_vfiprintf_r+0x110>
 8009fc0:	06d1      	lsls	r1, r2, #27
 8009fc2:	bf44      	itt	mi
 8009fc4:	2320      	movmi	r3, #32
 8009fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fca:	0713      	lsls	r3, r2, #28
 8009fcc:	bf44      	itt	mi
 8009fce:	232b      	movmi	r3, #43	; 0x2b
 8009fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8009fda:	d015      	beq.n	800a008 <_vfiprintf_r+0x120>
 8009fdc:	4654      	mov	r4, sl
 8009fde:	2000      	movs	r0, #0
 8009fe0:	f04f 0c0a 	mov.w	ip, #10
 8009fe4:	9a07      	ldr	r2, [sp, #28]
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fec:	3b30      	subs	r3, #48	; 0x30
 8009fee:	2b09      	cmp	r3, #9
 8009ff0:	d94d      	bls.n	800a08e <_vfiprintf_r+0x1a6>
 8009ff2:	b1b0      	cbz	r0, 800a022 <_vfiprintf_r+0x13a>
 8009ff4:	9207      	str	r2, [sp, #28]
 8009ff6:	e014      	b.n	800a022 <_vfiprintf_r+0x13a>
 8009ff8:	eba0 0308 	sub.w	r3, r0, r8
 8009ffc:	fa09 f303 	lsl.w	r3, r9, r3
 800a000:	4313      	orrs	r3, r2
 800a002:	46a2      	mov	sl, r4
 800a004:	9304      	str	r3, [sp, #16]
 800a006:	e7d2      	b.n	8009fae <_vfiprintf_r+0xc6>
 800a008:	9b03      	ldr	r3, [sp, #12]
 800a00a:	1d19      	adds	r1, r3, #4
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	9103      	str	r1, [sp, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	bfbb      	ittet	lt
 800a014:	425b      	neglt	r3, r3
 800a016:	f042 0202 	orrlt.w	r2, r2, #2
 800a01a:	9307      	strge	r3, [sp, #28]
 800a01c:	9307      	strlt	r3, [sp, #28]
 800a01e:	bfb8      	it	lt
 800a020:	9204      	strlt	r2, [sp, #16]
 800a022:	7823      	ldrb	r3, [r4, #0]
 800a024:	2b2e      	cmp	r3, #46	; 0x2e
 800a026:	d10c      	bne.n	800a042 <_vfiprintf_r+0x15a>
 800a028:	7863      	ldrb	r3, [r4, #1]
 800a02a:	2b2a      	cmp	r3, #42	; 0x2a
 800a02c:	d134      	bne.n	800a098 <_vfiprintf_r+0x1b0>
 800a02e:	9b03      	ldr	r3, [sp, #12]
 800a030:	3402      	adds	r4, #2
 800a032:	1d1a      	adds	r2, r3, #4
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	9203      	str	r2, [sp, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	bfb8      	it	lt
 800a03c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a040:	9305      	str	r3, [sp, #20]
 800a042:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a10c <_vfiprintf_r+0x224>
 800a046:	2203      	movs	r2, #3
 800a048:	4650      	mov	r0, sl
 800a04a:	7821      	ldrb	r1, [r4, #0]
 800a04c:	f7fe fb63 	bl	8008716 <memchr>
 800a050:	b138      	cbz	r0, 800a062 <_vfiprintf_r+0x17a>
 800a052:	2240      	movs	r2, #64	; 0x40
 800a054:	9b04      	ldr	r3, [sp, #16]
 800a056:	eba0 000a 	sub.w	r0, r0, sl
 800a05a:	4082      	lsls	r2, r0
 800a05c:	4313      	orrs	r3, r2
 800a05e:	3401      	adds	r4, #1
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a066:	2206      	movs	r2, #6
 800a068:	4829      	ldr	r0, [pc, #164]	; (800a110 <_vfiprintf_r+0x228>)
 800a06a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a06e:	f7fe fb52 	bl	8008716 <memchr>
 800a072:	2800      	cmp	r0, #0
 800a074:	d03f      	beq.n	800a0f6 <_vfiprintf_r+0x20e>
 800a076:	4b27      	ldr	r3, [pc, #156]	; (800a114 <_vfiprintf_r+0x22c>)
 800a078:	bb1b      	cbnz	r3, 800a0c2 <_vfiprintf_r+0x1da>
 800a07a:	9b03      	ldr	r3, [sp, #12]
 800a07c:	3307      	adds	r3, #7
 800a07e:	f023 0307 	bic.w	r3, r3, #7
 800a082:	3308      	adds	r3, #8
 800a084:	9303      	str	r3, [sp, #12]
 800a086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a088:	443b      	add	r3, r7
 800a08a:	9309      	str	r3, [sp, #36]	; 0x24
 800a08c:	e768      	b.n	8009f60 <_vfiprintf_r+0x78>
 800a08e:	460c      	mov	r4, r1
 800a090:	2001      	movs	r0, #1
 800a092:	fb0c 3202 	mla	r2, ip, r2, r3
 800a096:	e7a6      	b.n	8009fe6 <_vfiprintf_r+0xfe>
 800a098:	2300      	movs	r3, #0
 800a09a:	f04f 0c0a 	mov.w	ip, #10
 800a09e:	4619      	mov	r1, r3
 800a0a0:	3401      	adds	r4, #1
 800a0a2:	9305      	str	r3, [sp, #20]
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0aa:	3a30      	subs	r2, #48	; 0x30
 800a0ac:	2a09      	cmp	r2, #9
 800a0ae:	d903      	bls.n	800a0b8 <_vfiprintf_r+0x1d0>
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d0c6      	beq.n	800a042 <_vfiprintf_r+0x15a>
 800a0b4:	9105      	str	r1, [sp, #20]
 800a0b6:	e7c4      	b.n	800a042 <_vfiprintf_r+0x15a>
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0c0:	e7f0      	b.n	800a0a4 <_vfiprintf_r+0x1bc>
 800a0c2:	ab03      	add	r3, sp, #12
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	462a      	mov	r2, r5
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4b13      	ldr	r3, [pc, #76]	; (800a118 <_vfiprintf_r+0x230>)
 800a0cc:	a904      	add	r1, sp, #16
 800a0ce:	f7fd fc6f 	bl	80079b0 <_printf_float>
 800a0d2:	4607      	mov	r7, r0
 800a0d4:	1c78      	adds	r0, r7, #1
 800a0d6:	d1d6      	bne.n	800a086 <_vfiprintf_r+0x19e>
 800a0d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0da:	07d9      	lsls	r1, r3, #31
 800a0dc:	d405      	bmi.n	800a0ea <_vfiprintf_r+0x202>
 800a0de:	89ab      	ldrh	r3, [r5, #12]
 800a0e0:	059a      	lsls	r2, r3, #22
 800a0e2:	d402      	bmi.n	800a0ea <_vfiprintf_r+0x202>
 800a0e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0e6:	f7fe fb0d 	bl	8008704 <__retarget_lock_release_recursive>
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	065b      	lsls	r3, r3, #25
 800a0ee:	f53f af1d 	bmi.w	8009f2c <_vfiprintf_r+0x44>
 800a0f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0f4:	e71c      	b.n	8009f30 <_vfiprintf_r+0x48>
 800a0f6:	ab03      	add	r3, sp, #12
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	462a      	mov	r2, r5
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	4b06      	ldr	r3, [pc, #24]	; (800a118 <_vfiprintf_r+0x230>)
 800a100:	a904      	add	r1, sp, #16
 800a102:	f7fd fef5 	bl	8007ef0 <_printf_i>
 800a106:	e7e4      	b.n	800a0d2 <_vfiprintf_r+0x1ea>
 800a108:	0800ab7c 	.word	0x0800ab7c
 800a10c:	0800ab82 	.word	0x0800ab82
 800a110:	0800ab86 	.word	0x0800ab86
 800a114:	080079b1 	.word	0x080079b1
 800a118:	08009ec3 	.word	0x08009ec3

0800a11c <__sflush_r>:
 800a11c:	898a      	ldrh	r2, [r1, #12]
 800a11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a120:	4605      	mov	r5, r0
 800a122:	0710      	lsls	r0, r2, #28
 800a124:	460c      	mov	r4, r1
 800a126:	d457      	bmi.n	800a1d8 <__sflush_r+0xbc>
 800a128:	684b      	ldr	r3, [r1, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	dc04      	bgt.n	800a138 <__sflush_r+0x1c>
 800a12e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a130:	2b00      	cmp	r3, #0
 800a132:	dc01      	bgt.n	800a138 <__sflush_r+0x1c>
 800a134:	2000      	movs	r0, #0
 800a136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a13a:	2e00      	cmp	r6, #0
 800a13c:	d0fa      	beq.n	800a134 <__sflush_r+0x18>
 800a13e:	2300      	movs	r3, #0
 800a140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a144:	682f      	ldr	r7, [r5, #0]
 800a146:	6a21      	ldr	r1, [r4, #32]
 800a148:	602b      	str	r3, [r5, #0]
 800a14a:	d032      	beq.n	800a1b2 <__sflush_r+0x96>
 800a14c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a14e:	89a3      	ldrh	r3, [r4, #12]
 800a150:	075a      	lsls	r2, r3, #29
 800a152:	d505      	bpl.n	800a160 <__sflush_r+0x44>
 800a154:	6863      	ldr	r3, [r4, #4]
 800a156:	1ac0      	subs	r0, r0, r3
 800a158:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a15a:	b10b      	cbz	r3, 800a160 <__sflush_r+0x44>
 800a15c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a15e:	1ac0      	subs	r0, r0, r3
 800a160:	2300      	movs	r3, #0
 800a162:	4602      	mov	r2, r0
 800a164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a166:	4628      	mov	r0, r5
 800a168:	6a21      	ldr	r1, [r4, #32]
 800a16a:	47b0      	blx	r6
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	89a3      	ldrh	r3, [r4, #12]
 800a170:	d106      	bne.n	800a180 <__sflush_r+0x64>
 800a172:	6829      	ldr	r1, [r5, #0]
 800a174:	291d      	cmp	r1, #29
 800a176:	d82b      	bhi.n	800a1d0 <__sflush_r+0xb4>
 800a178:	4a28      	ldr	r2, [pc, #160]	; (800a21c <__sflush_r+0x100>)
 800a17a:	410a      	asrs	r2, r1
 800a17c:	07d6      	lsls	r6, r2, #31
 800a17e:	d427      	bmi.n	800a1d0 <__sflush_r+0xb4>
 800a180:	2200      	movs	r2, #0
 800a182:	6062      	str	r2, [r4, #4]
 800a184:	6922      	ldr	r2, [r4, #16]
 800a186:	04d9      	lsls	r1, r3, #19
 800a188:	6022      	str	r2, [r4, #0]
 800a18a:	d504      	bpl.n	800a196 <__sflush_r+0x7a>
 800a18c:	1c42      	adds	r2, r0, #1
 800a18e:	d101      	bne.n	800a194 <__sflush_r+0x78>
 800a190:	682b      	ldr	r3, [r5, #0]
 800a192:	b903      	cbnz	r3, 800a196 <__sflush_r+0x7a>
 800a194:	6560      	str	r0, [r4, #84]	; 0x54
 800a196:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a198:	602f      	str	r7, [r5, #0]
 800a19a:	2900      	cmp	r1, #0
 800a19c:	d0ca      	beq.n	800a134 <__sflush_r+0x18>
 800a19e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1a2:	4299      	cmp	r1, r3
 800a1a4:	d002      	beq.n	800a1ac <__sflush_r+0x90>
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f7ff f95e 	bl	8009468 <_free_r>
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	6360      	str	r0, [r4, #52]	; 0x34
 800a1b0:	e7c1      	b.n	800a136 <__sflush_r+0x1a>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	47b0      	blx	r6
 800a1b8:	1c41      	adds	r1, r0, #1
 800a1ba:	d1c8      	bne.n	800a14e <__sflush_r+0x32>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0c5      	beq.n	800a14e <__sflush_r+0x32>
 800a1c2:	2b1d      	cmp	r3, #29
 800a1c4:	d001      	beq.n	800a1ca <__sflush_r+0xae>
 800a1c6:	2b16      	cmp	r3, #22
 800a1c8:	d101      	bne.n	800a1ce <__sflush_r+0xb2>
 800a1ca:	602f      	str	r7, [r5, #0]
 800a1cc:	e7b2      	b.n	800a134 <__sflush_r+0x18>
 800a1ce:	89a3      	ldrh	r3, [r4, #12]
 800a1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d4:	81a3      	strh	r3, [r4, #12]
 800a1d6:	e7ae      	b.n	800a136 <__sflush_r+0x1a>
 800a1d8:	690f      	ldr	r7, [r1, #16]
 800a1da:	2f00      	cmp	r7, #0
 800a1dc:	d0aa      	beq.n	800a134 <__sflush_r+0x18>
 800a1de:	0793      	lsls	r3, r2, #30
 800a1e0:	bf18      	it	ne
 800a1e2:	2300      	movne	r3, #0
 800a1e4:	680e      	ldr	r6, [r1, #0]
 800a1e6:	bf08      	it	eq
 800a1e8:	694b      	ldreq	r3, [r1, #20]
 800a1ea:	1bf6      	subs	r6, r6, r7
 800a1ec:	600f      	str	r7, [r1, #0]
 800a1ee:	608b      	str	r3, [r1, #8]
 800a1f0:	2e00      	cmp	r6, #0
 800a1f2:	dd9f      	ble.n	800a134 <__sflush_r+0x18>
 800a1f4:	4633      	mov	r3, r6
 800a1f6:	463a      	mov	r2, r7
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	6a21      	ldr	r1, [r4, #32]
 800a1fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a200:	47e0      	blx	ip
 800a202:	2800      	cmp	r0, #0
 800a204:	dc06      	bgt.n	800a214 <__sflush_r+0xf8>
 800a206:	89a3      	ldrh	r3, [r4, #12]
 800a208:	f04f 30ff 	mov.w	r0, #4294967295
 800a20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a210:	81a3      	strh	r3, [r4, #12]
 800a212:	e790      	b.n	800a136 <__sflush_r+0x1a>
 800a214:	4407      	add	r7, r0
 800a216:	1a36      	subs	r6, r6, r0
 800a218:	e7ea      	b.n	800a1f0 <__sflush_r+0xd4>
 800a21a:	bf00      	nop
 800a21c:	dfbffffe 	.word	0xdfbffffe

0800a220 <_fflush_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	690b      	ldr	r3, [r1, #16]
 800a224:	4605      	mov	r5, r0
 800a226:	460c      	mov	r4, r1
 800a228:	b913      	cbnz	r3, 800a230 <_fflush_r+0x10>
 800a22a:	2500      	movs	r5, #0
 800a22c:	4628      	mov	r0, r5
 800a22e:	bd38      	pop	{r3, r4, r5, pc}
 800a230:	b118      	cbz	r0, 800a23a <_fflush_r+0x1a>
 800a232:	6a03      	ldr	r3, [r0, #32]
 800a234:	b90b      	cbnz	r3, 800a23a <_fflush_r+0x1a>
 800a236:	f7fe f809 	bl	800824c <__sinit>
 800a23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0f3      	beq.n	800a22a <_fflush_r+0xa>
 800a242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a244:	07d0      	lsls	r0, r2, #31
 800a246:	d404      	bmi.n	800a252 <_fflush_r+0x32>
 800a248:	0599      	lsls	r1, r3, #22
 800a24a:	d402      	bmi.n	800a252 <_fflush_r+0x32>
 800a24c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a24e:	f7fe fa58 	bl	8008702 <__retarget_lock_acquire_recursive>
 800a252:	4628      	mov	r0, r5
 800a254:	4621      	mov	r1, r4
 800a256:	f7ff ff61 	bl	800a11c <__sflush_r>
 800a25a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a25c:	4605      	mov	r5, r0
 800a25e:	07da      	lsls	r2, r3, #31
 800a260:	d4e4      	bmi.n	800a22c <_fflush_r+0xc>
 800a262:	89a3      	ldrh	r3, [r4, #12]
 800a264:	059b      	lsls	r3, r3, #22
 800a266:	d4e1      	bmi.n	800a22c <_fflush_r+0xc>
 800a268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a26a:	f7fe fa4b 	bl	8008704 <__retarget_lock_release_recursive>
 800a26e:	e7dd      	b.n	800a22c <_fflush_r+0xc>

0800a270 <fiprintf>:
 800a270:	b40e      	push	{r1, r2, r3}
 800a272:	b503      	push	{r0, r1, lr}
 800a274:	4601      	mov	r1, r0
 800a276:	ab03      	add	r3, sp, #12
 800a278:	4805      	ldr	r0, [pc, #20]	; (800a290 <fiprintf+0x20>)
 800a27a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a27e:	6800      	ldr	r0, [r0, #0]
 800a280:	9301      	str	r3, [sp, #4]
 800a282:	f7ff fe31 	bl	8009ee8 <_vfiprintf_r>
 800a286:	b002      	add	sp, #8
 800a288:	f85d eb04 	ldr.w	lr, [sp], #4
 800a28c:	b003      	add	sp, #12
 800a28e:	4770      	bx	lr
 800a290:	200000d4 	.word	0x200000d4

0800a294 <__swhatbuf_r>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	460c      	mov	r4, r1
 800a298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a29c:	4615      	mov	r5, r2
 800a29e:	2900      	cmp	r1, #0
 800a2a0:	461e      	mov	r6, r3
 800a2a2:	b096      	sub	sp, #88	; 0x58
 800a2a4:	da0c      	bge.n	800a2c0 <__swhatbuf_r+0x2c>
 800a2a6:	89a3      	ldrh	r3, [r4, #12]
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a2ae:	bf0c      	ite	eq
 800a2b0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a2b4:	2340      	movne	r3, #64	; 0x40
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	6031      	str	r1, [r6, #0]
 800a2ba:	602b      	str	r3, [r5, #0]
 800a2bc:	b016      	add	sp, #88	; 0x58
 800a2be:	bd70      	pop	{r4, r5, r6, pc}
 800a2c0:	466a      	mov	r2, sp
 800a2c2:	f000 f863 	bl	800a38c <_fstat_r>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	dbed      	blt.n	800a2a6 <__swhatbuf_r+0x12>
 800a2ca:	9901      	ldr	r1, [sp, #4]
 800a2cc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a2d0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a2d4:	4259      	negs	r1, r3
 800a2d6:	4159      	adcs	r1, r3
 800a2d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2dc:	e7eb      	b.n	800a2b6 <__swhatbuf_r+0x22>

0800a2de <__smakebuf_r>:
 800a2de:	898b      	ldrh	r3, [r1, #12]
 800a2e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2e2:	079d      	lsls	r5, r3, #30
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	d507      	bpl.n	800a2fa <__smakebuf_r+0x1c>
 800a2ea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	6123      	str	r3, [r4, #16]
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	6163      	str	r3, [r4, #20]
 800a2f6:	b002      	add	sp, #8
 800a2f8:	bd70      	pop	{r4, r5, r6, pc}
 800a2fa:	466a      	mov	r2, sp
 800a2fc:	ab01      	add	r3, sp, #4
 800a2fe:	f7ff ffc9 	bl	800a294 <__swhatbuf_r>
 800a302:	9900      	ldr	r1, [sp, #0]
 800a304:	4605      	mov	r5, r0
 800a306:	4630      	mov	r0, r6
 800a308:	f7fd fa2a 	bl	8007760 <_malloc_r>
 800a30c:	b948      	cbnz	r0, 800a322 <__smakebuf_r+0x44>
 800a30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a312:	059a      	lsls	r2, r3, #22
 800a314:	d4ef      	bmi.n	800a2f6 <__smakebuf_r+0x18>
 800a316:	f023 0303 	bic.w	r3, r3, #3
 800a31a:	f043 0302 	orr.w	r3, r3, #2
 800a31e:	81a3      	strh	r3, [r4, #12]
 800a320:	e7e3      	b.n	800a2ea <__smakebuf_r+0xc>
 800a322:	89a3      	ldrh	r3, [r4, #12]
 800a324:	6020      	str	r0, [r4, #0]
 800a326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a32a:	81a3      	strh	r3, [r4, #12]
 800a32c:	9b00      	ldr	r3, [sp, #0]
 800a32e:	6120      	str	r0, [r4, #16]
 800a330:	6163      	str	r3, [r4, #20]
 800a332:	9b01      	ldr	r3, [sp, #4]
 800a334:	b15b      	cbz	r3, 800a34e <__smakebuf_r+0x70>
 800a336:	4630      	mov	r0, r6
 800a338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a33c:	f000 f838 	bl	800a3b0 <_isatty_r>
 800a340:	b128      	cbz	r0, 800a34e <__smakebuf_r+0x70>
 800a342:	89a3      	ldrh	r3, [r4, #12]
 800a344:	f023 0303 	bic.w	r3, r3, #3
 800a348:	f043 0301 	orr.w	r3, r3, #1
 800a34c:	81a3      	strh	r3, [r4, #12]
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	431d      	orrs	r5, r3
 800a352:	81a5      	strh	r5, [r4, #12]
 800a354:	e7cf      	b.n	800a2f6 <__smakebuf_r+0x18>

0800a356 <memmove>:
 800a356:	4288      	cmp	r0, r1
 800a358:	b510      	push	{r4, lr}
 800a35a:	eb01 0402 	add.w	r4, r1, r2
 800a35e:	d902      	bls.n	800a366 <memmove+0x10>
 800a360:	4284      	cmp	r4, r0
 800a362:	4623      	mov	r3, r4
 800a364:	d807      	bhi.n	800a376 <memmove+0x20>
 800a366:	1e43      	subs	r3, r0, #1
 800a368:	42a1      	cmp	r1, r4
 800a36a:	d008      	beq.n	800a37e <memmove+0x28>
 800a36c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a370:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a374:	e7f8      	b.n	800a368 <memmove+0x12>
 800a376:	4601      	mov	r1, r0
 800a378:	4402      	add	r2, r0
 800a37a:	428a      	cmp	r2, r1
 800a37c:	d100      	bne.n	800a380 <memmove+0x2a>
 800a37e:	bd10      	pop	{r4, pc}
 800a380:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a384:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a388:	e7f7      	b.n	800a37a <memmove+0x24>
	...

0800a38c <_fstat_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	2300      	movs	r3, #0
 800a390:	4d06      	ldr	r5, [pc, #24]	; (800a3ac <_fstat_r+0x20>)
 800a392:	4604      	mov	r4, r0
 800a394:	4608      	mov	r0, r1
 800a396:	4611      	mov	r1, r2
 800a398:	602b      	str	r3, [r5, #0]
 800a39a:	f7f6 ffc2 	bl	8001322 <_fstat>
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	d102      	bne.n	800a3a8 <_fstat_r+0x1c>
 800a3a2:	682b      	ldr	r3, [r5, #0]
 800a3a4:	b103      	cbz	r3, 800a3a8 <_fstat_r+0x1c>
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	bd38      	pop	{r3, r4, r5, pc}
 800a3aa:	bf00      	nop
 800a3ac:	20000bd8 	.word	0x20000bd8

0800a3b0 <_isatty_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	4d05      	ldr	r5, [pc, #20]	; (800a3cc <_isatty_r+0x1c>)
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	4608      	mov	r0, r1
 800a3ba:	602b      	str	r3, [r5, #0]
 800a3bc:	f7f6 ffc0 	bl	8001340 <_isatty>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_isatty_r+0x1a>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_isatty_r+0x1a>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	20000bd8 	.word	0x20000bd8

0800a3d0 <abort>:
 800a3d0:	2006      	movs	r0, #6
 800a3d2:	b508      	push	{r3, lr}
 800a3d4:	f000 f88e 	bl	800a4f4 <raise>
 800a3d8:	2001      	movs	r0, #1
 800a3da:	f7f6 ff54 	bl	8001286 <_exit>

0800a3de <_calloc_r>:
 800a3de:	b570      	push	{r4, r5, r6, lr}
 800a3e0:	fba1 5402 	umull	r5, r4, r1, r2
 800a3e4:	b934      	cbnz	r4, 800a3f4 <_calloc_r+0x16>
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7fd f9ba 	bl	8007760 <_malloc_r>
 800a3ec:	4606      	mov	r6, r0
 800a3ee:	b928      	cbnz	r0, 800a3fc <_calloc_r+0x1e>
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	bd70      	pop	{r4, r5, r6, pc}
 800a3f4:	220c      	movs	r2, #12
 800a3f6:	2600      	movs	r6, #0
 800a3f8:	6002      	str	r2, [r0, #0]
 800a3fa:	e7f9      	b.n	800a3f0 <_calloc_r+0x12>
 800a3fc:	462a      	mov	r2, r5
 800a3fe:	4621      	mov	r1, r4
 800a400:	f7fe f8c0 	bl	8008584 <memset>
 800a404:	e7f4      	b.n	800a3f0 <_calloc_r+0x12>

0800a406 <__ascii_mbtowc>:
 800a406:	b082      	sub	sp, #8
 800a408:	b901      	cbnz	r1, 800a40c <__ascii_mbtowc+0x6>
 800a40a:	a901      	add	r1, sp, #4
 800a40c:	b142      	cbz	r2, 800a420 <__ascii_mbtowc+0x1a>
 800a40e:	b14b      	cbz	r3, 800a424 <__ascii_mbtowc+0x1e>
 800a410:	7813      	ldrb	r3, [r2, #0]
 800a412:	600b      	str	r3, [r1, #0]
 800a414:	7812      	ldrb	r2, [r2, #0]
 800a416:	1e10      	subs	r0, r2, #0
 800a418:	bf18      	it	ne
 800a41a:	2001      	movne	r0, #1
 800a41c:	b002      	add	sp, #8
 800a41e:	4770      	bx	lr
 800a420:	4610      	mov	r0, r2
 800a422:	e7fb      	b.n	800a41c <__ascii_mbtowc+0x16>
 800a424:	f06f 0001 	mvn.w	r0, #1
 800a428:	e7f8      	b.n	800a41c <__ascii_mbtowc+0x16>

0800a42a <_realloc_r>:
 800a42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42e:	4680      	mov	r8, r0
 800a430:	4614      	mov	r4, r2
 800a432:	460e      	mov	r6, r1
 800a434:	b921      	cbnz	r1, 800a440 <_realloc_r+0x16>
 800a436:	4611      	mov	r1, r2
 800a438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a43c:	f7fd b990 	b.w	8007760 <_malloc_r>
 800a440:	b92a      	cbnz	r2, 800a44e <_realloc_r+0x24>
 800a442:	f7ff f811 	bl	8009468 <_free_r>
 800a446:	4625      	mov	r5, r4
 800a448:	4628      	mov	r0, r5
 800a44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a44e:	f000 f86d 	bl	800a52c <_malloc_usable_size_r>
 800a452:	4284      	cmp	r4, r0
 800a454:	4607      	mov	r7, r0
 800a456:	d802      	bhi.n	800a45e <_realloc_r+0x34>
 800a458:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a45c:	d812      	bhi.n	800a484 <_realloc_r+0x5a>
 800a45e:	4621      	mov	r1, r4
 800a460:	4640      	mov	r0, r8
 800a462:	f7fd f97d 	bl	8007760 <_malloc_r>
 800a466:	4605      	mov	r5, r0
 800a468:	2800      	cmp	r0, #0
 800a46a:	d0ed      	beq.n	800a448 <_realloc_r+0x1e>
 800a46c:	42bc      	cmp	r4, r7
 800a46e:	4622      	mov	r2, r4
 800a470:	4631      	mov	r1, r6
 800a472:	bf28      	it	cs
 800a474:	463a      	movcs	r2, r7
 800a476:	f7fe f95c 	bl	8008732 <memcpy>
 800a47a:	4631      	mov	r1, r6
 800a47c:	4640      	mov	r0, r8
 800a47e:	f7fe fff3 	bl	8009468 <_free_r>
 800a482:	e7e1      	b.n	800a448 <_realloc_r+0x1e>
 800a484:	4635      	mov	r5, r6
 800a486:	e7df      	b.n	800a448 <_realloc_r+0x1e>

0800a488 <__ascii_wctomb>:
 800a488:	4603      	mov	r3, r0
 800a48a:	4608      	mov	r0, r1
 800a48c:	b141      	cbz	r1, 800a4a0 <__ascii_wctomb+0x18>
 800a48e:	2aff      	cmp	r2, #255	; 0xff
 800a490:	d904      	bls.n	800a49c <__ascii_wctomb+0x14>
 800a492:	228a      	movs	r2, #138	; 0x8a
 800a494:	f04f 30ff 	mov.w	r0, #4294967295
 800a498:	601a      	str	r2, [r3, #0]
 800a49a:	4770      	bx	lr
 800a49c:	2001      	movs	r0, #1
 800a49e:	700a      	strb	r2, [r1, #0]
 800a4a0:	4770      	bx	lr

0800a4a2 <_raise_r>:
 800a4a2:	291f      	cmp	r1, #31
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	460d      	mov	r5, r1
 800a4aa:	d904      	bls.n	800a4b6 <_raise_r+0x14>
 800a4ac:	2316      	movs	r3, #22
 800a4ae:	6003      	str	r3, [r0, #0]
 800a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b4:	bd38      	pop	{r3, r4, r5, pc}
 800a4b6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a4b8:	b112      	cbz	r2, 800a4c0 <_raise_r+0x1e>
 800a4ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4be:	b94b      	cbnz	r3, 800a4d4 <_raise_r+0x32>
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 f831 	bl	800a528 <_getpid_r>
 800a4c6:	462a      	mov	r2, r5
 800a4c8:	4601      	mov	r1, r0
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4d0:	f000 b818 	b.w	800a504 <_kill_r>
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d00a      	beq.n	800a4ee <_raise_r+0x4c>
 800a4d8:	1c59      	adds	r1, r3, #1
 800a4da:	d103      	bne.n	800a4e4 <_raise_r+0x42>
 800a4dc:	2316      	movs	r3, #22
 800a4de:	6003      	str	r3, [r0, #0]
 800a4e0:	2001      	movs	r0, #1
 800a4e2:	e7e7      	b.n	800a4b4 <_raise_r+0x12>
 800a4e4:	2400      	movs	r4, #0
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4ec:	4798      	blx	r3
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	e7e0      	b.n	800a4b4 <_raise_r+0x12>
	...

0800a4f4 <raise>:
 800a4f4:	4b02      	ldr	r3, [pc, #8]	; (800a500 <raise+0xc>)
 800a4f6:	4601      	mov	r1, r0
 800a4f8:	6818      	ldr	r0, [r3, #0]
 800a4fa:	f7ff bfd2 	b.w	800a4a2 <_raise_r>
 800a4fe:	bf00      	nop
 800a500:	200000d4 	.word	0x200000d4

0800a504 <_kill_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	2300      	movs	r3, #0
 800a508:	4d06      	ldr	r5, [pc, #24]	; (800a524 <_kill_r+0x20>)
 800a50a:	4604      	mov	r4, r0
 800a50c:	4608      	mov	r0, r1
 800a50e:	4611      	mov	r1, r2
 800a510:	602b      	str	r3, [r5, #0]
 800a512:	f7f6 fea8 	bl	8001266 <_kill>
 800a516:	1c43      	adds	r3, r0, #1
 800a518:	d102      	bne.n	800a520 <_kill_r+0x1c>
 800a51a:	682b      	ldr	r3, [r5, #0]
 800a51c:	b103      	cbz	r3, 800a520 <_kill_r+0x1c>
 800a51e:	6023      	str	r3, [r4, #0]
 800a520:	bd38      	pop	{r3, r4, r5, pc}
 800a522:	bf00      	nop
 800a524:	20000bd8 	.word	0x20000bd8

0800a528 <_getpid_r>:
 800a528:	f7f6 be96 	b.w	8001258 <_getpid>

0800a52c <_malloc_usable_size_r>:
 800a52c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a530:	1f18      	subs	r0, r3, #4
 800a532:	2b00      	cmp	r3, #0
 800a534:	bfbc      	itt	lt
 800a536:	580b      	ldrlt	r3, [r1, r0]
 800a538:	18c0      	addlt	r0, r0, r3
 800a53a:	4770      	bx	lr

0800a53c <_init>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	bf00      	nop
 800a540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a542:	bc08      	pop	{r3}
 800a544:	469e      	mov	lr, r3
 800a546:	4770      	bx	lr

0800a548 <_fini>:
 800a548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54a:	bf00      	nop
 800a54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a54e:	bc08      	pop	{r3}
 800a550:	469e      	mov	lr, r3
 800a552:	4770      	bx	lr
